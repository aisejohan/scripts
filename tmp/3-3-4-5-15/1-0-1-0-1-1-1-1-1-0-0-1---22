/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 52
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[1, 0, 3, 0, 0]  	15	2 
[2, 4, 0, 0, 0]  	18	7 
[1, 5, 0, 0, 0]  	18	7 
[1, 0, 0, 3, 0]  	18	3 
[1, 4, 1, 0, 0]  	19	6 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 3, 1, 1, 0]  	21	7 
[1, 0, 2, 2, 0]  	21	5 
[1, 2, 2, 1, 0]  	22	3 
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 2, 1, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 5, 0, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 5, 1, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	4 
[2, 3, 0, 0, 1]  	15	7 
[1, 3, 1, 0, 1]  	16	6 
[1, 1, 0, 2, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	5 
[1, 2, 2, 0, 1]  	17	5 
[1, 1, 2, 1, 1]  	19	5 
[0, 7, 0, 0, 1]  	21	6 
[0, 1, 5, 0, 1]  	23	3 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[1, 0, 1, 1, 255]  	12	2 
[1, 4, 0, 0, 255]  	15	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 1, 1, 2, 255]  	17	2 
[0, 3, 0, 2, 255]  	19	4 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 2 and 254.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[4170191432120622594 + 8634209012103354708*2^64 + 6112655355062720808*2^128 + 200391529*2^192,2310137493315640160 + 1193026860407307034*2^64 + 16861638181881192973*2^128 + 160917667*2^192,8308761366754446960 + 7030256848567748228*2^64 + 4171585361162646100*2^128 + 199450312*2^192,386658582512151376 + 16047961381342222292*2^64 + 10953261214031394028*2^128 + 268686029*2^192,6370302970081197512 + 17774625046306566612*2^64 + 7917316025030064782*2^128 + 2090162306*2^192,3306927651237083008 + 4504448166655953159*2^64 + 18304617524978047080*2^128 + 1796825710*2^192,3082745677111536384 + 13800632309562343849*2^64 + 14033514413886328011*2^128 + 1863146563*2^192,2552219226883311744 + 3014125276253420992*2^64 + 11959763418086197496*2^128 + 1725927023*2^192;\
8948405208746140880 + 5502443947587775752*2^64 + 13751057125733380251*2^128 + 2083056764*2^192,9186360554295956278 + 7023554323168988231*2^64 + 3591263999134996389*2^128 + 1825616963*2^192,6636908367859471638 + 4613189401543532278*2^64 + 8077250444799113209*2^128 + 1428940498*2^192,15366238988287805982 + 16627045208938033867*2^64 + 4198728505926736371*2^128 + 2060886836*2^192,11781666484331073272 + 5155249727274336152*2^64 + 4739646873256003072*2^128 + 800023891*2^192,8259546229637161194 + 4867451074335411667*2^64 + 7802052841262245127*2^128 + 1050073612*2^192,17340168853149049076 + 2036854670485394633*2^64 + 10504359434825729393*2^128 + 562960112*2^192,6002784587879351616 + 14531202855442605026*2^64 + 14860321238969591443*2^128 + 1660393001*2^192;\
2235470602312093233 + 2910964189639588870*2^64 + 6015437700982929765*2^128 + 405652010*2^192,17543027611178887876 + 11980377668304800121*2^64 + 3875961253460227074*2^128 + 1342912917*2^192,18336582263776015200 + 4229282785395399691*2^64 + 17301484578836613069*2^128 + 2027498720*2^192,13025274702916932832 + 4517917853932489822*2^64 + 9411400485306609130*2^128 + 324179157*2^192,7495490603087625592 + 12362313577226834734*2^64 + 2780762027319151265*2^128 + 414706077*2^192,13730890552877848722 + 16587827686565877970*2^64 + 16627535637777439447*2^128 + 1074753752*2^192,574634581234508032 + 15075972095872511694*2^64 + 8197673606078239799*2^128 + 641359608*2^192,17458415141344645384 + 4208626661936570703*2^64 + 2837468142172497869*2^128 + 205664245*2^192;\
14786549292364786339 + 6152873074855539019*2^64 + 17539179567922251199*2^128 + 410467968*2^192,8937874550890485198 + 18339034458043667572*2^64 + 14789516649998398044*2^128 + 1105039538*2^192,11796976236797509370 + 3787197468579414234*2^64 + 4744259431766045579*2^128 + 1467691321*2^192,12182872462645375034 + 5278985383869755672*2^64 + 16202480408453894856*2^128 + 402029702*2^192,11822435103974101408 + 16055383697273261869*2^64 + 14386765803867746614*2^128 + 1713594853*2^192,13682817906244520748 + 14219964098328586708*2^64 + 15570099488457947323*2^128 + 1881361993*2^192,2580608763225749348 + 15050271823668456986*2^64 + 16429758455925408721*2^128 + 1893579754*2^192,14035100224443460648 + 7660642990807871370*2^64 + 9173903716558480781*2^128 + 1307353432*2^192;\
11597059861998944396 + 12267063955795048121*2^64 + 14140089235868460050*2^128 + 1086329147*2^192,457092591972767696 + 16489136255742260916*2^64 + 3020574208849130844*2^128 + 1580402034*2^192,7272503500903374472 + 12000318731755568483*2^64 + 11850973405396590945*2^128 + 521472429*2^192,2698100544514357328 + 2211470896931903101*2^64 + 2617547014640347954*2^128 + 1249221934*2^192,8859251140561930824 + 23411571743696046*2^64 + 10923924116402519998*2^128 + 1847838619*2^192,15254732506603745800 + 4868826390031719640*2^64 + 1411389650080647005*2^128 + 1994980582*2^192,3549354037996711856 + 10722394782573507014*2^64 + 11834776632013035860*2^128 + 1384947324*2^192,1449464385077482448 + 9553564778822702251*2^64 + 6649592725015757632*2^128 + 1317795869*2^192;\
12301447982658449999 + 11546307714473768714*2^64 + 2579476496151441327*2^128 + 1092323498*2^192,12747644574487771448 + 3439240931428391574*2^64 + 3784428686645274790*2^128 + 1697938914*2^192,3006267224451822700 + 12924443018132121554*2^64 + 13968631684091100729*2^128 + 372526914*2^192,9912982758723073844 + 3745949591702914922*2^64 + 15988643873351222725*2^128 + 813946212*2^192,5892201157671343640 + 6528026652264978396*2^64 + 672966410499811553*2^128 + 1703998308*2^192,953251009807364696 + 9598482573341125249*2^64 + 7097865872345391192*2^128 + 226654835*2^192,12565615177950083740 + 8800714449639252685*2^64 + 16402432113207544968*2^128 + 1468261368*2^192,14183754560814214864 + 4885198858545095985*2^64 + 4707097512915432343*2^128 + 938275609*2^192;\
18411974365922629901 + 7028831527505522688*2^64 + 1016458768340627259*2^128 + 1281357939*2^192,10286048701830429402 + 2932682450426277205*2^64 + 10447739240879975291*2^128 + 1171918460*2^192,15174036833256810110 + 10021605779863356693*2^64 + 16810479366070811860*2^128 + 87857505*2^192,1651434363751678902 + 6547937105206381436*2^64 + 8611128859893718093*2^128 + 160709499*2^192,11729760554748543628 + 12031647998499249473*2^64 + 5527572542167101006*2^128 + 2126347522*2^192,14766416269406253870 + 15921575185681705231*2^64 + 10421461017916233345*2^128 + 1390724542*2^192,10698842670588845552 + 8974050977028556566*2^64 + 10587594224919424748*2^128 + 808375362*2^192,1866916389411541472 + 1004088298511792456*2^64 + 7965540886949210763*2^128 + 1753800344*2^192;\
8501424413727971093 + 3868445246220507977*2^64 + 14295688090548441752*2^128 + 1055146116*2^192,15439531706295257404 + 2562982512941489946*2^64 + 12179290888428520848*2^128 + 1736115364*2^192,1577072492441359712 + 11172852305238524488*2^64 + 18157400670968217465*2^128 + 578734258*2^192,6454595971611020952 + 15728044084883392641*2^64 + 8265567636284075655*2^128 + 1217669270*2^192,13928913324037929896 + 7061958287910637741*2^64 + 9391512065389466237*2^128 + 2142321576*2^192,12232169965277470606 + 5777765482836488278*2^64 + 26523576811010719*2^128 + 432924336*2^192,9983461691512403256 + 16140424389273506876*2^64 + 18302187710387899525*2^128 + 1930965276*2^192,12598044697582194848 + 3420751177920846987*2^64 + 489383286167344251*2^128 + 1183589111*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5246 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 4*x^5 + 16*x^3 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 4*x + 16, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 29

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^5 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
Look at the ideal generated by: 
1*x^2*y^1 + 1*y^3 + 1*z^1*w^1
1*x^1*z^2 + 1*y^2*w^1 + 1*y^1*z^2
