/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 43
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 4, 0, 0, 0]  	15	2 
[0, 1, 3, 0, 0]  	15	2 
[1, 1, 2, 1, 0]  	19	3 
[0, 2, 2, 1, 0]  	19	2 
[1, 1, 1, 2, 0]  	20	3 
[0, 5, 0, 1, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	2 
[0, 6, 1, 0, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	3 
[0, 1, 0, 4, 0]  	23	2 
[0, 8, 0, 0, 0]  	24	2  <--- 2
[0, 0, 5, 1, 0]  	25	2 
[0, 1, 2, 3, 0]  	26	2 
[1, 3, 0, 3, 0]  	27	2 
[1, 0, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 0, 3, 1, 1]  	20	2 
[1, 3, 1, 1, 1]  	21	3 
[0, 7, 0, 0, 1]  	21	3 
[1, 0, 1, 3, 1]  	22	2 
[1, 0, 0, 4, 1]  	23	2 
[3, 1, 0, 0, 2]  	12	3 
[1, 3, 1, 0, 2]  	16	3 
[1, 1, 0, 2, 2]  	16	3 
[1, 3, 0, 1, 2]  	17	3 
[1, 2, 2, 0, 2]  	17	3 
[0, 1, 2, 1, 254]  	16	2 
[0, 1, 1, 2, 254]  	17	2 
[0, 0, 5, 0, 254]  	20	2 
[1, 0, 1, 1, 255]  	12	2 
[0, 4, 0, 0, 255]  	12	1 
[1, 0, 4, 0, 255]  	19	2 
[0, 3, 0, 3, 255]  	24	1 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[3082155353570209760 + 10931508318535677022*2^64 + 8522998222377864058*2^128 + 1031015594*2^192,11891137096946896056 + 17201247136200483363*2^64 + 40839885793717679*2^128 + 788749909*2^192,8849523495231835724 + 10446631309353900049*2^64 + 11892030560136075516*2^128 + 1552706232*2^192,12231910075144604908 + 3835419117305701430*2^64 + 686628345430056820*2^128 + 1066343040*2^192,5528214917924781640 + 14713436539464484389*2^64 + 4733837637307198863*2^128 + 44902880*2^192,12162776039960719656 + 11003065140196333650*2^64 + 6117306271320455202*2^128 + 87233549*2^192,10340003078887046844 + 104387443481040941*2^64 + 4986822180160837892*2^128 + 992049036*2^192,13508583908851764320 + 12873104878685882468*2^64 + 11939266716408048421*2^128 + 985283581*2^192;\
12356076689887360706 + 16321747930813898047*2^64 + 15916275913917382364*2^128 + 997288058*2^192,16622756139112257088 + 6097811708371353330*2^64 + 473388690682387558*2^128 + 806333733*2^192,17566310423054988278 + 17936096591494062018*2^64 + 1862909831856179909*2^128 + 1071026391*2^192,10780461892186390182 + 5880417374647547688*2^64 + 2253352483206982138*2^128 + 668848972*2^192,10224066912113880020 + 9271563944390548340*2^64 + 6917528060230254654*2^128 + 440858823*2^192,6871779266438483904 + 9769973207195888145*2^64 + 18393247515276892956*2^128 + 538525849*2^192,12391283283366737894 + 9948972654496705582*2^64 + 15143357864065780285*2^128 + 436600523*2^192,15467386189928249560 + 6279494610727935208*2^64 + 7030566172089542577*2^128 + 507301460*2^192;\
7526983984534794384 + 13368076642139366642*2^64 + 4001975211619932054*2^128 + 2097162654*2^192,12887132352845485344 + 690685679662922136*2^64 + 3818880000846534325*2^128 + 612719185*2^192,128236184731455322 + 14388916009344467286*2^64 + 12644341009447813825*2^128 + 581092446*2^192,17669114059004125264 + 2534772907467471680*2^64 + 8840140026061447029*2^128 + 314140038*2^192,2528058780646701644 + 3346154788840055633*2^64 + 7390949359465181108*2^128 + 6086381*2^192,2553285490862521184 + 1941852367168634560*2^64 + 8400837500534179942*2^128 + 115459799*2^192,9531129435782986904 + 10582286253551045822*2^64 + 10261004755000145613*2^128 + 106075871*2^192,1868358026169364280 + 5181058918791941409*2^64 + 1576603750756128126*2^128 + 384715375*2^192;\
0 + 0*2^64 + 0*2^128 + 805306368*2^192,0 + 0*2^64 + 0*2^128 + 167772160*2^192,0 + 0*2^64 + 0*2^128 + 922746880*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 56531567*2^192,0 + 0*2^64 + 0*2^128 + 301989888*2^192,0 + 0*2^64 + 0*2^128 + 167772160*2^192,0 + 0*2^64 + 0*2^128 + 1023410176*2^192,0 + 0*2^64 + 0*2^128 + 452984832*2^192;\
8874403813845744348 + 1082158082437374915*2^64 + 14536017572158506252*2^128 + 601608970*2^192,14097808721334551408 + 5491755793348285872*2^64 + 18384284109896369708*2^128 + 420302847*2^192,16266393111944200005 + 1475555152796347197*2^64 + 10297791227358046631*2^128 + 2038741876*2^192,9731213591120239320 + 17438619806652862184*2^64 + 6213704335931920263*2^128 + 596448143*2^192,3912231372132251766 + 2283109980054937370*2^64 + 14091099884543905090*2^128 + 707390338*2^192,8420772883921672784 + 7389975921629674733*2^64 + 4391742850598217975*2^128 + 474238011*2^192,2664068366881053576 + 18252010243615562969*2^64 + 14599968696406063423*2^128 + 1019780460*2^192,5690591876505340048 + 3524080725673454089*2^64 + 14732735825729798187*2^128 + 424618454*2^192;\
11827342728690925064 + 11710796719093985875*2^64 + 6398912769806545412*2^128 + 753977341*2^192,5946194924997673316 + 11191569931758500588*2^64 + 3491356153022089173*2^128 + 560624153*2^192,263361342190024666 + 8538044254724334435*2^64 + 18281035876108359721*2^128 + 58859662*2^192,7787723686310362602 + 9361500917167437645*2^64 + 8696838416367217652*2^128 + 20827356*2^192,11104421740362159756 + 1437777550145502513*2^64 + 14291443526242547536*2^128 + 414779174*2^192,6494049527280988136 + 7860176307271587912*2^64 + 15948541861076713417*2^128 + 716046355*2^192,15523448430950827298 + 9627504598438292094*2^64 + 2206637980751234884*2^128 + 787962844*2^192,2434156825624289656 + 6341160100307551061*2^64 + 10341598139519916323*2^128 + 117798686*2^192;\
3771484492951458254 + 2496388165317203223*2^64 + 13217186955111716072*2^128 + 461702650*2^192,15868602747120892504 + 17406199050307054860*2^64 + 13959270362382760593*2^128 + 1943510637*2^192,3445445233116871644 + 8270093930658937931*2^64 + 5463243491049611764*2^128 + 375712239*2^192,11744585290996213884 + 3175453565718075458*2^64 + 11343271273556316414*2^128 + 887176450*2^192,17350009826001623192 + 12889545839243520048*2^64 + 6769927467077251249*2^128 + 120073158*2^192,2965726275498252068 + 17145191470547702114*2^64 + 15525433476902526703*2^128 + 2018951211*2^192,9682637332282665620 + 14441255037175893956*2^64 + 4240372617117775163*2^128 + 2074073798*2^192,15370166703127972496 + 7376574235933715697*2^64 + 1756341785440208088*2^128 + 536066562*2^192;\
8943476419378488348 + 14512833073818247969*2^64 + 17845099983545183216*2^128 + 1436536490*2^192,3110195323766204272 + 1669790854911986409*2^64 + 15187349055485479187*2^128 + 1497152678*2^192,12791218331468672984 + 6570142471429094194*2^64 + 12772241643756745642*2^128 + 277683153*2^192,5435991377487881432 + 5913841921797914781*2^64 + 9253621905801652781*2^128 + 1716980971*2^192,13252198490268375200 + 11120381261597688338*2^64 + 3167088933176077663*2^128 + 1257951960*2^192,16624245838626198864 + 8568102719370304322*2^64 + 16309834596829581709*2^128 + 127693363*2^192,17712528828748394504 + 7691475090601275742*2^64 + 17049550287841175390*2^128 + 1688548512*2^192,12429308844294199184 + 4620246571919188492*2^64 + 3313697453040465215*2^128 + 1325850434*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 3882 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + 4*x^5 - 16*x^3 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 + 4*x^4 + 4*x^3 + 16*x^2 + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 36

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
