/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 41
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 0, 1, 2, 0]  	17	3 
[2, 4, 0, 0, 0]  	18	6 
[3, 2, 0, 1, 0]  	20	5 
[1, 4, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[2, 2, 0, 2, 0]  	22	4 
[1, 3, 0, 2, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	5 
[1, 2, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	4 
[2, 3, 0, 0, 1]  	15	5 
[3, 0, 0, 2, 1]  	19	4 
[2, 1, 0, 2, 1]  	19	5 
[2, 0, 0, 3, 1]  	21	6 
[0, 1, 3, 2, 1]  	25	3 
[0, 1, 2, 3, 1]  	26	2 
[2, 1, 1, 1, 2]  	18	6 
[0, 0, 5, 1, 2]  	25	2 
[0, 0, 0, 5, 253]  	25	1 
[1, 5, 0, 0, 254]  	18	3 
[0, 4, 0, 0, 255]  	12	2 
[0, 2, 0, 2, 255]  	16	2 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 8 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[11869626503514914020 + 12494711707487621319*2^64 + 7522612211541956500*2^128 + 4255001194*2^192,13239406274857257784 + 14240950848442293717*2^64 + 684715474013097568*2^128 + 3805301800*2^192,17256412077920795888 + 18316297135230950701*2^64 + 14462336769130632638*2^128 + 4332966772*2^192,741863798894415664 + 10009680647437307376*2^64 + 13861277949201055112*2^128 + 14644274311*2^192,8728941930934946136 + 17327085969836750642*2^64 + 13291858695956735281*2^128 + 5622708136*2^192,7318975485422002664 + 12582572043961347641*2^64 + 3986448536692513464*2^128 + 2265833967*2^192,16622595960699036472 + 12079116259432435275*2^64 + 14285722581172970519*2^128 + 11713007811*2^192,16834665211483058944 + 7387198150513823453*2^64 + 16745387773971377389*2^128 + 13275600552*2^192;\
393472332070424690 + 5765808601689603095*2^64 + 16669283149705865977*2^128 + 4729431898*2^192,12305249320049082972 + 15185770629263965177*2^64 + 16347239148697445161*2^128 + 5520478638*2^192,3296496395489506776 + 17118726833087765449*2^64 + 7720224459377481625*2^128 + 8258571535*2^192,17351856882663776536 + 9124298214122597920*2^64 + 15525659131149165583*2^128 + 3243720937*2^192,1445178001610785740 + 10701816148910308272*2^64 + 3864415915460706664*2^128 + 2024528746*2^192,6921389314340800276 + 9904387893219053956*2^64 + 2187567087487240607*2^128 + 4974711021*2^192,13314054211784257052 + 1238710626945727436*2^64 + 16976328897388812972*2^128 + 1881020740*2^192,8202953954726337856 + 5472518924990868260*2^64 + 5728788449001102363*2^128 + 7615201522*2^192;\
12863201265597069633 + 17361034730377339790*2^64 + 8551132554419747649*2^128 + 5997435325*2^192,6549859210833849870 + 3236001308457454582*2^64 + 18015216028798903515*2^128 + 6847328047*2^192,97044609754338380 + 3307854752667703130*2^64 + 927733743955179546*2^128 + 16558525533*2^192,13394899428883742348 + 8068018195315295404*2^64 + 6013734189155897270*2^128 + 7074247685*2^192,529903245310031974 + 12013085435549938755*2^64 + 17805846567503141957*2^128 + 11460234331*2^192,7816216576584058218 + 12532093652853279931*2^64 + 10170042650095011678*2^128 + 13230720594*2^192,8307901509704185998 + 15489744272963613414*2^64 + 2905758692512703308*2^128 + 3363430549*2^192,922429251013135968 + 12998687870627237851*2^64 + 4268452905332060633*2^128 + 1479718444*2^192;\
18351661980232843722 + 6459273538648408931*2^64 + 14949731554504170571*2^128 + 4193870328*2^192,43302201228409164 + 17154601570129898949*2^64 + 2984045048193575801*2^128 + 2866178717*2^192,2458733927172447032 + 13167999348389411042*2^64 + 10244424543265095914*2^128 + 8150074486*2^192,15907739192934858552 + 16429492197445712747*2^64 + 6566186329138708874*2^128 + 15026429089*2^192,8392001450425324988 + 16778050748957274594*2^64 + 9020126448239498787*2^128 + 3893873176*2^192,16810211262341693604 + 16819765744446370698*2^64 + 17079763803749732820*2^128 + 9381427075*2^192,10569152990082995660 + 6149085538393628985*2^64 + 1405914091162634261*2^128 + 6706860200*2^192,2778004094634289920 + 18180984532153417871*2^64 + 3844640240041870885*2^128 + 12163349619*2^192;\
17748340881741238103 + 2852174780932732636*2^64 + 14493945200079307386*2^128 + 15262434857*2^192,6901381860469991106 + 10555094922653179893*2^64 + 15511405569166827634*2^128 + 16330365259*2^192,1278563281063945172 + 16763830421223468915*2^64 + 2662531928087095927*2^128 + 3034330943*2^192,14394071489981458788 + 17086135021774780688*2^64 + 9565280180676747030*2^128 + 4317078524*2^192,6643199086149105754 + 14175890635687965521*2^64 + 8949957220684134526*2^128 + 2482971458*2^192,7408539455364148630 + 16115215974165377237*2^64 + 17205777623425900364*2^128 + 3024022265*2^192,16530918162311601970 + 16086413888294381533*2^64 + 16069129740738477186*2^128 + 6712506869*2^192,18167039107783862688 + 13288384583618397627*2^64 + 1268293490180043889*2^128 + 2040290104*2^192;\
10664420013598895900 + 3926641602385273453*2^64 + 2954253746882041505*2^128 + 228519501*2^192,652542013833749800 + 2601681728604230805*2^64 + 10760636417475591380*2^128 + 16528016651*2^192,4051618711429049904 + 6866745723402702407*2^64 + 3791467942785409560*2^128 + 16631770314*2^192,483166400959429440 + 9085893917277989717*2^64 + 17750322079161799736*2^128 + 15548823766*2^192,8840412616680604024 + 55524316193338419*2^64 + 2135522507468082765*2^128 + 15481975076*2^192,15870026242511705096 + 9788718066535098583*2^64 + 13380397858313771175*2^128 + 15662926706*2^192,7129522704765156600 + 8134375291008525469*2^64 + 15360256226499567663*2^128 + 3212493800*2^192,5663855484583297856 + 11317357519749223174*2^64 + 2193766336513125850*2^128 + 3908865982*2^192;\
14627357271343430267 + 12842498630780222315*2^64 + 8315816599934395567*2^128 + 2548623404*2^192,3386267109411804954 + 5492650777399001485*2^64 + 15542069198242117318*2^128 + 9999176336*2^192,15889042498082154980 + 5670142215795120857*2^64 + 17556058638477839642*2^128 + 13691278727*2^192,2390063133649145156 + 10030440725212688753*2^64 + 8934310375726700290*2^128 + 4272423024*2^192,10482860845365542882 + 13769876444989566347*2^64 + 9220618169328209576*2^128 + 8822221910*2^192,3378474072602909326 + 10970670879053664598*2^64 + 1568190739936793572*2^128 + 1920507577*2^192,13611159964117091322 + 12900833057271514142*2^64 + 6219342203992766876*2^128 + 6758241637*2^192,12238180572767767072 + 3373127481638529008*2^64 + 10318407109486656356*2^128 + 2549814445*2^192;\
7989007125837651623 + 17376003584487509848*2^64 + 525066652643726213*2^128 + 3667790808*2^192,14053269742762697506 + 15378276402393535889*2^64 + 15138487883111769245*2^128 + 16822884173*2^192,12669419378595575444 + 3079558057298517407*2^64 + 16292292552017713419*2^128 + 15715038985*2^192,5467846571614296164 + 6343357637604860770*2^64 + 1303287792188414842*2^128 + 16111820393*2^192,13422140376023557946 + 14921162114479846351*2^64 + 754536526220850681*2^128 + 14613412163*2^192,2463524459751835830 + 14056279982584355452*2^64 + 9263321970256348017*2^128 + 14101825332*2^192,16635730956628478930 + 7988037175227912930*2^64 + 7296346577899782013*2^128 + 3587346080*2^192,12974333608762514656 + 6482296996783509527*2^64 + 4872823598661006570*2^128 + 3021634522*2^192]
/* 
This matrix times 2^(-4) should be the matrix of frobenius.
*/ 
B = 2^(-4) * A; 
/* Freed 5131 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 27
