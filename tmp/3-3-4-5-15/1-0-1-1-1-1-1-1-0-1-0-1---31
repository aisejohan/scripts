/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 52
[2, 0, 1, 0, 0]  	10	4 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 0, 0, 3, 0]  	18	4 
[1, 2, 0, 2, 0]  	19	6 
[1, 1, 2, 1, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	5 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 6, 1, 0, 0]  	22	4 
[0, 3, 2, 1, 0]  	22	4 
[0, 5, 2, 0, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 4, 3, 0, 0]  	24	5 
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	5 
[1, 1, 0, 2, 1]  	16	6 
[0, 5, 1, 0, 1]  	19	5 
[0, 4, 2, 0, 1]  	20	4 
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[1, 2, 2, 0, 2]  	17	6 
[1, 5, 0, 0, 2]  	18	7 
[1, 0, 1, 2, 254]  	17	5 
[1, 2, 1, 1, 254]  	18	5 
[2, 2, 0, 0, 255]  	12	2 
[1, 0, 2, 1, 255]  	16	3 
[0, 2, 2, 1, 255]  	19	1 
[0, 1, 3, 1, 255]  	20	3 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[1975013962487476310 + 8760399320893989149*2^64 + 3467936796192082783*2^128 + 36554083*2^192,10637089000022247592 + 9885150293406039082*2^64 + 14462188993692436966*2^128 + 170254373*2^192,15307920883177026808 + 7063072398240953860*2^64 + 90640686751615755*2^128 + 242210641*2^192,1281665997387665548 + 591442235725084705*2^64 + 5540574190916442599*2^128 + 217965421*2^192,9016736512479111208 + 7550026468747857890*2^64 + 3905582488442560133*2^128 + 398609635*2^192,17686590017740977648 + 7084707751702488189*2^64 + 13734973756101714409*2^128 + 487719135*2^192,12622871157422883682 + 8602356178961163057*2^64 + 8138573106835353509*2^128 + 27767475*2^192,14231335524314496172 + 4472981055982678524*2^64 + 2877537917631840941*2^128 + 216882288*2^192;\
3642970662790472699 + 10954216551891867506*2^64 + 12693987063464638708*2^128 + 991619120*2^192,4527552473310313412 + 3242546984495729282*2^64 + 16460785541670023424*2^128 + 553310178*2^192,16670619620930164866 + 2264268650410409806*2^64 + 7397611278587837287*2^128 + 772175010*2^192,17264861934945815158 + 3980907959035136858*2^64 + 16362541396168211532*2^128 + 513747136*2^192,17556416827861933390 + 10887917188369586859*2^64 + 1390711422086152397*2^128 + 1016413088*2^192,221751474405939972 + 8670565739504592251*2^64 + 5505164790353038884*2^128 + 678216019*2^192,15636924043060719533 + 3745103591122910284*2^64 + 16708220528756058638*2^128 + 1046054622*2^192,347708506868888942 + 7070739112589593331*2^64 + 744706727550394960*2^128 + 67031048*2^192;\
7636762193663941871 + 13621342942323941321*2^64 + 14653424649865454110*2^128 + 995200045*2^192,8934678549754688596 + 8128131442591766869*2^64 + 16467186617570937923*2^128 + 1645466*2^192,322529781763084258 + 5369415870435179656*2^64 + 18002739527403046249*2^128 + 679302995*2^192,9495601183425638882 + 11535705913081356965*2^64 + 1179570336981327283*2^128 + 403755752*2^192,7726098954860536292 + 10447645206547793078*2^64 + 10564603054348491519*2^128 + 797428644*2^192,5093315384325805248 + 16308992397830861322*2^64 + 14389784547149662987*2^128 + 617243893*2^192,8326774468304527605 + 16734417650219570035*2^64 + 657062686407209803*2^128 + 142194502*2^192,2891299629598156318 + 18107934622132593658*2^64 + 14488509582595190688*2^128 + 867931944*2^192;\
10935154517628358860 + 3628849777689799651*2^64 + 30766132483056370*2^128 + 600761896*2^192,12138437747891565820 + 1958676190230165390*2^64 + 6884710501153702359*2^128 + 604594059*2^192,12208374404606553702 + 4890223123043210583*2^64 + 8809470510113551914*2^128 + 607938817*2^192,4519947904764724116 + 4105710687023180202*2^64 + 13289342316074610801*2^128 + 818697737*2^192,7171332574195180364 + 6624274283676037657*2^64 + 7998758700602555329*2^128 + 687098345*2^192,6523912834098995468 + 11553308666034707634*2^64 + 4871758136149930137*2^128 + 509031675*2^192,8010699049570662351 + 4956738112148212258*2^64 + 8573275834596887137*2^128 + 735881102*2^192,15452997062787778986 + 12224003157647055391*2^64 + 1668848755007004469*2^128 + 1044241824*2^192;\
1272381652623340820 + 4672875468075438134*2^64 + 16236191136820910612*2^128 + 634838989*2^192,11376489493918215554 + 14209916762235064166*2^64 + 14746186553047071794*2^128 + 648332895*2^192,7185826293587824900 + 11494844087526673366*2^64 + 3814703527989465336*2^128 + 937134593*2^192,4656359680055157794 + 8062214943021571626*2^64 + 14709417225712147704*2^128 + 904342797*2^192,9302648695692935720 + 13638137994768176073*2^64 + 2283285589892828373*2^128 + 763060461*2^192,12990969007609697364 + 10221290240346543657*2^64 + 12592399722441831425*2^128 + 495691075*2^192,2331845932947939492 + 16620084428430618808*2^64 + 12326490979882492297*2^128 + 771532422*2^192,8705909645551557536 + 12149490239162430965*2^64 + 12624434376246151391*2^128 + 57678741*2^192;\
10935154517628358860 + 3628849777689799651*2^64 + 30766132483056370*2^128 + 72279592*2^192,12138437747891565820 + 1958676190230165390*2^64 + 6884710501153702359*2^128 + 730423179*2^192,12208374404606553702 + 4890223123043210583*2^64 + 8809470510113551914*2^128 + 586967297*2^192,1957272620118688658 + 12019692239480936403*2^64 + 298608526086890261*2^128 + 945621202*2^192,7171332574195180364 + 6624274283676037657*2^64 + 7998758700602555329*2^128 + 527714793*2^192,9086588118745030926 + 3639327113576951433*2^64 + 17862491926137650677*2^128 + 289833522*2^192,8010699049570662351 + 4956738112148212258*2^64 + 8573275834596887137*2^128 + 484222862*2^192,15452997062787778986 + 12224003157647055391*2^64 + 1668848755007004469*2^128 + 62774688*2^192;\
4877890913971797583 + 6486442508824150531*2^64 + 12714010056531788866*2^128 + 561194220*2^192,12562426198321269470 + 8274958062575370957*2^64 + 8270367161640255354*2^128 + 206299610*2^192,17259011778602014484 + 6820738294123528854*2^64 + 288823549392037100*2^128 + 823321158*2^192,5147104052080415546 + 10551664102688716280*2^64 + 6682384701668867128*2^128 + 601034229*2^192,923709355181726882 + 428603137209575861*2^64 + 13148201988462435102*2^128 + 556682136*2^192,12883824808773031208 + 405453254553470915*2^64 + 18335539014511876180*2^128 + 946859835*2^192,18023012333789119249 + 12927537668669621458*2^64 + 14117426042183637069*2^128 + 816794109*2^192,93690802499616522 + 5705642679113350866*2^64 + 15725437980787770833*2^128 + 834269091*2^192;\
4851813154176464261 + 10552059282659354600*2^64 + 18096326669517801864*2^128 + 375082249*2^192,17033529572838087380 + 3400515273052608021*2^64 + 6489493304364461565*2^128 + 922276356*2^192,11365331334249709746 + 11722485277789897800*2^64 + 5367251985039262730*2^128 + 314392958*2^192,5212153076668581774 + 7670384626592270163*2^64 + 11905496980501678668*2^128 + 664964883*2^192,14355193272416824408 + 15467786626743407895*2^64 + 13922705190123727640*2^128 + 597372938*2^192,9773808823890090580 + 17269750757641664634*2^64 + 13137031152964158535*2^128 + 665840991*2^192,13743106084396957213 + 3761767889461590401*2^64 + 14100160896275586185*2^128 + 967516732*2^192,7982827275685845546 + 9514290344093647787*2^64 + 7124153715038982975*2^128 + 306478128*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 5246 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 4*x^6 + 16*x^4 - 64*x^2 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + x^3 - 2*x^2 + 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 29

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
