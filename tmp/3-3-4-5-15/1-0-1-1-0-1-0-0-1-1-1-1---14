/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[0, 2, 1, 0, 0]  	10	2 
[0, 2, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[0, 1, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	4 
[2, 1, 0, 2, 0]  	19	4 
[3, 1, 2, 0, 0]  	20	4 
[2, 0, 1, 2, 0]  	20	4 
[0, 0, 5, 0, 0]  	20	2  <--- 3
[3, 0, 3, 0, 0]  	21	6 
[2, 0, 0, 3, 0]  	21	5 
[2, 1, 2, 1, 0]  	22	3 
[2, 0, 4, 0, 0]  	22	3 
[2, 0, 3, 1, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 0, 0, 5, 0]  	28	1 
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 11, 0, 0, 0]  	33	1  <--- 2
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[2, 1, 1, 1, 1]  	18	6 
[1, 1, 2, 2, 1]  	24	4 
[1, 0, 1, 4, 1]  	27	3 
[1, 0, 3, 3, 1]  	30	3 
[0, 10, 0, 0, 1]  	30	2 
[1, 0, 3, 2, 2]  	25	2 
[1, 0, 2, 3, 2]  	26	2 
[0, 0, 0, 5, 254]  	25	1 
[0, 0, 4, 2, 254]  	26	1 
[2, 2, 0, 0, 255]  	12	3 
[2, 0, 0, 2, 255]  	16	3 
[2, 1, 2, 0, 255]  	17	3 
[2, 0, 3, 0, 255]  	18	2 
[0, 7, 0, 0, 255]  	21	3 
------
The gap is between 3 and 253.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[17365455036149064010 + 5660342257248393853*2^64 + 8878868234925930991*2^128 + 721930622*2^192,2494394013298257276 + 12215318746924608516*2^64 + 5749132777144507205*2^128 + 3180303548*2^192,658582972946693724 + 7067362672279460297*2^64 + 7006384295277806680*2^128 + 3596868668*2^192,16474854014126393816 + 5799978976660231010*2^64 + 2789203653791938064*2^128 + 2767709038*2^192,12246871593048427132 + 14898279891416645199*2^64 + 10172897482926142365*2^128 + 3852952603*2^192,1494504876784642896 + 1585645875011830804*2^64 + 8468577933103872977*2^128 + 951249795*2^192,6510076690093237108 + 3871271790918386278*2^64 + 16525652966784384875*2^128 + 2236954064*2^192,13588566294286773824 + 9230211704569877390*2^64 + 4248348375400739876*2^128 + 2106211769*2^192;\
7960656946055100713 + 12416963049372889098*2^64 + 453932776401152561*2^128 + 1094339874*2^192,11050677783452099126 + 10097362543104361738*2^64 + 1871726270336878264*2^128 + 458389546*2^192,10017863051846397918 + 96936153583382108*2^64 + 13816878752762246097*2^128 + 1075552361*2^192,11870734486446313692 + 14211854977677228025*2^64 + 3317178700619067827*2^128 + 718972425*2^192,12892122841444236486 + 5500912615721409612*2^64 + 14092105624566125009*2^128 + 267733335*2^192,193626165688308584 + 18316361775083794358*2^64 + 8852058543745759338*2^128 + 986388841*2^192,2336914249736074362 + 15339046008935294722*2^64 + 4024109649738498094*2^128 + 109690771*2^192,6307850186455096352 + 13479706904446030067*2^64 + 12082674269718870691*2^128 + 1650764349*2^192;\
4318064982696392650 + 8872248307986369659*2^64 + 8710044576966542803*2^128 + 2372879286*2^192,15443310848038233876 + 216941334284716005*2^64 + 1068411170752764971*2^128 + 362060663*2^192,15252132083055541732 + 7060346381759024829*2^64 + 17003811432227479245*2^128 + 3091712412*2^192,598961338124725928 + 12009913777830633734*2^64 + 15740814644093898081*2^128 + 812575462*2^192,7268681919473018380 + 12590454543722436689*2^64 + 1029017416226206253*2^128 + 1373030077*2^192,8953335932648478216 + 6315988730672025370*2^64 + 16708800061117876046*2^128 + 627380798*2^192,14756137705225509932 + 10736369468563706428*2^64 + 4714711225363057945*2^128 + 1245732468*2^192,17475911337292022896 + 13470892481827650500*2^64 + 15263121187553860115*2^128 + 984201031*2^192;\
8678704556621121836 + 11564471536457405875*2^64 + 978095829386118074*2^128 + 2890748548*2^192,15479561576789854792 + 6743456753903926533*2^64 + 3469389351204076740*2^128 + 2749696370*2^192,17203669170936894264 + 7233126679323952368*2^64 + 16270852015297665772*2^128 + 2722714120*2^192,1002480773028544384 + 16585570144714756158*2^64 + 3129568659934512563*2^128 + 788735184*2^192,14321086984003233752 + 4138141179940763630*2^64 + 10746163995012254884*2^128 + 1719933524*2^192,2938010487259512704 + 9788617196396201025*2^64 + 11402213571099435207*2^128 + 3627145130*2^192,15817490122073361720 + 13228773193241291266*2^64 + 11169150050754576828*2^128 + 788658130*2^192,8942510122565261648 + 12431114184206059821*2^64 + 11944855965500052425*2^128 + 2192006702*2^192;\
2092474970555892118 + 7788702647027207824*2^64 + 14671792659849491997*2^128 + 1056118160*2^192,14660520500380608772 + 12145966498397796771*2^64 + 7075282935679238321*2^128 + 3022760407*2^192,6343496441152727484 + 12386104878004871622*2^64 + 6848859543338685872*2^128 + 3070632130*2^192,4004202092673977520 + 832261787309166837*2^64 + 15196325403536330268*2^128 + 3607283024*2^192,8510906821704643932 + 14259797261381286945*2^64 + 16343269444907100264*2^128 + 2787747049*2^192,4480078334821471440 + 12829159554738968949*2^64 + 15039258469600281299*2^128 + 2827587641*2^192,10790057680382557540 + 9634104242656765371*2^64 + 9735917824375260723*2^128 + 1885470331*2^192,976165759199328752 + 11535458494934322223*2^64 + 3472818958053858558*2^128 + 4129909424*2^192;\
5385674760954965717 + 12842124480976368089*2^64 + 14283524712624681136*2^128 + 2665373091*2^192,8449038835087281174 + 2266222447009012568*2^64 + 13678562050107907527*2^128 + 31260589*2^192,8581160541442163494 + 539660536983825811*2^64 + 2798978508475721499*2^128 + 2405043223*2^192,18309112052721793612 + 11082444627855631753*2^64 + 7830027441437780827*2^128 + 3304731165*2^192,10797226466914556374 + 18440079541527567277*2^64 + 17344250026872387298*2^128 + 1359359108*2^192,273679644926499616 + 3870755736848976620*2^64 + 1524136036990949703*2^128 + 2691812871*2^192,17375033636167284698 + 6341359684180964752*2^64 + 4818276430246783552*2^128 + 604559196*2^192,5152800863137987232 + 10275797380415844900*2^64 + 89906329040109831*2^128 + 298430890*2^192;\
597339790316352232 + 2376990695600812206*2^64 + 14564285755390345981*2^128 + 2635394979*2^192,5276625840630686960 + 8306741313944103368*2^64 + 16961290347735813241*2^128 + 4001255964*2^192,14427801792377682968 + 16214930348006410122*2^64 + 2939749452612592933*2^128 + 3994121226*2^192,12233096559314645040 + 1315459303002769857*2^64 + 1884579529482340714*2^128 + 2722195304*2^192,13066373453498059200 + 12374182788615825864*2^64 + 3054743758921400799*2^128 + 3208365744*2^192,5793019183259113360 + 7540546311574876388*2^64 + 8642006322586227150*2^128 + 1003889512*2^192,2550932508169112664 + 6495885447585514438*2^64 + 9204183685426961707*2^128 + 830273126*2^192,13624512644010864416 + 3679531458987370303*2^64 + 12048256072935057076*2^128 + 267770056*2^192;\
3810468961726479994 + 765964401359705182*2^64 + 6859631799728510430*2^128 + 2917139776*2^192,15047914739117779612 + 17651582758403391106*2^64 + 9737957640482410063*2^128 + 523219300*2^192,5002382047442166332 + 6058025088776750076*2^64 + 13701478391064306174*2^128 + 1861472958*2^192,18369119603417277368 + 2192441884530328238*2^64 + 2337255050392047217*2^128 + 2922181827*2^192,1181319775693765716 + 2551549741251479833*2^64 + 84879317248899882*2^128 + 3312216658*2^192,12956043238307837888 + 16491309337579265020*2^64 + 9364074893390243104*2^128 + 3930091394*2^192,16346025888764300788 + 10759213841690857976*2^64 + 5632132959440799234*2^128 + 3754967759*2^192,8348693175749796432 + 11331102426760107337*2^64 + 12055347117160848663*2^128 + 301485216*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4075 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 - 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 - 2*x + 4, 1; x^6 - 2*x^4 - 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 31
