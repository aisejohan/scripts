/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 54
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 0, 3, 0, 0]  	15	2 
[1, 2, 2, 0, 0]  	17	5 
[1, 5, 0, 0, 0]  	18	7 
[1, 0, 0, 3, 0]  	18	3 
[1, 4, 1, 0, 0]  	19	5 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[3, 4, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	5 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	5 
[0, 3, 1, 2, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 4, 3, 0, 0]  	24	5 
[0, 4, 2, 1, 0]  	25	2 
[0, 3, 4, 0, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	4 
[1, 3, 1, 0, 1]  	16	5 
[1, 3, 0, 1, 1]  	17	6 
[1, 1, 1, 2, 1]  	20	5 
[0, 2, 1, 2, 1]  	20	4 
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[3, 1, 0, 0, 2]  	12	5 
[0, 4, 2, 0, 2]  	20	5 
[1, 1, 0, 2, 3]  	16	5 
[0, 3, 0, 3, 3]  	24	5 
[0, 3, 2, 1, 4]  	22	4 
[0, 2, 4, 0, 252]  	22	3 
[1, 0, 2, 1, 253]  	16	4 
[0, 1, 3, 1, 254]  	20	3 
[0, 0, 5, 0, 254]  	20	2 
[1, 3, 0, 0, 255]  	12	4 
[0, 4, 0, 0, 255]  	12	2 
[1, 1, 1, 1, 255]  	15	4 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 5 and 251.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[9523488777599417208 + 3028555621569127370*2^64 + 17412245121691289708*2^128 + 7218210717*2^192,2718674097260418864 + 10298972774018095284*2^64 + 14525400614490370297*2^128 + 2673553329*2^192,4704363194574694016 + 12842490552117592054*2^64 + 12705754532085918433*2^128 + 8308629374*2^192,7061195654297496576 + 15857781203699319270*2^64 + 4078180500411109853*2^128 + 4132352846*2^192,4108697865808137456 + 5576885103433216309*2^64 + 15626235624097719442*2^128 + 2806726910*2^192,4033789632262286816 + 9826080431773454806*2^64 + 7294783052448810197*2^128 + 2241174373*2^192,11204599035474721392 + 9612660602623408142*2^64 + 1316462749599876834*2^128 + 5821624560*2^192,16464982121745299136 + 14252463100966442614*2^64 + 6720141227805382106*2^128 + 3517146337*2^192;\
10980738526070672182 + 6495119558880656725*2^64 + 11593096544839865199*2^128 + 6407853173*2^192,4192683651400637260 + 15277018384276737688*2^64 + 15605071948150420323*2^128 + 7713755112*2^192,10890296716507050720 + 2834831252747190359*2^64 + 5671332258879329572*2^128 + 8046054288*2^192,9267576937270896504 + 10829339162819831663*2^64 + 16773382860383163758*2^128 + 446446919*2^192,1011933508609640260 + 17078211244238471035*2^64 + 4324568241281192220*2^128 + 5703400398*2^192,7236748459096585376 + 5616384436166368515*2^64 + 1529806774353068779*2^128 + 1756161518*2^192,12213754918556351212 + 6341083297764981875*2^64 + 15591804971473154188*2^128 + 7181811739*2^192,2288068618343378160 + 1683066783202711549*2^64 + 10572428048277947758*2^128 + 668197789*2^192;\
9619193957510832478 + 2202704176717334642*2^64 + 15777308938646462445*2^128 + 579669627*2^192,14173325025739792684 + 4739356333000108919*2^64 + 11721652358786630936*2^128 + 8018865814*2^192,9062021462885468216 + 2644691753761025657*2^64 + 5818089491788050823*2^128 + 1595910017*2^192,13214124956302245456 + 5370904860791976995*2^64 + 6382263602580907748*2^128 + 8585330004*2^192,12077606609488376188 + 17617996522732931270*2^64 + 4997010495869492519*2^128 + 3086100565*2^192,25044244294804120 + 15835713161881457183*2^64 + 12164825676512046276*2^128 + 7010387138*2^192,10342372235037378540 + 1065000445529259018*2^64 + 16278115796885274137*2^128 + 809683864*2^192,18250582197224987488 + 3353702665855962971*2^64 + 2022525492391631371*2^128 + 373784228*2^192;\
12010817222584963531 + 3835726312924898515*2^64 + 14852113730300384529*2^128 + 1082206124*2^192,136960027758396942 + 9699252697932702294*2^64 + 17415421625164518899*2^128 + 2089830560*2^192,2370313017758430796 + 7086381331742135164*2^64 + 12106635503027892264*2^128 + 8503537734*2^192,3000002297568065144 + 16563828990705100474*2^64 + 3171290235426449183*2^128 + 3192554155*2^192,2589600786271378518 + 12253095854280673554*2^64 + 3890419046005092556*2^128 + 676245340*2^192,16929477936487268492 + 17470912730952365761*2^64 + 8544258659246897605*2^128 + 2114197142*2^192,17655140977326110142 + 14759516777810292919*2^64 + 5180464599223545335*2^128 + 1555331669*2^192,1055062818999020608 + 2781532930655694756*2^64 + 4794096628348699628*2^128 + 2988482035*2^192;\
4136306619029685016 + 14319238306816780349*2^64 + 10901618187027017253*2^128 + 6580194407*2^192,2292113821544038928 + 14777670041274734056*2^64 + 4991413910559878465*2^128 + 6520413123*2^192,1486288533699981152 + 1082311046062672261*2^64 + 5822273577969291144*2^128 + 2223340131*2^192,14237526637888246272 + 17674892073326739811*2^64 + 11312445726188295354*2^128 + 4139231806*2^192,4125281815360979664 + 7586690737387742389*2^64 + 12577027390056895746*2^128 + 7933791084*2^192,7836091987839921120 + 13435584498795550848*2^64 + 16043143343086941194*2^128 + 8477121011*2^192,822360009056270640 + 13006186792159250611*2^64 + 7703857587562428581*2^128 + 2705491625*2^192,11285591619655019840 + 6215821892295637216*2^64 + 3290751608543720162*2^128 + 8238188296*2^192;\
12010817222584963531 + 3835726312924898515*2^64 + 14852113730300384529*2^128 + 2122393516*2^192,136960027758396942 + 9699252697932702294*2^64 + 17415421625164518899*2^128 + 4505749664*2^192,2370313017758430796 + 7086381331742135164*2^64 + 12106635503027892264*2^128 + 5282312262*2^192,945344094109333096 + 6088705115528943617*2^64 + 9925884357781994563*2^128 + 4375714029*2^192,2589600786271378518 + 12253095854280673554*2^64 + 3890419046005092556*2^128 + 4233015132*2^192,537392066236448924 + 9499292532418971003*2^64 + 1789664536891352226*2^128 + 6467518548*2^192,17655140977326110142 + 14759516777810292919*2^64 + 5180464599223545335*2^128 + 2092202581*2^192,1055062818999020608 + 2781532930655694756*2^64 + 4794096628348699628*2^128 + 3189808627*2^192;\
3296577012259412952 + 1881354495767874979*2^64 + 13209722976174364481*2^128 + 6555993249*2^192,17454412389705861392 + 16057727982890784957*2^64 + 6335392532348927595*2^128 + 535352847*2^192,2108557369798256120 + 7477945069126731206*2^64 + 13856943239202617476*2^128 + 4631469955*2^192,5464344076912964360 + 4024906620703316487*2^64 + 10847504866785009810*2^128 + 5282651616*2^192,380567108341692600 + 6842332889713477996*2^64 + 11666580592273906829*2^128 + 1447504105*2^192,13378750890096438440 + 8810461722721904651*2^64 + 5594903888411761287*2^128 + 2101165787*2^192,4289288776053464752 + 3813214557041842356*2^64 + 11674503227292595141*2^128 + 3844762958*2^192,14472390414767372304 + 16880612166527964243*2^64 + 11401039902176977341*2^128 + 7673114229*2^192;\
6207926386455006864 + 10976049814966897605*2^64 + 8588538313318814048*2^128 + 4578369826*2^192,3798340327719552992 + 14365334031446789250*2^64 + 2372916924875636703*2^128 + 4883683013*2^192,5167931674573467080 + 12094593301607272485*2^64 + 1664106286022088124*2^128 + 6265709918*2^192,4778731977307584296 + 566776892579482932*2^64 + 4876058254092799858*2^128 + 4108983805*2^192,5249997228367552680 + 13118643266567835544*2^64 + 17450230010586057970*2^128 + 7574349032*2^192,1989406951225027464 + 16229862446154248580*2^64 + 6896338374807424444*2^128 + 7540095997*2^192,4162893833250194848 + 13381842716728700916*2^64 + 1864426468052235222*2^128 + 6327179464*2^192,767028500307806320 + 15075426861893378764*2^64 + 11890271088225198411*2^128 + 3215375577*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4705 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 4*x^5 - 16*x^3 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + 2*x^3 + 2*x^2 + 8*x + 16, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 30

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
