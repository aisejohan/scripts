/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 41
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[2, 2, 0, 0, 0]  	12	4 
[2, 0, 0, 2, 0]  	16	4 
[1, 0, 1, 2, 0]  	17	3 
[1, 4, 0, 1, 0]  	20	5 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 2, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 0, 4, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 1, 1, 1, 1]  	18	6 
[1, 6, 0, 0, 1]  	21	6 
[0, 5, 0, 2, 1]  	25	2 
[0, 7, 0, 1, 1]  	26	3 
[0, 2, 0, 4, 1]  	26	2 
[0, 5, 0, 1, 2]  	20	4 
[1, 3, 0, 2, 2]  	22	4 
[0, 3, 0, 3, 2]  	24	4 
[1, 1, 0, 3, 254]  	21	4 
[0, 0, 4, 2, 254]  	26	1 
[1, 0, 0, 3, 255]  	18	4 
[0, 1, 3, 1, 255]  	20	2 
[0, 0, 5, 0, 255]  	20	1 
[0, 1, 1, 3, 255]  	22	2 
[0, 0, 3, 2, 255]  	22	1 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[15949578868637637550 + 17077493920138238699*2^64 + 3786776271136391100*2^128 + 633263782*2^192,3032361466059498584 + 15590544276713332719*2^64 + 1828354013882747458*2^128 + 836459413*2^192,127766743952643040 + 12938531382212758485*2^64 + 4603049962038953048*2^128 + 1304439017*2^192,7039207173663782828 + 13368554513745860796*2^64 + 13797283792172420264*2^128 + 483567129*2^192,11309427340585569524 + 9869870354792222185*2^64 + 12140355801226298969*2^128 + 674864015*2^192,5696092588888171304 + 4360817083612503144*2^64 + 26377274607917930*2^128 + 1775152729*2^192,18418037805778555412 + 52865257078700964*2^64 + 11403842435809132161*2^128 + 2089210300*2^192,17663076557748187792 + 5405745407764035896*2^64 + 3891087287748378188*2^128 + 950623872*2^192;\
18065054690815004019 + 975008942091955563*2^64 + 7183653048868085087*2^128 + 358903271*2^192,9690396694891805984 + 5850119477694893374*2^64 + 9407558778350528297*2^128 + 106153862*2^192,1603857155596452568 + 8953734955653570223*2^64 + 8029432070551705227*2^128 + 839114872*2^192,15869922591999303638 + 5643890268359983006*2^64 + 1499855545970285320*2^128 + 883747398*2^192,13400929512693259234 + 15700595177620823701*2^64 + 15400375474348509876*2^128 + 46766724*2^192,10805916082000218184 + 13721805644293480218*2^64 + 13116803487274040795*2^128 + 426333683*2^192,16839192408216528702 + 8379586452057937925*2^64 + 12666444993146153870*2^128 + 124967932*2^192,7954585021252686496 + 4493912011209213995*2^64 + 2049499292281209713*2^128 + 887825340*2^192;\
13295688462001379357 + 9130950448652835249*2^64 + 1935790741850155867*2^128 + 616827935*2^192,7859968695760383404 + 103151567804785901*2^64 + 9197002135282314688*2^128 + 1265978806*2^192,7709875082173540256 + 7155539402495667009*2^64 + 73384341352579627*2^128 + 1321521512*2^192,15501244052639932790 + 1420174914011068979*2^64 + 904230517911602558*2^128 + 335563507*2^192,11574081722866860218 + 17383833551511973097*2^64 + 5097621550926030309*2^128 + 2053602494*2^192,8715099387347950252 + 1471988332658996252*2^64 + 6932988320934385570*2^128 + 667092353*2^192,1996715090676575586 + 13129400125557086557*2^64 + 12041167640388113706*2^128 + 2141726335*2^192,1846111077108787856 + 10779675529120522139*2^64 + 12846271734202512613*2^128 + 304890354*2^192;\
2028848750024008450 + 9883032838470524548*2^64 + 11917845243599320536*2^128 + 914145006*2^192,16037190287642800272 + 1793063083987636547*2^64 + 7629687308583929500*2^128 + 1587544804*2^192,5006281038344090984 + 13305056532505929343*2^64 + 17595703766070529292*2^128 + 1867301471*2^192,12867614444994905092 + 15344284068978841989*2^64 + 9683634282070397229*2^128 + 231723660*2^192,9567166217559043620 + 3038278775591154205*2^64 + 5090992700096671445*2^128 + 1846144482*2^192,12936929317645304048 + 11366283649037511208*2^64 + 13842293031196489329*2^128 + 853047955*2^192,1096301415503387468 + 2125211427058854835*2^64 + 17302006090815927536*2^128 + 834671272*2^192,5232540575151052424 + 16177914988520309670*2^64 + 13856726381796010790*2^128 + 340641769*2^192;\
8298250909625807393 + 16092888648472642379*2^64 + 14532224705669789688*2^128 + 199811006*2^192,2909031551826862656 + 7755842675872993771*2^64 + 10699745594045617188*2^128 + 972010853*2^192,7083093159436714836 + 2392175792141880108*2^64 + 15453587724091464556*2^128 + 1940814748*2^192,7607415736280389970 + 9175802296172451441*2^64 + 472737853522706029*2^128 + 1230155469*2^192,10882967479132749218 + 16609463436414038690*2^64 + 1152822539540009956*2^128 + 1283629843*2^192,7454997985249575176 + 13493208596852643442*2^64 + 9518356692517033310*2^128 + 1014180902*2^192,3654008916058417130 + 7710550540242396467*2^64 + 13325014282401188457*2^128 + 1789702252*2^192,4344697371680431848 + 6298718164044953296*2^64 + 12023094109019809235*2^128 + 2065812378*2^192;\
5749118397523824768 + 16216990337346078189*2^64 + 8354467412696547275*2^128 + 874410371*2^192,15317525137218742740 + 691675782376660354*2^64 + 14790672015626993907*2^128 + 1366910586*2^192,17756544276064595296 + 5934222261247111494*2^64 + 6219022768330537107*2^128 + 1552515363*2^192,7700266599593992384 + 10001420667236850485*2^64 + 6242448441240175167*2^128 + 1948738331*2^192,15703414769291314372 + 7738732407566513875*2^64 + 7636079008666886615*2^128 + 181606112*2^192,10037119760928426824 + 16689989131083913204*2^64 + 3352750714050525074*2^128 + 613351831*2^192,2007477469331082468 + 10451947779456138058*2^64 + 2171015919626766075*2^128 + 30819570*2^192,40959107643447104 + 5986696462542276691*2^64 + 7329535784721124798*2^128 + 808791909*2^192;\
11967688729223579844 + 6496233105116920323*2^64 + 11416461379163727730*2^128 + 1952959021*2^192,1846867710519974668 + 7635716612298163268*2^64 + 5944700425466449328*2^128 + 982536815*2^192,14780813582617966636 + 1768347678794175963*2^64 + 17082773335932816859*2^128 + 453088157*2^192,15888167593650694356 + 11269610091184482385*2^64 + 10351506180422648452*2^128 + 1084821881*2^192,13760137146845831672 + 1694782225179139257*2^64 + 7633831279653768586*2^128 + 567082026*2^192,2030942408262665780 + 5082212700013779921*2^64 + 14439697252945378699*2^128 + 189019828*2^192,11482563576531330732 + 10953101364231657077*2^64 + 2305934279379514507*2^128 + 1800118501*2^192,5078359407457509128 + 15282270767904942692*2^64 + 15910964813847560399*2^128 + 817162777*2^192;\
5963205379574526102 + 12529595597983836002*2^64 + 13000348441708481984*2^128 + 1392807552*2^192,16287394927162993476 + 11748175195841645049*2^64 + 13856503291304856726*2^128 + 2107997391*2^192,13880854344777473940 + 7977032702671209600*2^64 + 12260483271554126150*2^128 + 407617174*2^192,16996825717388565892 + 5800562341275467600*2^64 + 497463845841855474*2^128 + 1183582585*2^192,5139911282981897260 + 16028915886540508563*2^64 + 7656382772931043507*2^128 + 1857031129*2^192,16048146417325586188 + 4809215475441642272*2^64 + 7870875205583846565*2^128 + 1241037373*2^192,10513038884096128256 + 12846367994073992279*2^64 + 1372791732911718680*2^128 + 2004196636*2^192,16653048929967606776 + 13006680641589806575*2^64 + 2814871249469497311*2^128 + 77721288*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5086 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 35
