/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 57
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[3, 2, 0, 0, 0]  	15	3 
[2, 3, 0, 0, 0]  	15	4 
[0, 1, 3, 0, 0]  	15	2 
[1, 4, 1, 0, 0]  	19	4 
[1, 2, 0, 2, 0]  	19	3 
[0, 5, 1, 0, 0]  	19	3 
[1, 4, 0, 1, 0]  	20	4 
[1, 3, 2, 0, 0]  	20	3 
[0, 5, 0, 1, 0]  	20	3 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 5, 0, 0]  	23	4 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[1, 1, 1, 3, 0]  	25	3 
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	3 
[0, 4, 1, 2, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 1, 0, 2, 1]  	16	4 
[1, 0, 2, 1, 1]  	16	5 
[1, 2, 2, 0, 1]  	17	4 
[1, 0, 1, 2, 1]  	17	5 
[0, 4, 2, 0, 1]  	20	4 
[0, 4, 0, 2, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	4 
[0, 3, 0, 3, 1]  	24	4 
[3, 1, 0, 0, 2]  	12	3 
[1, 5, 0, 0, 2]  	18	4 
[0, 3, 1, 2, 4]  	23	3 
[1, 3, 1, 1, 5]  	21	6 
[0, 7, 0, 0, 251]  	21	5 
[0, 1, 0, 4, 251]  	23	2 
[2, 2, 0, 0, 254]  	12	2 
[0, 0, 5, 0, 254]  	20	2 
[0, 1, 1, 3, 254]  	22	2 
[0, 4, 1, 0, 255]  	16	3 
[0, 2, 0, 2, 255]  	16	1 
[0, 4, 0, 1, 255]  	17	3 
[0, 3, 2, 0, 255]  	17	1 
[1, 0, 0, 3, 255]  	18	3 
[0, 6, 0, 0, 255]  	18	2 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 6 and 250.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[6303548299789776786 + 17453741852383919534*2^64 + 14919501795102043048*2^128 + 150827661*2^192,12414363060761162376 + 8323976290540486517*2^64 + 9201638433210245449*2^128 + 1434895317*2^192,11289744612939142632 + 3924326471006791574*2^64 + 1100601859722609416*2^128 + 1997857786*2^192,9543512370215702060 + 12131672649082277973*2^64 + 16285645617974139768*2^128 + 1934189643*2^192,12460355255142182260 + 7602628235582168204*2^64 + 4878109127929776604*2^128 + 41814490*2^192,9933359711717711512 + 717200704702582653*2^64 + 13607479737840138427*2^128 + 1128815975*2^192,14344654668299733380 + 1398141711133370833*2^64 + 17243601936487387871*2^128 + 91815467*2^192,11209653556004375392 + 18244910295641401935*2^64 + 3042970968219061520*2^128 + 1173554817*2^192;\
10755853191918645522 + 2618619607441217624*2^64 + 7914794918094800637*2^128 + 462881013*2^192,3574068616617036496 + 12607922768096209631*2^64 + 1727056716958872870*2^128 + 527042352*2^192,8753243475032343448 + 16785029433432303490*2^64 + 16265583072772573899*2^128 + 766039624*2^192,10062769574776765392 + 12135988469038116119*2^64 + 7709408817227674335*2^128 + 836136008*2^192,3160798603545291700 + 10154321486981399624*2^64 + 9552818139663144193*2^128 + 664668396*2^192,12372052823465622020 + 1778971330843422439*2^64 + 13814464569513185315*2^128 + 359521648*2^192,17611768480765576156 + 7716528424777779750*2^64 + 11130883079181355942*2^128 + 650562427*2^192,17482315307914867072 + 4677329553993023449*2^64 + 16342421700377368591*2^128 + 729634387*2^192;\
9801512680526052392 + 18005558098228651493*2^64 + 436405005651717452*2^128 + 1034486474*2^192,11603524730167313912 + 10791393483811211979*2^64 + 15838278378513942162*2^128 + 669601367*2^192,12151093769495587552 + 13373034515308058799*2^64 + 5460248611067499991*2^128 + 247427814*2^192,3446829142324964736 + 11795199779672610659*2^64 + 16349486193736956540*2^128 + 632203898*2^192,7066329782232742864 + 786762704651788806*2^64 + 13255242128881925075*2^128 + 1046552493*2^192,2790391559374812128 + 2976699080025048411*2^64 + 1502807335446226842*2^128 + 1014733495*2^192,11217473208324611384 + 3631446312431548530*2^64 + 10632576722795413577*2^128 + 752907646*2^192,2219658709628485112 + 11249356849306675100*2^64 + 13508582320215905360*2^128 + 171717242*2^192;\
0 + 0*2^64 + 0*2^128 + 411041792*2^192,0 + 0*2^64 + 0*2^128 + 562036736*2^192,0 + 0*2^64 + 0*2^128 + 905969664*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 484350575*2^192,0 + 0*2^64 + 0*2^128 + 293601280*2^192,0 + 0*2^64 + 0*2^128 + 301989888*2^192,0 + 0*2^64 + 0*2^128 + 285212672*2^192,0 + 0*2^64 + 0*2^128 + 872415232*2^192;\
4800206526311642349 + 7257795111061559301*2^64 + 2414270721781348343*2^128 + 1962228595*2^192,1647878272809542164 + 10635407305793571836*2^64 + 3669594142383339605*2^128 + 1784520505*2^192,9723379746982114008 + 11752158977951082152*2^64 + 2315267022096795418*2^128 + 303383443*2^192,4012888010328567758 + 8172971315399336962*2^64 + 4332205107457542908*2^128 + 1686267013*2^192,6349686045379457558 + 13838308797677333501*2^64 + 14928806334549008623*2^128 + 1813553676*2^192,11881433069772405044 + 9369129551838034112*2^64 + 2185144569025455855*2^128 + 722064619*2^192,1669326897452465986 + 5656978202686155334*2^64 + 5470669372956212754*2^128 + 3467546*2^192,15719986956198312936 + 14227656959908715698*2^64 + 6851677403616721550*2^128 + 708610196*2^192;\
5889211546181896354 + 11109728138556925955*2^64 + 13461202115081357472*2^128 + 1013761038*2^192,14215563005551594404 + 5968607828710843459*2^64 + 3436524215051390708*2^128 + 657394706*2^192,3439888318531459496 + 17076785646368531950*2^64 + 6798851667342630186*2^128 + 627767887*2^192,13930391539166518256 + 5715725400534682944*2^64 + 2692283234359820327*2^128 + 904188071*2^192,16892004176859776556 + 6023359860074478414*2^64 + 7027170154915810458*2^128 + 607066206*2^192,15276309397522796044 + 2958267110564952764*2^64 + 350116953755073142*2^128 + 449250776*2^192,3683840048811129300 + 5059051613211007164*2^64 + 2409899341641593063*2^128 + 1034926993*2^192,18239408045597877872 + 3919521984059173418*2^64 + 18095519290647670630*2^128 + 67792660*2^192;\
10695345982562581412 + 2220397690887053473*2^64 + 5663706461653833029*2^128 + 1427294291*2^192,6396954585594690192 + 1199980152830441971*2^64 + 5021625364005295631*2^128 + 1625212901*2^192,3404522467130011964 + 2703067008950384139*2^64 + 12759388857869998888*2^128 + 207317332*2^192,2603757495124796604 + 13968731743274335395*2^64 + 11347580209913111144*2^128 + 938683182*2^192,14025719332738367168 + 285272992778833763*2^64 + 494605533630535716*2^128 + 973512422*2^192,9792432332365481480 + 6013409599423554227*2^64 + 5712801056440262979*2^128 + 1253703113*2^192,3688898975798091740 + 8256884745712650033*2^64 + 12945866198919401455*2^128 + 121279294*2^192,9521385704041893760 + 12572904008343981711*2^64 + 12167884577841162491*2^128 + 913370447*2^192;\
9098142566888941426 + 18210794689296830842*2^64 + 10314930306894657665*2^128 + 701343308*2^192,10879755376819730856 + 367827396253257165*2^64 + 7484371721474169322*2^128 + 684454104*2^192,11419373018534248080 + 16413266703220779600*2^64 + 2349909516827073839*2^128 + 1280656321*2^192,330384161984916648 + 4189441279945772325*2^64 + 8723510971311013223*2^128 + 636290894*2^192,2895634349216918340 + 9085114262340885784*2^64 + 1928704983808065752*2^128 + 2045763471*2^192,11422541904595518128 + 11457905138578417794*2^64 + 1440786293173659333*2^128 + 1887669363*2^192,4269424489484909312 + 16968884310664712312*2^64 + 2098581015568543822*2^128 + 287352102*2^192,6793555512186663616 + 6292594772307401622*2^64 + 13870443514496687757*2^128 + 821557202*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4233 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 2*x^7 - 2*x^6 + 4*x^5 - 16*x^3 + 32*x^2 + 128*x - 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 2*x^5 + 2*x^4 - 4*x^3 + 8*x^2 - 32*x + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 35

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*y^5 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
