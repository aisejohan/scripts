/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 44
[1, 1, 1, 0, 0]  	10	2 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[2, 0, 1, 1, 0]  	15	4 
[1, 0, 3, 0, 0]  	15	3 
[1, 5, 0, 0, 0]  	18	4 
[0, 2, 3, 0, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[0, 5, 0, 1, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	5 
[3, 4, 0, 0, 0]  	21	7 
[1, 0, 2, 2, 0]  	21	6 
[1, 0, 1, 3, 0]  	22	5 
[1, 0, 0, 4, 0]  	23	4 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 3, 0, 3, 0]  	24	5 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 4, 1, 2, 0]  	26	3 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 1, 2, 1]  	23	3 
[0, 2, 1, 3, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[2, 0, 0, 2, 2]  	16	5 
[3, 0, 2, 0, 2]  	17	5 
[0, 2, 0, 4, 2]  	26	2 
[0, 2, 1, 2, 3]  	20	4 
[1, 0, 1, 1, 254]  	12	3 
[0, 5, 0, 0, 254]  	15	3 
[0, 1, 3, 1, 254]  	20	3 
[0, 0, 4, 2, 254]  	26	1 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[9104585281803651688 + 9892400301198221885*2^64 + 17719199501696242765*2^128 + 2470332937*2^192,4584368186102881592 + 462852013413832484*2^64 + 8315041720775077093*2^128 + 3391267063*2^192,15783985412703071496 + 11721748422989940495*2^64 + 16166044383495251590*2^128 + 1863175071*2^192,15528059864582106384 + 16793329633925430242*2^64 + 12851604254032678007*2^128 + 2537248992*2^192,13963896681763904208 + 876346588159930557*2^64 + 3295490778350403841*2^128 + 3868296744*2^192,14098729770807273552 + 2692320035637507254*2^64 + 6978421198827563340*2^128 + 3522552280*2^192,10664967308253783392 + 1234394812951551739*2^64 + 17116640355091500729*2^128 + 4195533051*2^192,440557913543666576 + 278491638355334714*2^64 + 8989149102962036925*2^128 + 1378779234*2^192;\
16073675065066481584 + 1173965707531691129*2^64 + 4045254997480265431*2^128 + 2121789651*2^192,15587123637035148332 + 12925340804715879577*2^64 + 16523587282215865596*2^128 + 50327820*2^192,3525139039970551732 + 622934826819575054*2^64 + 5704994377625875743*2^128 + 2083469398*2^192,8871045848140994232 + 14527743733495405683*2^64 + 15923107203022493503*2^128 + 250173901*2^192,1486273838272260688 + 4687101837644708044*2^64 + 9025558718564925912*2^128 + 605514474*2^192,734828530427633912 + 139062126539997665*2^64 + 16890286403654780301*2^128 + 1167303336*2^192,5578170604051754856 + 2106015874642379823*2^64 + 7403953250403274306*2^128 + 165686971*2^192,9037600820213347176 + 15544794539803373251*2^64 + 15068873138451088584*2^128 + 1787312731*2^192;\
17520315474019469292 + 17415993482735916214*2^64 + 14054463266035743706*2^128 + 79650285*2^192,4681785470488020516 + 5819828103790862731*2^64 + 8960929434845315203*2^128 + 1330382457*2^192,8941312734291555260 + 12316135987744067417*2^64 + 6977294293723024325*2^128 + 1030889972*2^192,3725443385058619048 + 6484916492137454299*2^64 + 7535662295072842416*2^128 + 2666354066*2^192,14235589005258317968 + 240271162900059417*2^64 + 18199913019258977594*2^128 + 2108592218*2^192,15074354682758865288 + 14128624176001581621*2^64 + 897451530060451286*2^128 + 2448027402*2^192,5803142665510913848 + 4858913825821636273*2^64 + 622783720758102676*2^128 + 2827235400*2^192,8574478794461200744 + 777043439186412333*2^64 + 12427526969434824341*2^128 + 587292895*2^192;\
10066375054689419948 + 1897731290056003154*2^64 + 11113089391613810792*2^128 + 1611353237*2^192,6744194951917342469 + 17248249206331120633*2^64 + 3882543494897399699*2^128 + 297768436*2^192,12017864933808382553 + 12493203464663160991*2^64 + 100498650965533690*2^128 + 2758128882*2^192,16851644024565939234 + 54791228055859418*2^64 + 5907635963281155912*2^128 + 1727005714*2^192,13613539803711479708 + 12150458072988192442*2^64 + 21221099356872763*2^128 + 430160170*2^192,10931672449027788284 + 2653219765991375882*2^64 + 8280355835423239390*2^128 + 2435195907*2^192,11653898733060610718 + 12459897182409280844*2^64 + 725375972609005068*2^128 + 3583992135*2^192,17393323025594749310 + 17135100655014719335*2^64 + 1266733465257392976*2^128 + 1595345637*2^192;\
5048132043349568560 + 14513322463107753629*2^64 + 16286382544282735313*2^128 + 1867694335*2^192,3951801079643862299 + 17104057873873360807*2^64 + 443032359946849618*2^128 + 240851458*2^192,8200341683634112351 + 17229461578472206127*2^64 + 4903699340016314659*2^128 + 1487306340*2^192,943522297495339150 + 10996134547937579818*2^64 + 14797265960012257994*2^128 + 509635702*2^192,11091057821959679076 + 14284814994971103632*2^64 + 1275944092921081860*2^128 + 1062966853*2^192,1802639092113810852 + 17713325609548292023*2^64 + 11489514809348540591*2^128 + 481531902*2^192,16592017761201959378 + 5926695742387803422*2^64 + 7711287382448924697*2^128 + 1481338720*2^192,593551973493960818 + 12656005889605913121*2^64 + 8174795819641743475*2^128 + 394413025*2^192;\
12682787283200524404 + 11589472135316196311*2^64 + 9709187411926611730*2^128 + 3236910600*2^192,699871260543084272 + 3580666951601194730*2^64 + 3610682337788262767*2^128 + 591888520*2^192,16213766789098135328 + 1930251597872069845*2^64 + 6151591388428722910*2^128 + 1047043544*2^192,4585774130475147776 + 14615224318378837188*2^64 + 1877888302889991601*2^128 + 1698372549*2^192,2566756556503142080 + 5816627814530298398*2^64 + 6152477878159507276*2^128 + 4002784572*2^192,7644299515055828056 + 6424430857627035860*2^64 + 5586696564681166279*2^128 + 29272903*2^192,2479448604236244320 + 2879490994088542012*2^64 + 15219532763567218391*2^128 + 3965159733*2^192,10494054443903836816 + 10238926400811959111*2^64 + 14776707389097925150*2^128 + 1459134747*2^192;\
7571563757936953028 + 16970018183225528935*2^64 + 9502163600890279980*2^128 + 2141574695*2^192,6506010990949771005 + 4486063590850261271*2^64 + 13303885465394390315*2^128 + 1993985558*2^192,16492642795115871025 + 5805386472328610281*2^64 + 10490432051129111415*2^128 + 199496604*2^192,13967641802187709466 + 1190383654206332657*2^64 + 7334687851425085268*2^128 + 2574206098*2^192,18293412369584390836 + 9088528914580686305*2^64 + 3648441515099819437*2^128 + 828563483*2^192,12848325262433499396 + 14400650893286980634*2^64 + 6566415002892968659*2^128 + 2711608405*2^192,5169154710187769278 + 8827184823960164449*2^64 + 16032101525275674629*2^128 + 3696585595*2^192,4692731847624261230 + 7040456264214893047*2^64 + 5691519945930107474*2^128 + 3898068497*2^192;\
14837658157764017312 + 4443817452720504525*2^64 + 7279237140120121787*2^128 + 1193564953*2^192,2966488854171000544 + 8314510838164953179*2^64 + 12350228500998423897*2^128 + 1917327557*2^192,3657015950332157136 + 9223459923147794394*2^64 + 3659944026060292284*2^128 + 564478560*2^192,2788861800198099328 + 13322590043395325708*2^64 + 1600017020107322422*2^128 + 865712672*2^192,17343180712106070528 + 12065248828738338234*2^64 + 16150793297333440602*2^128 + 218225451*2^192,10613192476846060880 + 14887021873264123183*2^64 + 6888694573343009304*2^128 + 1060389669*2^192,2836063740773646528 + 15377562158779980877*2^64 + 15827705678696461676*2^128 + 1821913883*2^192,14157078505438169872 + 12424305996539539141*2^64 + 18159213703846201923*2^128 + 907097426*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5219 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 - 2*x^6 - 4*x^5 + 8*x^4 - 16*x^3 - 32*x^2 + 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: Mat([x^8 + x^7 - 2*x^6 - 4*x^5 + 8*x^4 - 16*x^3 - 32*x^2 + 64*x + 256, 1])
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 26
