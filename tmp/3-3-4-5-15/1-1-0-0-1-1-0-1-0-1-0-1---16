/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 57
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 0, 3, 0, 0]  	15	2 
[2, 4, 0, 0, 0]  	18	7 
[1, 5, 0, 0, 0]  	18	7 
[1, 0, 0, 3, 0]  	18	3 
[1, 4, 1, 0, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 0, 2, 2, 0]  	21	7 
[0, 4, 0, 2, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 4, 0, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 2, 0, 2, 1]  	19	5 
[1, 3, 2, 0, 1]  	20	5 
[1, 1, 1, 2, 1]  	20	4 
[1, 3, 1, 1, 1]  	21	6 
[0, 3, 2, 1, 1]  	22	4 
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[3, 1, 0, 0, 2]  	12	6 
[2, 3, 0, 0, 2]  	15	5 
[1, 3, 1, 0, 2]  	16	5 
[1, 1, 0, 2, 2]  	16	6 
[1, 3, 0, 1, 2]  	17	5 
[1, 2, 2, 0, 2]  	17	6 
[0, 3, 0, 3, 2]  	24	4 
[0, 7, 0, 0, 4]  	21	6 
[0, 4, 1, 1, 251]  	21	5 
[1, 4, 0, 0, 254]  	15	4 
[1, 0, 2, 1, 254]  	16	3 
[0, 4, 1, 0, 254]  	16	3 
[1, 0, 1, 2, 254]  	17	5 
[0, 4, 0, 1, 254]  	17	3 
[0, 0, 5, 0, 254]  	20	2 
[0, 2, 4, 0, 254]  	22	2 
[1, 0, 1, 1, 255]  	12	4 
[0, 4, 0, 0, 255]  	12	2 
[0, 2, 2, 1, 255]  	19	1 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 5 and 250.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[14031327884719236240 + 14762406113235521671*2^64 + 2600121420118979508*2^128 + 1638021729*2^192,6744195217526401064 + 18412107611576155151*2^64 + 12780417582914377387*2^128 + 4129105791*2^192,98736940988705464 + 10187713513010962858*2^64 + 7152162916341006253*2^128 + 3909642669*2^192,12949327181400323328 + 17750624060752663491*2^64 + 11473941414733590184*2^128 + 654490620*2^192,11685943644471517736 + 13182647231116320893*2^64 + 16625640369373143483*2^128 + 3907834906*2^192,14564149836858775792 + 935302373524696330*2^64 + 14480049155617148017*2^128 + 3723392329*2^192,16221826246532018648 + 8212617165848790465*2^64 + 5483878287771700992*2^128 + 3209986781*2^192,9221029626951725520 + 8039526497036625681*2^64 + 14193468962176664423*2^128 + 290342140*2^192;\
1626965487816365524 + 1465912110216802001*2^64 + 9086404839290061778*2^128 + 2352654677*2^192,10046222312096160012 + 15540111992354712222*2^64 + 3972217924316129872*2^128 + 4286200374*2^192,16805356179561855646 + 5411716808177137288*2^64 + 4384811143262688518*2^128 + 1439051890*2^192,12736294710234754980 + 13386367274954761774*2^64 + 17005138041582235236*2^128 + 715560662*2^192,734460033938759648 + 8417485824667684150*2^64 + 11298781969445933782*2^128 + 3738611753*2^192,12042338992210081124 + 9704878850346554839*2^64 + 2911026231245324651*2^128 + 3125998505*2^192,10956751760298913724 + 13302572434655380265*2^64 + 3138508792597692579*2^128 + 3332990856*2^192,5080018553895973516 + 15985561894089728124*2^64 + 9738063599094279981*2^128 + 1633320942*2^192;\
13955779426894175704 + 12641425435526420248*2^64 + 12239380812613138502*2^128 + 3712695425*2^192,13344707504723415990 + 8133243155350171457*2^64 + 11450137470529409181*2^128 + 811106447*2^192,13844182999301842490 + 18255018249606069592*2^64 + 9643568727741600457*2^128 + 765050044*2^192,7631863161296791932 + 14173184785459971319*2^64 + 11880324203630911373*2^128 + 996082169*2^192,1702430922853723590 + 14239889552725452022*2^64 + 4588912316874439246*2^128 + 3920319124*2^192,17616869276323278360 + 9866017134989599340*2^64 + 9158564947811928965*2^128 + 4097036778*2^192,5591036798022326154 + 577978033461397814*2^64 + 3156113872938985517*2^128 + 4099450058*2^192,17784391797506683900 + 14169586080308366036*2^64 + 6398097675696639642*2^128 + 733976517*2^192;\
8039329083954922440 + 7461754798655541004*2^64 + 1662495254734473173*2^128 + 2012002999*2^192,8301384118923252431 + 13912470108097000691*2^64 + 6470553459019929900*2^128 + 442281381*2^192,3686034782363109275 + 15829404038185470357*2^64 + 3037394536173330345*2^128 + 61004265*2^192,17385912521415091970 + 670747469033577522*2^64 + 1144070929149008165*2^128 + 256791840*2^192,6530138723437250283 + 14022081826257815975*2^64 + 18252817261137712172*2^128 + 4212525902*2^192,6697236482921036728 + 17384573525875315717*2^64 + 3749817929361365749*2^128 + 4173373290*2^192,7325565489108692609 + 13845871361865770353*2^64 + 7572778182239812699*2^128 + 1116348098*2^192,18266084213455688754 + 2357295817263682252*2^64 + 4645669681149862636*2^128 + 326026953*2^192;\
10704680421877084044 + 6526641109680696222*2^64 + 12177472792808477602*2^128 + 4039596327*2^192,12840429941129636782 + 2029016612555590872*2^64 + 2687238802619761556*2^128 + 3634547652*2^192,3555086956461449122 + 5534841060796507581*2^64 + 15608680690764150091*2^128 + 359328231*2^192,9716256833637308172 + 3247530280880439604*2^64 + 6184817861088578602*2^128 + 2273567099*2^192,12673179798366862622 + 18015547148641647008*2^64 + 7499702575390295662*2^128 + 2746639161*2^192,14774400607547597832 + 11104967297104286017*2^64 + 12824468228604570006*2^128 + 2097074311*2^192,6931309721190386978 + 5418522080919951961*2^64 + 9603303921414346297*2^128 + 1041729490*2^192,144104247354440348 + 2435712780953193034*2^64 + 8890845001009576582*2^128 + 4163900555*2^192;\
8039329083954922440 + 7461754798655541004*2^64 + 1662495254734473173*2^128 + 233618103*2^192,8301384118923252431 + 13912470108097000691*2^64 + 6470553459019929900*2^128 + 408726949*2^192,3686034782363109275 + 15829404038185470357*2^64 + 3037394536173330345*2^128 + 1503844841*2^192,7135211382830950138 + 13879929605155050710*2^64 + 4521367990326780854*2^128 + 1066475585*2^192,6530138723437250283 + 14022081826257815975*2^64 + 18252817261137712172*2^128 + 1880492878*2^192,16947937621505178560 + 4175391389753842529*2^64 + 372520868183593060*2^128 + 1132319817*2^192,7325565489108692609 + 13845871361865770353*2^64 + 7572778182239812699*2^128 + 1468669634*2^192,18266084213455688754 + 2357295817263682252*2^64 + 4645669681149862636*2^128 + 1265551049*2^192;\
11516170793640942556 + 4700299198157731534*2^64 + 13751078276873868572*2^128 + 3549829319*2^192,12893856084978339420 + 15145048666288685405*2^64 + 3371943965260241272*2^128 + 3139908982*2^192,15441253062579627738 + 10812456348399105910*2^64 + 4033264943403837471*2^128 + 1248388605*2^192,11820484955145579276 + 18119880858580635961*2^64 + 6831174166350599791*2^128 + 1355726629*2^192,13958524856014076960 + 11183497766886938932*2^64 + 11969820331949570004*2^128 + 1988511348*2^192,5454715025327632924 + 16623294968627116812*2^64 + 2031186871298473402*2^128 + 1779059054*2^192,2540924439595916284 + 16955653149110961024*2^64 + 4976612011532655078*2^128 + 3487931104*2^192,759826934098160276 + 15376729210968478317*2^64 + 5867672023778551959*2^128 + 1053434674*2^192;\
5565221437057149040 + 4612018066381980718*2^64 + 4030092744718796296*2^128 + 1865364082*2^192,14140483071566607615 + 4407356083062427398*2^64 + 1466314125804690385*2^128 + 3789123713*2^192,6442705334659994653 + 16702040513212367028*2^64 + 15377059298843863501*2^128 + 1238276921*2^192,15911069485166072158 + 8921184348950074428*2^64 + 13312602668017507667*2^128 + 3799842558*2^192,1187533102776413343 + 10870128505942607942*2^64 + 3525672832342557420*2^128 + 3602884693*2^192,9660633095898016604 + 2800071750678256891*2^64 + 13818232803066044949*2^128 + 2313580217*2^192,1983948115861727641 + 16070122279694833277*2^64 + 14745170263876200096*2^128 + 536515665*2^192,16648795710099021910 + 15105269224348926896*2^64 + 616121807384896156*2^128 + 3555843868*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5276 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^7 - 4*x^5 + 16*x^4 - 16*x^3 - 128*x + 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 2; x^6 + 2*x^5 + 4*x^4 + 4*x^3 + 16*x^2 + 32*x + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 31

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
