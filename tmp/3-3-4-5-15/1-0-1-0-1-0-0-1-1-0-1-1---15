/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 49
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 0, 3, 0, 0]  	15	3 
[1, 0, 2, 1, 0]  	16	4 
[1, 2, 2, 0, 0]  	17	5 
[2, 4, 0, 0, 0]  	18	5 
[1, 5, 0, 0, 0]  	18	6 
[1, 0, 0, 3, 0]  	18	4 
[1, 4, 1, 0, 0]  	19	5 
[1, 2, 0, 2, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[0, 2, 1, 2, 0]  	20	4 
[0, 4, 1, 1, 0]  	21	5 
[0, 4, 0, 2, 0]  	22	5 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 4, 3, 0, 0]  	24	5 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	3 
[2, 3, 0, 0, 1]  	15	5 
[1, 1, 0, 2, 1]  	16	3 
[1, 0, 1, 2, 1]  	17	5 
[0, 4, 2, 0, 1]  	20	4 
[0, 2, 3, 1, 1]  	23	3 
[0, 3, 4, 0, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[0, 3, 2, 1, 2]  	22	4 
[0, 3, 0, 3, 2]  	24	4 
[1, 3, 1, 1, 3]  	21	6 
[0, 7, 0, 0, 253]  	21	5 
[0, 0, 4, 2, 254]  	26	1 
[0, 4, 0, 0, 255]  	12	2 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 2, 4, 0, 255]  	22	3 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[13452413663565723484 + 15708243766566925783*2^64 + 7573552542272782201*2^128 + 926788940*2^192,9428073947021133936 + 6490811211403177809*2^64 + 12841463037647857894*2^128 + 579694263*2^192,14078414347327565656 + 8290364953782169976*2^64 + 9147823510635288913*2^128 + 2208648243*2^192,15459261694967085976 + 16416920353723615702*2^64 + 4527324492246364708*2^128 + 1877452720*2^192,6064722932118997168 + 12734344479717113822*2^64 + 3656708027765494917*2^128 + 1081521962*2^192,5401025049886350808 + 1726239400595957370*2^64 + 14945827146935111753*2^128 + 3140926504*2^192,18389331537847559208 + 105730514157401929*2^64 + 4360940797908712706*2^128 + 3150816121*2^192,16879409041786823968 + 10811490815528071793*2^64 + 7782174575496756376*2^128 + 2576530688*2^192;\
7308533984831309679 + 9685479977864478599*2^64 + 8767790364458772278*2^128 + 3964388196*2^192,1441160056703232492 + 9257662754294925232*2^64 + 15795225595923806680*2^128 + 3207565490*2^192,14727500105348094130 + 11345869503654206716*2^64 + 13925591484151538825*2^128 + 1898875200*2^192,9526142890127420698 + 1770345850381612610*2^64 + 13866915560311758069*2^128 + 3288266344*2^192,16040388742326737828 + 17930986234685622108*2^64 + 9355221544717081407*2^128 + 4125457263*2^192,10093901608733418098 + 14838369795927914971*2^64 + 11201305742960853234*2^128 + 4047309925*2^192,8463168620326673686 + 8139975667052773678*2^64 + 13581138092897637930*2^128 + 3346481025*2^192,9216188688165612336 + 1441854575526044152*2^64 + 9555617623825643396*2^128 + 2442311234*2^192;\
4057697500048016900 + 1319321603231497480*2^64 + 5388946413489089457*2^128 + 284786141*2^192,9309870828144881280 + 505109137001976264*2^64 + 5213005037701621856*2^128 + 4196737777*2^192,7288484816280258568 + 12241824064248132363*2^64 + 920524490431242843*2^128 + 2673845529*2^192,7220707665562823656 + 4451857219834660598*2^64 + 13060601014893174198*2^128 + 3293337048*2^192,13627636501576048928 + 3586126167975273095*2^64 + 15259374617167859000*2^128 + 3397387720*2^192,13396925213992629432 + 2966378648783628415*2^64 + 8605044566841687501*2^128 + 3560135326*2^192,2192602831006774936 + 4250422854117709670*2^64 + 16157268107922303456*2^128 + 503326033*2^192,10465081150302104848 + 13909085903331067724*2^64 + 9266708689882469965*2^128 + 3218837459*2^192;\
6448008655167870563 + 11385177797998823906*2^64 + 6703185969590265834*2^128 + 247111484*2^192,5492293926087788592 + 2994830356571392120*2^64 + 8685372623635833261*2^128 + 265591339*2^192,4375503135131618294 + 9080662814807802708*2^64 + 1418213560568118088*2^128 + 1397230695*2^192,16313880023683474294 + 8171858164645601447*2^64 + 7110435293127586999*2^128 + 3342149302*2^192,8727094655480587968 + 4820783953909429697*2^64 + 13652492708427299949*2^128 + 3997114416*2^192,8682217846298096806 + 17847826969253384273*2^64 + 7935328170928216408*2^128 + 3304649614*2^192,10962026748175251390 + 4684907547017637785*2^64 + 3081554699784462140*2^128 + 3521515846*2^192,13034092115041295544 + 449410418425308272*2^64 + 17622538253349876090*2^128 + 1347773135*2^192;\
17683365307920456422 + 1950017884183911127*2^64 + 14367306097736170174*2^128 + 587783118*2^192,12591319906362515664 + 5063708452257820317*2^64 + 6011771064637987709*2^128 + 256567903*2^192,13293101110289055660 + 11287780536719966013*2^64 + 2999711091940570640*2^128 + 599381132*2^192,12642458334522905420 + 4946707840442515014*2^64 + 9262785524826999142*2^128 + 1994922115*2^192,934049316074060352 + 11700238955389786749*2^64 + 368373482991504978*2^128 + 1376227085*2^192,8903886173295558124 + 6443590852467000317*2^64 + 7371981422906861890*2^128 + 1488565411*2^192,15231640742723505788 + 16759172904115875851*2^64 + 6886145912582756124*2^128 + 409319417*2^192,15909170042505372992 + 8987824022418427990*2^64 + 4098998584562419426*2^128 + 45500280*2^192;\
10095702576579537214 + 11236602496142872866*2^64 + 18205824695836402620*2^128 + 1699743958*2^192,10529399098100211428 + 8207638592663917405*2^64 + 3479621160843869210*2^128 + 2009353643*2^192,7708126589732337992 + 9039879949419371066*2^64 + 7338815562663509868*2^128 + 2827236233*2^192,2772052240121229928 + 628864288889092434*2^64 + 4295695436993562936*2^128 + 1477308314*2^192,17027438120568863812 + 6475642678924458962*2^64 + 8762147771783495678*2^128 + 3687986726*2^192,15544474239813351008 + 6139762962478418775*2^64 + 6805441857466869210*2^128 + 2634860110*2^192,1635769068072827780 + 18382799180596758524*2^64 + 2577406009826218396*2^128 + 3154660616*2^192,6108890233502325496 + 5105000768080922053*2^64 + 10210294273780072252*2^128 + 713273026*2^192;\
1840939463325941421 + 13141041512089791687*2^64 + 11330284032081318674*2^128 + 2155489984*2^192,14256312785836387604 + 9014077569834285044*2^64 + 5044344683641621592*2^128 + 1945254546*2^192,9996967658991117398 + 4133258974047844797*2^64 + 14782410358749905125*2^128 + 3461741520*2^192,12481557628584219774 + 6492416732024678471*2^64 + 16272551293488761875*2^128 + 1547605727*2^192,13840136029661225108 + 13616574499581297270*2^64 + 16779745787576702927*2^128 + 2509082344*2^192,7331064951564238646 + 1117714783888710624*2^64 + 4703605364373043396*2^128 + 3756483683*2^192,13844640759455533458 + 8208311094884193416*2^64 + 5116017248717272758*2^128 + 2788492808*2^192,17081920696453988304 + 7462207112444719987*2^64 + 2340685459845821405*2^128 + 2210105409*2^192;\
3628159849523244811 + 8966302547495029625*2^64 + 11468472177747174280*2^128 + 1776303426*2^192,17072934858007509160 + 5752517417887222419*2^64 + 5939721454621569541*2^128 + 2236368079*2^192,7939491624787190198 + 2425322386378483760*2^64 + 522189838161004919*2^128 + 2127914021*2^192,11975418316584970006 + 14780140438884845757*2^64 + 14186172688936378879*2^128 + 1710093127*2^192,11219014228789572680 + 15740507715810296328*2^64 + 17013260988564096264*2^128 + 1925923897*2^192,2398191867823002886 + 16244308020139650296*2^64 + 11560613994207062092*2^128 + 626295689*2^192,17372068852133839382 + 17982185447905588091*2^64 + 7867313257131800519*2^128 + 1163823563*2^192,10514656414545230088 + 1267899045425108239*2^64 + 12053392463628737004*2^128 + 2677150197*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5244 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 31
