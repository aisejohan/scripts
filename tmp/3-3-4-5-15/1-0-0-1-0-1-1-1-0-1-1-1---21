/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 43
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[2, 2, 0, 0, 0]  	12	5 
[1, 0, 3, 0, 0]  	15	3 
[3, 0, 1, 1, 0]  	18	7 
[0, 1, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	6 
[0, 5, 1, 0, 0]  	19	5 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	3 
[2, 0, 0, 3, 0]  	21	6 
[1, 6, 0, 0, 0]  	21	7 
[0, 4, 0, 2, 0]  	22	4 
[2, 0, 2, 2, 0]  	24	5 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	2 
[0, 2, 5, 0, 0]  	26	2 
[1, 0, 1, 4, 0]  	27	5 
[1, 0, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 10, 0, 0, 0]  	30	3  <--- 2
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 0, 2, 1, 2]  	16	5 
[1, 0, 1, 2, 2]  	17	4 
[1, 0, 0, 4, 2]  	23	4 
[0, 8, 0, 0, 2]  	24	4 
[0, 3, 4, 0, 2]  	25	2 
[0, 3, 3, 1, 2]  	26	2 
[0, 2, 3, 1, 3]  	23	3 
[0, 1, 5, 0, 253]  	23	2 
[0, 4, 1, 0, 254]  	16	4 
[0, 4, 0, 1, 254]  	17	3 
[0, 3, 0, 2, 254]  	19	1 
[0, 0, 5, 0, 254]  	20	1 
[0, 0, 3, 2, 254]  	22	1 
[0, 0, 2, 3, 254]  	23	1 
[0, 0, 0, 5, 254]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[444807910528742872 + 9927158356364730757*2^64 + 10128987107917744827*2^128 + 957998669*2^192,14821294237175437404 + 4155070462398765395*2^64 + 7039972358072084505*2^128 + 1782985039*2^192,4875103030693632534 + 1609142785721094374*2^64 + 5420049895152085023*2^128 + 1708863252*2^192,6937821566979901598 + 11976123893165497388*2^64 + 8024540699642827247*2^128 + 2147234362*2^192,3889850426408903676 + 92734606211655762*2^64 + 8764961956379173422*2^128 + 184031435*2^192,10320082097808323458 + 10263409782100663638*2^64 + 15642371606933255579*2^128 + 1514499594*2^192,4801930075503132846 + 6244310828765814229*2^64 + 7698150625397528554*2^128 + 562161062*2^192,13257023092508606840 + 13501754023774291430*2^64 + 13637625378763199207*2^128 + 16685059*2^192;\
15387290474088008608 + 7295009377465928494*2^64 + 17949356600265580878*2^128 + 1560430002*2^192,18242840221321026674 + 4707216244025902986*2^64 + 15347764594155429678*2^128 + 1073689545*2^192,6932841236236552413 + 13946094927187262734*2^64 + 16968710163322808445*2^128 + 880619972*2^192,3739068259260639145 + 2690961959081959507*2^64 + 1729334205657364428*2^128 + 803284266*2^192,16644845841429612402 + 13494207524705923137*2^64 + 7866994002305382629*2^128 + 1632895150*2^192,15713516351819286503 + 15033506358913658628*2^64 + 6091094107448328599*2^128 + 553092906*2^192,16783150845689392241 + 701141057092149147*2^64 + 16168816657171596129*2^128 + 1317124793*2^192,4426113652856750356 + 4512242715881073655*2^64 + 6290452677137696359*2^128 + 469800900*2^192;\
2034060637746881950 + 3885626366154170373*2^64 + 8658553957910276682*2^128 + 739053433*2^192,15776156023677240428 + 7085735644721795276*2^64 + 15045512047421998357*2^128 + 839964251*2^192,14013679696714594602 + 6208788711209415604*2^64 + 4200933515261957501*2^128 + 645649357*2^192,5644131075191201326 + 14879590409295069654*2^64 + 6500501359668251715*2^128 + 1753223785*2^192,10058041738190494124 + 12774221758920991971*2^64 + 18237930690085871797*2^128 + 280727259*2^192,11716015269615803274 + 11140657080348280692*2^64 + 4967502818816578953*2^128 + 1811347233*2^192,8836468322333401578 + 6191501933428950531*2^64 + 5437751394714931629*2^128 + 2123522704*2^192,17511562244923342024 + 10958188952141867846*2^64 + 15204978825180565394*2^128 + 685107297*2^192;\
4940464704283940410 + 10268196672405907344*2^64 + 14878495075395601827*2^128 + 475915120*2^192,4743473373700032754 + 666308146374884983*2^64 + 12811144868173196558*2^128 + 614138800*2^192,16917387155980644393 + 16948824172133494251*2^64 + 2841047485096720185*2^128 + 1950617284*2^192,8410895834350663737 + 2482460118054901610*2^64 + 12979722769225629449*2^128 + 7470271*2^192,2013274326480008754 + 10792220921727587255*2^64 + 6339990244034543341*2^128 + 472882341*2^192,6224108185150240283 + 8882024155287506610*2^64 + 4260056643776646728*2^128 + 2066382633*2^192,14367447800376730237 + 15355989051399274775*2^64 + 10585556847214472532*2^128 + 257868479*2^192,9547804160521630820 + 17720776392100914770*2^64 + 14181287774508438497*2^128 + 356807671*2^192;\
1436899087009136654 + 14116787810411167554*2^64 + 1137707424424362665*2^128 + 1250760381*2^192,7470450601286588546 + 12607696180372178673*2^64 + 9411805552712420622*2^128 + 501655293*2^192,375206358361043669 + 17900755762652413940*2^64 + 5720502047258661712*2^128 + 786601275*2^192,3605114002072202465 + 13104145403918853718*2^64 + 514772835935947475*2^128 + 1400720884*2^192,5196856031654042842 + 2724983881815683634*2^64 + 3469743319378559263*2^128 + 1429262659*2^192,17910947065081143731 + 8306833857597792526*2^64 + 10399273304749801979*2^128 + 603312004*2^192,13125686336532862205 + 5536403388769918702*2^64 + 3781074714222488187*2^128 + 699171561*2^192,17202504682801566500 + 14543441800588170666*2^64 + 14069412951452060879*2^128 + 344056712*2^192;\
8307817534640540434 + 6275280065655039605*2^64 + 7140873927288177148*2^128 + 105550297*2^192,10254066317271514716 + 18365308885352686921*2^64 + 12652222974928346554*2^128 + 1812729694*2^192,4670331798814823054 + 3696697223916724581*2^64 + 10431240070711914438*2^128 + 1142653909*2^192,230755856545638362 + 6690765274152641551*2^64 + 41404174304997451*2^128 + 139388103*2^192,9660376603771774736 + 970642147199191520*2^64 + 15638216730121187618*2^128 + 1504717051*2^192,9667964266198043698 + 7315980785875275566*2^64 + 9965825252859771234*2^128 + 384283237*2^192,14846171218670200346 + 11752672157823931828*2^64 + 17545309986948330858*2^128 + 2138782581*2^192,11535434464452878120 + 17803834934192584589*2^64 + 1342736220367870491*2^128 + 448506868*2^192;\
6108587587309146216 + 1855791608784355411*2^64 + 18012945657364832622*2^128 + 262145591*2^192,1638671541315904726 + 10510274291970727444*2^64 + 3812049774918543194*2^128 + 2124585824*2^192,8488816924285655689 + 7736903935861877808*2^64 + 11960711093939977500*2^128 + 1453627158*2^192,7038257742519727093 + 11667248835441944185*2^64 + 305932564166414250*2^128 + 2092779289*2^192,1597538054458264686 + 11127522038088038297*2^64 + 10122444098605045861*2^128 + 106146754*2^192,17915299475438307747 + 17334086573767636617*2^64 + 12462675936398532490*2^128 + 1931614300*2^192,10809770310288114621 + 13716175390451381816*2^64 + 3635889050159197248*2^128 + 904442361*2^192,6328813427199844236 + 7233175575297478057*2^64 + 12931614566796028994*2^128 + 972060428*2^192;\
1869351425652559568 + 2646899777946995378*2^64 + 10327942575067114405*2^128 + 319666352*2^192,14370997896017918008 + 6429081699314864852*2^64 + 5865113100778049468*2^128 + 1431007459*2^192,2260458806056566472 + 11085599454817722703*2^64 + 10026492819276135643*2^128 + 790917263*2^192,18110435770665701176 + 14238610347834532946*2^64 + 16349192012796747341*2^128 + 1383536011*2^192,11170661070251842888 + 11318590358333829984*2^64 + 12106232783082848746*2^128 + 1775944532*2^192,4929902940664193640 + 498295668014128679*2^64 + 493605265485824310*2^128 + 245622100*2^192,3092477168564279416 + 12283939451962180855*2^64 + 6502157564113213712*2^128 + 791616756*2^192,5528732123068075912 + 13019687702325620249*2^64 + 14190929194297871386*2^128 + 392424621*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5133 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 - 4*x^5 - 8*x^4 - 16*x^3 + 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - x^5 - 2*x^4 + 4*x^3 - 8*x^2 - 16*x + 64, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 27
