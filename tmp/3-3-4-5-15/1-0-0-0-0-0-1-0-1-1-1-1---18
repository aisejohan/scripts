/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
The final length of G is 34
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	2  <--- 1
[1, 0, 1, 1, 0]  	12	4 
[0, 5, 0, 0, 0]  	15	3  <--- 2
[0, 1, 3, 0, 0]  	15	2 
[1, 0, 0, 3, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	4 
[3, 4, 0, 0, 0]  	21	6 
[0, 4, 0, 2, 0]  	22	3 
[1, 0, 5, 0, 0]  	23	3 
[3, 0, 4, 0, 0]  	25	2 
[0, 4, 2, 1, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 3, 1, 3, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 0, 4, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 3, 2, 1, 1]  	22	3 
[0, 3, 1, 2, 1]  	23	3 
[0, 2, 1, 3, 1]  	25	2 
[0, 2, 0, 4, 1]  	26	2 
[0, 4, 2, 0, 6]  	20	4 
[0, 3, 0, 3, 6]  	24	4 
[0, 2, 1, 2, 251]  	20	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 7 and 250.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[17683200847978893022 + 15756049953000188595*2^64 + 14851313053478202837*2^128 + 1161235732*2^192,4898757412579412104 + 4492504574196867848*2^64 + 10099546004218772385*2^128 + 1792453408*2^192,7956770438660140216 + 11518834913914495007*2^64 + 16846959562820861069*2^128 + 1962022694*2^192,3677593116826067880 + 11058544618478128630*2^64 + 9417998033703451340*2^128 + 1625783030*2^192,11167392796307087464 + 4883200646574325428*2^64 + 14254758968282959974*2^128 + 1926413035*2^192,2299004150653133320 + 2548368565838541850*2^64 + 4914518852520114357*2^128 + 416143273*2^192,9220951865016835644 + 11882815981336667147*2^64 + 9916036698241585948*2^128 + 1789796232*2^192,9581326401987773496 + 1433688038577423637*2^64 + 14779357072307229439*2^128 + 237694493*2^192;\
12037751345727370191 + 18229228304248280440*2^64 + 12945671136347756732*2^128 + 885750621*2^192,7109789801079247468 + 4900521972245422363*2^64 + 9333677549371446589*2^128 + 104431674*2^192,4608071757768166840 + 17283355667024049544*2^64 + 6856096275006404417*2^128 + 1016822488*2^192,13284905218471047852 + 8338154658670030217*2^64 + 4357622674045529788*2^128 + 856695366*2^192,7833833281791941424 + 5879470725806392122*2^64 + 14267822305046842560*2^128 + 949621040*2^192,10721763962834506600 + 10667647165707524115*2^64 + 12490947507198987987*2^128 + 805793175*2^192,13126552865463216854 + 16876644912824818706*2^64 + 8960050309548484937*2^128 + 406421688*2^192,6363615398123140308 + 16116943168375086824*2^64 + 10960491024374655047*2^128 + 954002273*2^192;\
3172933466769215915 + 1876155678316725816*2^64 + 8237678031249003138*2^128 + 491400708*2^192,15031111415866883492 + 8474745935916772131*2^64 + 3119122225165310823*2^128 + 986337539*2^192,8737866428602437200 + 13489957096443497538*2^64 + 16853076889102061114*2^128 + 1068750704*2^192,17434369141907604000 + 180455631389937340*2^64 + 2186455108242868267*2^128 + 112791938*2^192,16306617946220546180 + 8039423758942824868*2^64 + 6536281465108208347*2^128 + 853851544*2^192,7732649924528372568 + 8349849121937053098*2^64 + 5510721120072055552*2^128 + 351279001*2^192,16700272703884490042 + 9514748306715028435*2^64 + 17036636271289128744*2^128 + 898703614*2^192,10002572346049879868 + 17205095512308854364*2^64 + 8608992126852077648*2^128 + 573456139*2^192;\
15360719522723228871 + 12650712380936596539*2^64 + 4318893076333900228*2^128 + 2082541977*2^192,10461026801613281328 + 14749736259875703140*2^64 + 6555953908410338099*2^128 + 508424345*2^192,4025417602971527040 + 6098748842940536330*2^64 + 17581707224595582539*2^128 + 1559164518*2^192,7823537118087727128 + 10467213163153457079*2^64 + 13284636342939749087*2^128 + 2058998998*2^192,3423472610682743060 + 13598276498097616813*2^64 + 14916686980433594409*2^128 + 532211173*2^192,161060264000604752 + 2061870713528557318*2^64 + 13921975913849260503*2^128 + 689951662*2^192,687316043913974438 + 4743817895014271121*2^64 + 8118551551636497049*2^128 + 1927054676*2^192,7244205657650310644 + 9857982183407534104*2^64 + 5030221020683133792*2^128 + 607348234*2^192;\
12179683875539578544 + 17828207566270386927*2^64 + 17550900251071672526*2^128 + 1471563362*2^192,15746982152603198464 + 14753433462192293375*2^64 + 8421405888508978690*2^128 + 1655023215*2^192,226198507720580988 + 3698944105552059932*2^64 + 4713740059462055351*2^128 + 868208173*2^192,6766153984536555912 + 5916763766095985115*2^64 + 12611083813874567056*2^128 + 1713226113*2^192,13775868918177544408 + 17856306795998212985*2^64 + 6651391407940570037*2^128 + 727762416*2^192,9083927111326903764 + 3891746846736271398*2^64 + 5818903934259810042*2^128 + 284143032*2^192,6221387219854903684 + 7102539618974135783*2^64 + 12052372385298825122*2^128 + 1536360104*2^192,3200763919628220752 + 10828147783656563476*2^64 + 5231869524191739466*2^128 + 289184336*2^192;\
9140889920357950256 + 17037614006601541715*2^64 + 11126685025595235044*2^128 + 886340243*2^192,10831872771407986952 + 1626698394290254374*2^64 + 14398254153052129275*2^128 + 1851943447*2^192,6027262170920149068 + 8009537017941925010*2^64 + 10359545565784601492*2^128 + 641291728*2^192,3168261313101632816 + 9925079047722499276*2^64 + 1659135640923567190*2^128 + 1875029865*2^192,2480305373447795048 + 10311775023140122758*2^64 + 13096650791905381558*2^128 + 37139672*2^192,10440036054189278616 + 3973099529270845178*2^64 + 71219866759127934*2^128 + 988130531*2^192,11113547419310546732 + 8576503628889305831*2^64 + 1053698289478270290*2^128 + 382927120*2^192,636088544578232992 + 6887925337112297041*2^64 + 7058980379273169296*2^128 + 1530407654*2^192;\
16327548781076783972 + 2738629863900293271*2^64 + 10926980847385343092*2^128 + 414424671*2^192,3226107998840569920 + 6452265591920803500*2^64 + 2521847117049933852*2^128 + 1751971603*2^192,8895771672432658600 + 867300300009286533*2^64 + 8934012616812438453*2^128 + 1669937627*2^192,9327983829803183400 + 12543304590078002447*2^64 + 13821877353701476876*2^128 + 2037838333*2^192,5845641038937952828 + 5260700619251465814*2^64 + 10678680982324465601*2^128 + 1919221359*2^192,10364383844131693880 + 5102835621119650015*2^64 + 16785142946823586598*2^128 + 1957393837*2^192,6576074105473479792 + 11627105925050483497*2^64 + 16093719492390610605*2^128 + 18372690*2^192,12705246398365176248 + 12002268393504079841*2^64 + 3385390094263058894*2^128 + 1764002047*2^192;\
16219124158204121862 + 6119078896737605110*2^64 + 2454126622444535818*2^128 + 1638167948*2^192,16447587417821756440 + 11832392444138033067*2^64 + 13555748021923276228*2^128 + 1457721989*2^192,7435908075572522928 + 1388888565225956994*2^64 + 12419097551295161088*2^128 + 323294392*2^192,8935489948557604376 + 13864134899987820418*2^64 + 4658923884380272988*2^128 + 1389343303*2^192,12747277535759275952 + 7213604709713342397*2^64 + 4461846947046376933*2^128 + 567592515*2^192,13012548367420623376 + 13783733684370106896*2^64 + 6829737336578722884*2^128 + 782552003*2^192,3591298048945416108 + 1586117830881976429*2^64 + 10011557041731591177*2^128 + 780259328*2^192,13152134106949342576 + 10529836643777302953*2^64 + 4746128373388222430*2^128 + 16778999*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 3835 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 4*x^5 + 16*x^3 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 4*x + 16, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 27

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^1*y^1*z^1*w^1 + 1*y^5 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
Look at the ideal generated by: 
1*x^2*y^1 + 1*x^1*y^2 + 1*z^1*w^1
1*x^1*z^2 + 1*y^2*w^1
