/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 61
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[0, 1, 3, 0, 0]  	15	2 
[1, 4, 1, 0, 0]  	19	7 
[1, 1, 2, 1, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	6 
[1, 1, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	4 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	4 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 2, 2, 3, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	7 
[1, 3, 1, 0, 1]  	16	7 
[1, 3, 0, 1, 1]  	17	7 
[1, 5, 0, 0, 1]  	18	7 
[1, 0, 4, 0, 1]  	19	5 
[1, 0, 3, 1, 1]  	20	4 
[1, 0, 2, 2, 1]  	21	6 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[1, 2, 0, 3, 1]  	24	4 
[0, 2, 1, 3, 1]  	25	2 
[0, 2, 0, 4, 1]  	26	3 
[1, 2, 0, 2, 2]  	19	5 
[1, 1, 0, 3, 2]  	21	6 
[0, 1, 2, 3, 2]  	26	2 
[1, 1, 0, 2, 3]  	16	6 
[1, 2, 2, 0, 3]  	17	6 
[0, 0, 4, 2, 252]  	26	1 
[1, 0, 2, 1, 254]  	16	5 
[1, 0, 1, 2, 254]  	17	5 
[0, 5, 1, 0, 254]  	19	3 
[0, 7, 0, 0, 254]  	21	5 
[0, 0, 0, 5, 254]  	25	1 
[2, 2, 0, 0, 255]  	12	2 
[0, 4, 1, 0, 255]  	16	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 4, 0, 1, 255]  	17	3 
[0, 1, 1, 2, 255]  	17	2 
[0, 6, 0, 0, 255]  	18	2 
[0, 0, 5, 0, 255]  	20	2 
[0, 1, 0, 4, 255]  	23	2 
------
The gap is between 4 and 251.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[5996773602835044286 + 12592209013233391656*2^64 + 6647047191768296401*2^128 + 133376420*2^192,3753794946682808236 + 16534956900982265413*2^64 + 2100343612476848596*2^128 + 2466431628*2^192,12826035605514282284 + 12409792528700748835*2^64 + 1502481330832759225*2^128 + 2207481801*2^192,9882888082591583680 + 5578394440955645821*2^64 + 16365557926906809933*2^128 + 2524038444*2^192,14832602866808944152 + 11296320287260797650*2^64 + 819365657161229510*2^128 + 472450200*2^192,16088348048420594808 + 13263098985763664669*2^64 + 17500524772027094963*2^128 + 3660368555*2^192,1988268641188804908 + 11911611892705429365*2^64 + 17324182915254314325*2^128 + 3689686879*2^192,13429633086390959088 + 4757108551224094635*2^64 + 12199401206340780295*2^128 + 2524414891*2^192;\
5198010738521675676 + 5527370945730440633*2^64 + 14842593326315770176*2^128 + 3994113530*2^192,630363520173915024 + 15294259087109282022*2^64 + 10009437862506955772*2^128 + 1410773478*2^192,12000470622700471168 + 7088480037326380493*2^64 + 10382849947901818105*2^128 + 3698447609*2^192,3479404279665416128 + 16940415284820553137*2^64 + 6917713106793231035*2^128 + 1232984353*2^192,2247793282611285600 + 10091397050241710876*2^64 + 115799126884746721*2^128 + 1839622933*2^192,15190388555620031496 + 17660324213435572512*2^64 + 158054233723968433*2^128 + 3918480549*2^192,9770282758467855392 + 6855661332236959881*2^64 + 17562804759982333956*2^128 + 4235526435*2^192,11946745742548335264 + 3864287917286933748*2^64 + 14847508032457784553*2^128 + 1704708419*2^192;\
11021003393123801018 + 17915588687470852230*2^64 + 10398901181731783847*2^128 + 1321507956*2^192,16265658698396813572 + 8262385272659834459*2^64 + 6993864806183695951*2^128 + 4220686555*2^192,10425345601853911156 + 6902562316014580353*2^64 + 14059878804528411714*2^128 + 3365383806*2^192,15979673127998438848 + 6164710693310097475*2^64 + 5797935526982971620*2^128 + 1482101156*2^192,5264407138338417544 + 16852299353834372443*2^64 + 13382997634524455329*2^128 + 3515548311*2^192,2841606923813217640 + 10280976330483261253*2^64 + 10860284332912651032*2^128 + 459674318*2^192,11871129422634208628 + 16475059506762160495*2^64 + 1901154594131101632*2^128 + 4146180147*2^192,1138700625134778080 + 13452906279126660058*2^64 + 14249728401247249396*2^128 + 1834877869*2^192;\
9696600728604063018 + 4848925726603052165*2^64 + 3631593686486624554*2^128 + 1919239243*2^192,1048392372001178540 + 15993314551573194495*2^64 + 8767249852784362973*2^128 + 2810509404*2^192,13841746457097202436 + 11006213671533462191*2^64 + 16534129173648775459*2^128 + 244087368*2^192,2152794449897409176 + 3580950752855157135*2^64 + 17213157723743446825*2^128 + 377544095*2^192,7578908336402355856 + 12165626284123488942*2^64 + 2008362557833252477*2^128 + 1926849901*2^192,16958634007392772352 + 14746173300031573066*2^64 + 15209535206641805647*2^128 + 105852030*2^192,13615650931454903316 + 6636798157727359260*2^64 + 11965368418843841930*2^128 + 2664256843*2^192,11372110295217462032 + 14854918224622463422*2^64 + 1346091015014806927*2^128 + 4229607259*2^192;\
4067641786631158275 + 3651084346612772868*2^64 + 16392762643385726974*2^128 + 2406948855*2^192,12126857442203346350 + 1778387790846777482*2^64 + 17279080883215240809*2^128 + 4158933970*2^192,14637340625706847942 + 7682003465812145957*2^64 + 6032688240896669584*2^128 + 3255930145*2^192,5845648710572878248 + 2130041162527242934*2^64 + 9238572168471511106*2^128 + 3541567179*2^192,13772955493615705348 + 12025434344902031067*2^64 + 10385191292084576857*2^128 + 3084632271*2^192,10640699382320042468 + 16197033211717649265*2^64 + 2039348466063130284*2^128 + 718074055*2^192,12095432003750668590 + 1216527677059740245*2^64 + 18119758788862993335*2^128 + 4196164959*2^192,16407084477616150520 + 6164754051198965585*2^64 + 2123798068923980459*2^128 + 4177466872*2^192;\
2890544605099829087 + 3444936153639762026*2^64 + 5094178541005828380*2^128 + 1945723953*2^192,12345390615310853126 + 10892624339064210534*2^64 + 17145430760018571643*2^128 + 4003558177*2^192,16325089294021131062 + 15838841947098579779*2^64 + 4650450944393951914*2^128 + 4066198446*2^192,3643369686829326728 + 16507932960358272888*2^64 + 16955579935583582528*2^128 + 3762934662*2^192,16429616502240829500 + 2873759079794929379*2^64 + 3827770442379103120*2^128 + 3036281017*2^192,1873645057480842052 + 7562503247938800506*2^64 + 3527418670124778509*2^128 + 4141359824*2^192,11382282352039205902 + 9023388818342303998*2^64 + 2872458749641313961*2^128 + 1881420675*2^192,9353813353329827816 + 2692428808413476393*2^64 + 4240774938368355257*2^128 + 4049040424*2^192;\
3241220409062418439 + 15857394693651328355*2^64 + 6469810860097380472*2^128 + 2311836456*2^192,17492135617588584342 + 2266851648901507278*2^64 + 5839215737970879008*2^128 + 2624382379*2^192,2691202652732735782 + 14571492825746340527*2^64 + 2240558416288060750*2^128 + 605423424*2^192,2820618377230683544 + 6461043893394972770*2^64 + 4346395795349483789*2^128 + 3201232624*2^192,6744818789363784188 + 11911049595702964590*2^64 + 14897451799109567523*2^128 + 851126708*2^192,10600740432184267068 + 10506925760930524605*2^64 + 3415185349880187521*2^128 + 2434739343*2^192,7485186380390980566 + 17286953957186329214*2^64 + 16512273672438309989*2^128 + 3015858968*2^192,17919701477287120440 + 4768004491464010424*2^64 + 8220491266511488854*2^128 + 2729861313*2^192;\
18413659331778075603 + 12149147302729620710*2^64 + 5707436942191843653*2^128 + 138563551*2^192,12815196575288096990 + 6629763198615620513*2^64 + 18252819769820170461*2^128 + 1215454167*2^192,13765955688511447430 + 12003104685953225619*2^64 + 4568163915787093141*2^128 + 573908176*2^192,15724500548700489800 + 12558014312338752706*2^64 + 2451907081000626123*2^128 + 3344106258*2^192,6361422426032232284 + 2758257378146606198*2^64 + 11039884566209250617*2^128 + 3510108900*2^192,2702507920622507308 + 11913879989729958576*2^64 + 12204397702910472936*2^128 + 3577404809*2^192,8763957463944017694 + 7745745675983709491*2^64 + 9347436927113702270*2^128 + 2246017606*2^192,13902316906958331272 + 6377608141831263249*2^64 + 11573210204607701001*2^128 + 885017710*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4687 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 35
