/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 54
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	5 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	3 
[1, 2, 2, 0, 0]  	17	6 
[1, 0, 0, 3, 0]  	18	4 
[1, 4, 1, 0, 0]  	19	6 
[1, 2, 0, 2, 0]  	19	6 
[1, 1, 2, 1, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	5 
[1, 1, 1, 2, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	7 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[0, 6, 0, 1, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 0, 3, 0]  	24	4 
[0, 3, 4, 0, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 3, 1, 0, 1]  	16	7 
[1, 3, 0, 1, 1]  	17	6 
[1, 5, 0, 0, 1]  	18	6 
[0, 5, 0, 1, 1]  	20	4 
[0, 3, 2, 1, 1]  	22	4 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[0, 5, 1, 0, 2]  	19	5 
[1, 0, 2, 2, 2]  	21	5 
[0, 1, 2, 3, 2]  	26	2 
[1, 1, 0, 2, 3]  	16	5 
[2, 2, 0, 0, 254]  	12	4 
[0, 2, 0, 2, 254]  	16	3 
[0, 0, 4, 2, 254]  	26	1 
[1, 0, 2, 1, 255]  	16	4 
[0, 4, 1, 0, 255]  	16	4 
[1, 0, 1, 2, 255]  	17	4 
[0, 6, 0, 0, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	2 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[14608476177246467282 + 5535677307508437762*2^64 + 11305303818534858484*2^128 + 131818394*2^192,12210249752549500544 + 2197573923328387931*2^64 + 15200290363983413837*2^128 + 719676768*2^192,5236899003639826828 + 17116855070924772766*2^64 + 9785774549487571588*2^128 + 1131778974*2^192,1269168628243729828 + 17813061007431702907*2^64 + 2048820997837315630*2^128 + 1033836973*2^192,2235009389146530984 + 4490091429730790359*2^64 + 15602329786198474643*2^128 + 15442817*2^192,10564632978562573264 + 9565108753589901881*2^64 + 6850997083363561482*2^128 + 532899873*2^192,5283021823751827764 + 5717148366641985025*2^64 + 10296722151235679552*2^128 + 1216205156*2^192,7177511513683760992 + 9282286937773977711*2^64 + 13087498439695222354*2^128 + 1687687892*2^192;\
17735383601781300651 + 4623202127765668894*2^64 + 14143344697447532805*2^128 + 1543852288*2^192,16143789506567566064 + 5413927413317553583*2^64 + 13915426977506316160*2^128 + 434563753*2^192,16262948762969607930 + 4476775615486906702*2^64 + 7596695498243267366*2^128 + 597914644*2^192,1167464288138521902 + 15732079585409758301*2^64 + 697105244634078420*2^128 + 1473812542*2^192,4046405145301456360 + 240447020104246309*2^64 + 5984538531651303158*2^128 + 1346595247*2^192,3877180106542750672 + 2942319828664391425*2^64 + 8921444576661286970*2^128 + 427912299*2^192,9100511059927914862 + 14595260028899997400*2^64 + 7091670447654368442*2^128 + 791786099*2^192,10547701977663291576 + 3392612883991436101*2^64 + 10492334618290441411*2^128 + 1848119349*2^192;\
4619042180548446644 + 950504339704243615*2^64 + 8391438231774960016*2^128 + 740500394*2^192,6898853997705907704 + 9707666487172483275*2^64 + 3385463783435082079*2^128 + 1127382793*2^192,3606734886254931416 + 14264934144260006469*2^64 + 1100403412672899265*2^128 + 1453239853*2^192,18180037393611094712 + 2003335510491035529*2^64 + 10889522739264176011*2^128 + 1020680959*2^192,5129249058776556232 + 3926431826848767279*2^64 + 3157310020338147792*2^128 + 2146901148*2^192,6966799187678011208 + 1022211105027185080*2^64 + 11494037133597451182*2^128 + 786314297*2^192,12071656806175967968 + 4772441007904722104*2^64 + 14563478535666577729*2^128 + 1092341288*2^192,5955895415070832520 + 1095050559617055857*2^64 + 3680856656548015445*2^128 + 466902813*2^192;\
15672185227628243225 + 15059153082728735809*2^64 + 18366640553197453618*2^128 + 1644531974*2^192,12395293347228940924 + 4796370845512051899*2^64 + 12203219273472927756*2^128 + 2031933287*2^192,13288280251203300514 + 3690645498677696184*2^64 + 7274172945999341462*2^128 + 688957940*2^192,15337059415931066278 + 277678280400074523*2^64 + 6765666368170260961*2^128 + 1412689718*2^192,1577633478497256 + 17581189897232021743*2^64 + 3094883643964113447*2^128 + 2077707369*2^192,11352467593176118900 + 16649485271708607067*2^64 + 884414090710404889*2^128 + 1397571309*2^192,11178752051479675926 + 8974688750175224730*2^64 + 17866858240326440963*2^128 + 1532241818*2^192,11588548424196671328 + 14407701319261910462*2^64 + 3822083530091271043*2^128 + 520636956*2^192;\
8534742721026410117 + 15448025745424141069*2^64 + 2948537565471435174*2^128 + 1063517963*2^192,15545790462996170884 + 17069826080709003020*2^64 + 10805496516983360303*2^128 + 1099222822*2^192,13635406353092886634 + 7202675632239292325*2^64 + 8077145795199995836*2^128 + 1527426919*2^192,14450653542354328422 + 8862719147361480530*2^64 + 4716863419289523051*2^128 + 1425705038*2^192,1321255567381376584 + 17875466242818923310*2^64 + 5593399036058483148*2^128 + 774200269*2^192,13458964815304094720 + 3227761648446147872*2^64 + 10798328172935787962*2^128 + 625852818*2^192,9359600446215469326 + 3593585606086395841*2^64 + 852712571019732473*2^128 + 1518408436*2^192,70714376020399688 + 5401165667468280438*2^64 + 11960617843266729291*2^128 + 1414143537*2^192;\
7668173682634013254 + 2234696870686554208*2^64 + 2779523591832221606*2^128 + 1114737489*2^192,15223208695368228884 + 3329857836576341590*2^64 + 12433318748681553169*2^128 + 1381971293*2^192,12276217174601358092 + 16524202917179798187*2^64 + 5615057170178124492*2^128 + 1463112888*2^192,12837791310988207940 + 6291234131621577878*2^64 + 3771149666195684273*2^128 + 1903140409*2^192,570415420564529460 + 2851351032802917562*2^64 + 14177273310908140128*2^128 + 710191698*2^192,2498781108743669764 + 5041841954071983429*2^64 + 9009622502969785069*2^128 + 778978073*2^192,6197862679951933548 + 17376465679438655384*2^64 + 14553458378002996887*2^128 + 511514326*2^192,13108918489356672488 + 7948379796103145199*2^64 + 13919307033871668846*2^128 + 2090527993*2^192;\
10101186022994249344 + 8131213628936607820*2^64 + 6017470710454769379*2^128 + 208610249*2^192,4146713020882092856 + 6424923463219553570*2^64 + 11235180222637683956*2^128 + 344547578*2^192,10562870671969878844 + 2255637955338579152*2^64 + 11697013878505562657*2^128 + 1295672960*2^192,12022152130728773324 + 4010425330216446468*2^64 + 18419938178239917335*2^128 + 2042089634*2^192,7889288924668929596 + 6283671935798205797*2^64 + 14969198859171283201*2^128 + 547040686*2^192,17663851662282469236 + 16476586891209828476*2^64 + 6128658258476252546*2^128 + 1112383651*2^192,16079592394668144504 + 14379967156522314399*2^64 + 2288902994918731266*2^128 + 601415108*2^192,15048923461365780808 + 6497512779204355130*2^64 + 2379273777987503279*2^128 + 2147333408*2^192;\
8444226037794653424 + 13722312178683663957*2^64 + 7628276002811222818*2^128 + 1356316059*2^192,10789143843371567820 + 1840371232565585103*2^64 + 10492858472795316252*2^128 + 2038396724*2^192,9576550739779139832 + 340807226620858186*2^64 + 8820481368987729989*2^128 + 56610437*2^192,18291832467588760556 + 472291722073688998*2^64 + 9618210210012669795*2^128 + 1436391255*2^192,6562194119518673512 + 13948523779829892755*2^64 + 16469512754241116753*2^128 + 604194947*2^192,6893924503461957992 + 16566871447934822834*2^64 + 8866216575436978348*2^128 + 1855404558*2^192,17579491084764964032 + 12411560578021743954*2^64 + 14800529841548223778*2^128 + 52352858*2^192,3860243365166359800 + 8076290915835300567*2^64 + 5303326372723299121*2^128 + 1739565918*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4736 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 34
