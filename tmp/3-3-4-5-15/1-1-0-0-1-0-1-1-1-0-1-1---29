/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 37
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 4, 0, 0, 0]  	15	3 
[1, 0, 3, 0, 0]  	15	3 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 0, 1, 2, 0]  	17	3 
[1, 0, 0, 3, 0]  	18	2 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 2, 1, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 0, 3, 0]  	24	4 
[0, 3, 4, 0, 0]  	25	3 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 2]  	12	5 
[1, 1, 0, 2, 2]  	16	4 
[0, 0, 5, 1, 2]  	25	2 
[1, 0, 1, 1, 254]  	12	3 
[0, 0, 0, 5, 254]  	25	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[11807343009754166776 + 7750655848302108239*2^64 + 15420477440839761844*2^128 + 4993026149*2^192,7624287001442658632 + 7732315806815927046*2^64 + 1495812574793222559*2^128 + 584444116*2^192,1124880880702991264 + 9878677723280656993*2^64 + 10899407609223699890*2^128 + 5507707607*2^192,8897095821581422624 + 10699461548204840461*2^64 + 6429345116108708244*2^128 + 2640273915*2^192,359365746892497168 + 1676048819784035956*2^64 + 9530175487472681981*2^128 + 7744538318*2^192,4380773286207113016 + 16333737475695195243*2^64 + 17268733581673024750*2^128 + 2915861430*2^192,3128417429085576704 + 14711469366015278259*2^64 + 17325824727846035741*2^128 + 7148655816*2^192,6505131277023763152 + 1208317745370810489*2^64 + 9797071762978720115*2^128 + 1942418655*2^192;\
935469367030531280 + 7592420205576309623*2^64 + 5856525559721748456*2^128 + 3443179408*2^192,6821567608780365072 + 8502478726797526046*2^64 + 15603520942630012497*2^128 + 3821023252*2^192,463949354242459232 + 8096820830336831922*2^64 + 2534758767195296047*2^128 + 2580739416*2^192,17863591603590449088 + 8430023045285259216*2^64 + 5730877840049074020*2^128 + 3433037549*2^192,5647573539261521888 + 11033113981660649398*2^64 + 11969127113689324612*2^128 + 487247402*2^192,16424587419623094208 + 13464263694510233030*2^64 + 7310515605491952343*2^128 + 486369169*2^192,1396093470490781504 + 18192902487435091662*2^64 + 2628646866376458673*2^128 + 620520218*2^192,6199647940885052544 + 14554040566857092175*2^64 + 14278289839473456560*2^128 + 1238282687*2^192;\
17355705067500012059 + 9599718282949646300*2^64 + 8062273080501736954*2^128 + 2131774798*2^192,16992904428535093831 + 6541936695806338425*2^64 + 10980590705575606302*2^128 + 2457716*2^192,10229132710467009716 + 286942619325949308*2^64 + 13534492815436959557*2^128 + 5914019538*2^192,6977276294182819128 + 8321428519925379125*2^64 + 3667246008955046887*2^128 + 6593828594*2^192,15589034938691836994 + 14165289523079196816*2^64 + 12355161888708711033*2^128 + 2543982646*2^192,17771688316072203089 + 11697423933574826210*2^64 + 4438349490895776584*2^128 + 953075344*2^192,4499480861086595924 + 8297704075390097507*2^64 + 11079147002874601518*2^128 + 3220013063*2^192,14285035880957816806 + 16807696123996597335*2^64 + 1665911397856320146*2^128 + 1055597693*2^192;\
6645563079756520761 + 846293711764531138*2^64 + 7327087870923605280*2^128 + 263317491*2^192,10566998116062875301 + 3189437891181508379*2^64 + 6926796685898766855*2^128 + 8501241665*2^192,1374739699281253276 + 1526216881517043899*2^64 + 10038553763138135596*2^128 + 4034936178*2^192,12535119838231728264 + 17322144647669377361*2^64 + 934658157313987040*2^128 + 6811041749*2^192,10934062841844765862 + 15784187304069508786*2^64 + 8020355953277622291*2^128 + 2915798959*2^192,9588475268985277907 + 17326185212333067942*2^64 + 9932348358706323723*2^128 + 7634094691*2^192,18344020572388866876 + 6312120294614944746*2^64 + 2409580258505877549*2^128 + 8521421121*2^192,1482060618333421810 + 600385934845464840*2^64 + 7160125778388034323*2^128 + 3110364632*2^192;\
2399924314170323459 + 13195871350636926681*2^64 + 6224337869098166747*2^128 + 3076902764*2^192,5649301570251613879 + 1407054263968071693*2^64 + 3286516081719063001*2^128 + 1839477894*2^192,9589080761302594964 + 11968045560241972904*2^64 + 11674254277422775140*2^128 + 2798986674*2^192,16964491519029647576 + 3109180221073534729*2^64 + 15085226794144579519*2^128 + 1726831766*2^192,3443510645690499138 + 11215083182566264263*2^64 + 13442223395648629307*2^128 + 2126110766*2^192,11403146286523901729 + 17629921714874850524*2^64 + 9538276528696759497*2^128 + 2972668514*2^192,15952826886194063188 + 10184002260585761139*2^64 + 6912689149797628822*2^128 + 941028566*2^192,13380537812984356518 + 1048114399005669921*2^64 + 17398686745631626117*2^128 + 2581062695*2^192;\
2666186736287124740 + 1202366053447384400*2^64 + 1390926970318734302*2^128 + 7733708953*2^192,4689547600091258532 + 12182578568383761309*2^64 + 10599865737610566338*2^128 + 997765811*2^192,18172964065279655456 + 6060523538605817916*2^64 + 2270462110479872739*2^128 + 8023983280*2^192,13108791851214813296 + 7979206144072367367*2^64 + 14801846124791325160*2^128 + 8223158335*2^192,7786635909873440088 + 4128697439636681695*2^64 + 9983805345674753325*2^128 + 5447005013*2^192,6519492067661407100 + 361830573913356582*2^64 + 1680778554134292144*2^128 + 3101445291*2^192,14417393501813772272 + 6236301751766442808*2^64 + 65334476986420899*2^128 + 3061051149*2^192,14341715295616377640 + 14211382311272256145*2^64 + 15486387659271065464*2^128 + 8230541465*2^192;\
1299513605289269708 + 17092758248158556151*2^64 + 7847778741433386038*2^128 + 7276910547*2^192,13220140155540193020 + 15823801180431420657*2^64 + 1734501107772727197*2^128 + 2293394584*2^192,3010420498502092880 + 13940532382923443680*2^64 + 7049749985811899078*2^128 + 7758520862*2^192,1317903785468094480 + 1013294852989318934*2^64 + 6442643631758766685*2^128 + 5973621213*2^192,2818707605335598552 + 10518575324548795240*2^64 + 13230485468799941776*2^128 + 163093108*2^192,10840305145401983444 + 4672032500537169746*2^64 + 6928266176396571396*2^128 + 619184641*2^192,8032041914607552336 + 2247760261577825277*2^64 + 6465331959018205614*2^128 + 7309607505*2^192,13000119467073853048 + 11770967109415528769*2^64 + 15829670920005437610*2^128 + 97953919*2^192;\
2147282269417159139 + 7537508761786181678*2^64 + 14728304464266405838*2^128 + 8178783825*2^192,7304658224325413247 + 8509540192088776596*2^64 + 6495261799631172425*2^128 + 1615412570*2^192,10172352368262502516 + 15117778662358457888*2^64 + 1973856593323923961*2^128 + 3363516185*2^192,3233079705624240120 + 5339394001174344772*2^64 + 13543312068982109116*2^128 + 1691916039*2^192,17198099893793294226 + 16692493530698489700*2^64 + 2787253035720767564*2^128 + 5722649874*2^192,16716569530238071417 + 7579571211226400598*2^64 + 7627929635456369960*2^128 + 1378532527*2^192,5646690006798380404 + 10128632303033535466*2^64 + 9391105087708304699*2^128 + 5865491040*2^192,1844657703687025846 + 17991778083002378318*2^64 + 4900464458812578750*2^128 + 7069490768*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 5276 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 + 4*x^5 - 8*x^4 + 16*x^3 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x^2 - 2*x + 4, 1; x^6 + x^5 - 2*x^4 - 4*x^3 - 8*x^2 + 16*x + 64, 1]
The valuation of f-g is: 26
The valuation of subst(g,x,A) is: 23
