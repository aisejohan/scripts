/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 49
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 0, 3, 0, 0]  	15	3 
[1, 2, 2, 0, 0]  	17	6 
[1, 5, 0, 0, 0]  	18	6 
[1, 0, 0, 3, 0]  	18	4 
[1, 4, 1, 0, 0]  	19	5 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 4, 0, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	5 
[1, 3, 1, 0, 1]  	16	5 
[1, 3, 0, 1, 1]  	17	6 
[1, 1, 1, 2, 1]  	20	4 
[0, 3, 2, 1, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[1, 1, 0, 2, 3]  	16	6 
[0, 1, 2, 3, 3]  	26	2 
[1, 0, 2, 1, 253]  	16	5 
[0, 0, 4, 2, 253]  	26	1 
[1, 3, 0, 0, 255]  	12	4 
[0, 4, 0, 0, 255]  	12	2 
[1, 1, 1, 1, 255]  	15	4 
[0, 0, 5, 0, 255]  	20	2 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[7679632379956741304 + 5804094323458207558*2^64 + 13422658196359247668*2^128 + 6914344945*2^192,2145923533646213584 + 4384062825562680016*2^64 + 11229373203090206100*2^128 + 8279939766*2^192,1964917790875128784 + 3193007849813898085*2^64 + 5495309577968848051*2^128 + 4694715464*2^192,17343404457467708480 + 3583345343707303796*2^64 + 10712138295083921321*2^128 + 7501215102*2^192,11100659894560418256 + 11064952038669072881*2^64 + 5810865503969242626*2^128 + 3898109145*2^192,371183071543229504 + 11834381688013155346*2^64 + 14853540666536356059*2^128 + 2737268207*2^192,5899896679965624880 + 11447629737886625654*2^64 + 6533827075109723075*2^128 + 4742261255*2^192,1751494243792358464 + 11850933524490286418*2^64 + 3075628607389497258*2^128 + 2956575530*2^192;\
12839987310308967736 + 11168967966914469791*2^64 + 7033346844258921897*2^128 + 5051609267*2^192,1527110110529667112 + 4788274302055022264*2^64 + 15761544022139602897*2^128 + 2125059591*2^192,5972372308440923392 + 16676243975487850812*2^64 + 4852701959414899870*2^128 + 7320989857*2^192,15591978729917731800 + 6120815488672497089*2^64 + 1101740053886107905*2^128 + 4004158241*2^192,1119493654108956152 + 1433381034650943544*2^64 + 8444519832441989147*2^128 + 4518288341*2^192,6433984062598919288 + 16453256157358561905*2^64 + 13993829170414606672*2^128 + 5825319567*2^192,13309140327281672752 + 330047793962881632*2^64 + 4540368747041954540*2^128 + 7608670393*2^192,11043914817700747728 + 12269091574554143253*2^64 + 9028096155287686058*2^128 + 3900985228*2^192;\
7270219907379466314 + 2233903546732653486*2^64 + 17822985684671762654*2^128 + 3574608373*2^192,3735344341700090268 + 18298269106101205345*2^64 + 1035642386700979995*2^128 + 7228219887*2^192,9547285584128211956 + 2045509863360090869*2^64 + 8462310723828552606*2^128 + 1223734250*2^192,850466747815031416 + 7780305065581251731*2^64 + 4253488917988187549*2^128 + 2808880001*2^192,925877740729932228 + 17621158365803122014*2^64 + 17565286650370746503*2^128 + 2136588600*2^192,16181171412922675000 + 14126725800674087421*2^64 + 13903200057031407240*2^128 + 2194266777*2^192,13379671860146501916 + 8870351799021296310*2^64 + 13449538922102774192*2^128 + 2445099199*2^192,4294460848351948688 + 15576062864998505747*2^64 + 9569390272164666599*2^128 + 7249690906*2^192;\
3655085163558018413 + 3129286783038269030*2^64 + 2004223653203915561*2^128 + 5074800127*2^192,2115280854394449966 + 3920754435395468682*2^64 + 201956430895191299*2^128 + 6606976390*2^192,6390315529135445626 + 2005510246030601991*2^64 + 12629107947507928014*2^128 + 233107670*2^192,2623496934042420124 + 12809431368062670699*2^64 + 4576795176755692018*2^128 + 5664313517*2^192,2481491313767755858 + 1042967591223664718*2^64 + 17922485335217227784*2^128 + 8007764186*2^192,1433492052666669372 + 11061558736983925006*2^64 + 800202471119008553*2^128 + 4156608773*2^192,14952363286361175070 + 6778441028295936082*2^64 + 12548287127960378865*2^128 + 5313565512*2^192,1325067963328096856 + 6023220851638982354*2^64 + 12603515591223299557*2^128 + 6442291501*2^192;\
1642346764282641896 + 1039467252958333938*2^64 + 6122018216624489472*2^128 + 6858345295*2^192,11807788416447270848 + 12009495829551554319*2^64 + 2841805634326003855*2^128 + 8314189065*2^192,9910602196884050608 + 17104920947479282008*2^64 + 15187490860283937251*2^128 + 1281619565*2^192,14551714144643863920 + 12748041623928520017*2^64 + 11035737646838888543*2^128 + 462442411*2^192,1514415268695828864 + 8323690940779870401*2^64 + 6868612805432172355*2^128 + 8075431059*2^192,10174684071206754288 + 8450703293716177085*2^64 + 12577647959368415378*2^128 + 6681740045*2^192,4160582174161695248 + 16774154935499279615*2^64 + 9219504051732437369*2^128 + 8345960276*2^192,3656901028052287712 + 2780836599059881630*2^64 + 3585216289402041912*2^128 + 3062771681*2^192;\
10094663893233217823 + 5198052740164919541*2^64 + 196097276910026316*2^128 + 6872367189*2^192,5898934758984217762 + 14185242347698481857*2^64 + 1462083690897637069*2^128 + 1651086601*2^192,14528653456242651278 + 5989486285178728206*2^64 + 6581564862095408132*2^128 + 3057635698*2^192,12402753012262748284 + 8973158940265026903*2^64 + 12458836198624950355*2^128 + 6149589306*2^192,3205325278678366062 + 14966755549450342631*2^64 + 11287339320501860945*2^128 + 2261965393*2^192,261791965707957116 + 7730366955588200951*2^64 + 674238345656539452*2^128 + 8034962352*2^192,952431364369499370 + 11508084400268288135*2^64 + 8467218069341669841*2^128 + 1047152375*2^192,11879039808378920248 + 7010866776003147313*2^64 + 4351036395527720862*2^128 + 6001699063*2^192;\
13392019381378134406 + 4233463369614101334*2^64 + 18392459851475996857*2^128 + 6670485373*2^192,15285394392444094732 + 4090271787283671743*2^64 + 14034392641341417818*2^128 + 4336843354*2^192,18034360485737099804 + 8633182934958867595*2^64 + 14080229411598759207*2^128 + 216839170*2^192,14440492705955283744 + 12978872139038829429*2^64 + 8981246482481096337*2^128 + 7988834902*2^192,16415420320365781972 + 1082631460803725449*2^64 + 13746024234725408246*2^128 + 3079726161*2^192,4756943641471253920 + 3627260403488276999*2^64 + 5548617580292309200*2^128 + 4539492519*2^192,14768623837479930708 + 9653420475144169590*2^64 + 10565758522213421468*2^128 + 7381884269*2^192,11914888928450742432 + 12872506517640472718*2^64 + 14187844586960826413*2^128 + 7304758929*2^192;\
11872372513499129746 + 12875509115003971401*2^64 + 3783149591869899636*2^128 + 1214424470*2^192,18382130793782722324 + 17453001783098178871*2^64 + 1850235288236260098*2^128 + 7113505432*2^192,752629648002589572 + 3601231705760417485*2^64 + 9466710163891607234*2^128 + 3787547793*2^192,4967981014035604496 + 1979828867213741460*2^64 + 8830917136971865199*2^128 + 5073893775*2^192,5462223354950893580 + 7454629905163668170*2^64 + 12590755402587039311*2^128 + 1066629263*2^192,5368466358031491760 + 1477644621344967990*2^64 + 1914588658922264760*2^128 + 1681212766*2^192,13780538929385270876 + 2999751881880305643*2^64 + 2292959189705952094*2^128 + 4028316711*2^192,9116438375920718656 + 13208660504960784597*2^64 + 13375492239856953292*2^128 + 3462232439*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4706 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 4*x^5 - 16*x^3 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + 2*x^3 + 2*x^2 + 8*x + 16, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 30

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^5 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
