/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 56
[1, 1, 1, 0, 0]  	10	2 
[1, 1, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	2 
[3, 0, 1, 1, 0]  	18	7 
[0, 1, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	6 
[0, 5, 0, 1, 0]  	20	5 
[0, 2, 1, 2, 0]  	20	4 
[2, 0, 0, 3, 0]  	21	6 
[1, 6, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[0, 5, 2, 0, 0]  	23	3 
[2, 0, 2, 2, 0]  	24	6 
[0, 4, 2, 1, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	3 
[1, 0, 1, 4, 0]  	27	4 
[1, 0, 0, 5, 0]  	28	1 
[0, 4, 4, 0, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 5, 0, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 10, 0, 0, 0]  	30	2  <--- 2
[0, 2, 6, 0, 0]  	30	2 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	5 
[2, 0, 0, 2, 1]  	16	4 
[3, 0, 2, 0, 1]  	17	4 
[2, 0, 2, 1, 1]  	19	4 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[0, 2, 3, 1, 1]  	23	3 
[0, 8, 0, 0, 1]  	24	5 
[0, 3, 4, 0, 1]  	25	2 
[0, 2, 5, 0, 1]  	26	2 
[1, 0, 2, 2, 2]  	21	6 
[0, 5, 1, 0, 4]  	19	5 
[0, 4, 2, 0, 4]  	20	4 
[0, 3, 0, 2, 251]  	19	4 
[0, 1, 3, 1, 252]  	20	3 
[0, 0, 4, 2, 254]  	26	1 
[2, 2, 0, 0, 255]  	12	3 
[0, 4, 1, 0, 255]  	16	1 
[0, 4, 0, 1, 255]  	17	1 
[0, 0, 5, 0, 255]  	20	1 
[0, 7, 0, 0, 255]  	21	3 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 5 and 250.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[7628739660069441074 + 2605383186653804664*2^64 + 198000237494794295*2^128 + 2013690740*2^192,7278084440906666460 + 17619210901668082165*2^64 + 14164737791324113620*2^128 + 1669121440*2^192,1407544142341988200 + 5112288161273730843*2^64 + 6632857557353550376*2^128 + 1556317269*2^192,3920934006015726128 + 7688534324633559518*2^64 + 5978550829947883630*2^128 + 1872976624*2^192,17016771270798595072 + 2959462092339743858*2^64 + 9715426136899347637*2^128 + 164996828*2^192,14092190590299352736 + 5831006297971073942*2^64 + 12335928995744302736*2^128 + 546842953*2^192,1322065233659275344 + 3018343476950521141*2^64 + 861675390283052091*2^128 + 2126071150*2^192,5447223667171320008 + 2994583263346826093*2^64 + 16095555915680917432*2^128 + 1077609310*2^192;\
16142042565891507640 + 2506831924920691519*2^64 + 10213189884863637457*2^128 + 380680502*2^192,8313598376586546668 + 8304497081646395712*2^64 + 13657072370573358010*2^128 + 1486151279*2^192,11425257804859241376 + 6766025973350757285*2^64 + 2085576830716338122*2^128 + 2105969582*2^192,17876779900026077320 + 4329071625592376580*2^64 + 15801122581385937585*2^128 + 1582987208*2^192,9250528644345504824 + 6520586392618539170*2^64 + 14837215364144202688*2^128 + 403792044*2^192,10739425878809668468 + 910521107096700963*2^64 + 5549844530411964609*2^128 + 2093942022*2^192,6087369155487252896 + 11902179153182821063*2^64 + 12885879545316071916*2^128 + 31625957*2^192,14353705868773637992 + 5423203207530936458*2^64 + 17708851981959400852*2^128 + 113043176*2^192;\
4251174380310618638 + 1866759853750384718*2^64 + 16991923049459597664*2^128 + 446675552*2^192,8862663392478111420 + 3813373788727895214*2^64 + 2970540254072926571*2^128 + 1435514501*2^192,16295799905192182204 + 14835690111625642636*2^64 + 3329439397172482013*2^128 + 1299440111*2^192,16242222884386865988 + 9413762517195967366*2^64 + 17123080534208637837*2^128 + 1936851936*2^192,8032807030962666336 + 2443535219897996424*2^64 + 9089810046956191740*2^128 + 35202830*2^192,6190341256989697620 + 18242019819641780231*2^64 + 5212343371418176980*2^128 + 683937639*2^192,15438956378464884512 + 7058483669003158551*2^64 + 6707073726878756837*2^128 + 1032512884*2^192,14979944166605768696 + 2220053244802266558*2^64 + 18392543422358176803*2^128 + 449995986*2^192;\
8531554905066280833 + 3241990823198112325*2^64 + 10923335949527472166*2^128 + 523324836*2^192,17896806530803511970 + 16505610712004098418*2^64 + 7297614276202421977*2^128 + 680473594*2^192,11029783819541331680 + 2721551389587407152*2^64 + 12663808149376611978*2^128 + 874912081*2^192,2167280328407343488 + 16819873431429263004*2^64 + 3969965268593280899*2^128 + 826632306*2^192,10275650618821915072 + 8947305141786658811*2^64 + 5732702529187469553*2^128 + 1595878749*2^192,17612655837408955008 + 14181392776202586060*2^64 + 16560562767089856975*2^128 + 665182505*2^192,688672936460919876 + 7227050463350791418*2^64 + 17981287842635364851*2^128 + 1902945189*2^192,7735583754065982684 + 11997401259134195600*2^64 + 12768723303377045934*2^128 + 2046968804*2^192;\
1805651453957146871 + 7956741230601845015*2^64 + 17980174897393729442*2^128 + 1016238068*2^192,9184494087539348842 + 12310720635113731509*2^64 + 1402196496641512271*2^128 + 591186706*2^192,1575675585939559772 + 12958586403283745222*2^64 + 3170563025056831767*2^128 + 1434198571*2^192,10310275432298275288 + 3221482125595861957*2^64 + 17560087573827616211*2^128 + 1893077967*2^192,7011853837444556984 + 12449269550212266780*2^64 + 10356306663502878918*2^128 + 1902246816*2^192,11627585807631442372 + 16448984449887315982*2^64 + 10271313277587358940*2^128 + 894616183*2^192,8844088799327192716 + 14014208449767323299*2^64 + 4820843011316704540*2^128 + 501306953*2^192,4173273355148386732 + 16607404368456584861*2^64 + 17888857336473487256*2^128 + 103256229*2^192;\
1822461289954524603 + 8199766625553902242*2^64 + 18222524858790623540*2^128 + 820465596*2^192,17020569125849235094 + 3509300075880456916*2^64 + 15437714001895409669*2^128 + 545708353*2^192,7026161107111497504 + 17365139810661242581*2^64 + 9038477208174488261*2^128 + 1777312068*2^192,2249539957336992364 + 8053337937947925387*2^64 + 10083379792996832562*2^128 + 34422164*2^192,2697052376369217792 + 2348611412776425631*2^64 + 8719738289574282780*2^128 + 1401309572*2^192,14478764810590746736 + 7849482873829299564*2^64 + 772027847405497075*2^128 + 752686097*2^192,9448595304468472196 + 6771465522370217742*2^64 + 15223676713805291587*2^128 + 2125130247*2^192,3044297317848653580 + 3263884964663850390*2^64 + 5759109520122403858*2^128 + 1703948490*2^192;\
1730864109727301036 + 6693418290311813493*2^64 + 5567484478710474480*2^128 + 993320921*2^192,10380603464044748896 + 3769787481707196999*2^64 + 3082322239488619050*2^128 + 1188737277*2^192,13084363609298408960 + 17748565219268353514*2^64 + 3754832657261194398*2^128 + 895607321*2^192,16182534969722408692 + 969766293075704704*2^64 + 5885838872538361753*2^128 + 358420379*2^192,13595887058239690740 + 13653687895608517835*2^64 + 3814174192120796892*2^128 + 1909427512*2^192,2785517343978975596 + 6539157859439530329*2^64 + 6446179731603623536*2^128 + 1883012053*2^192,9739961809132762000 + 15073561407141643262*2^64 + 15970196317614765418*2^128 + 108810602*2^192,13034938926299432264 + 6097380774362422434*2^64 + 14838998310610800419*2^128 + 329001838*2^192;\
16531835977858809538 + 15390255049420136053*2^64 + 13925516580589891250*2^128 + 820605624*2^192,16182057811192168996 + 12974698926260489858*2^64 + 11978899237703487108*2^128 + 1007133540*2^192,9974967533702075072 + 1205231521364394339*2^64 + 13457767285172653329*2^128 + 446092575*2^192,5752274296118157984 + 2171566967847166274*2^64 + 5286322468190935409*2^128 + 1061330978*2^192,10807218485381942008 + 11964975834351214955*2^64 + 2725528162540398384*2^128 + 240341888*2^192,17968425606231308264 + 4570288689229620878*2^64 + 1840034945179501833*2^128 + 522090234*2^192,16903423170970844312 + 12397369870739069816*2^64 + 13997874584720793962*2^128 + 591986642*2^192,8812243281127484400 + 11397176869716579463*2^64 + 4854678035738251567*2^128 + 868692168*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5136 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 2*x^6 - 4*x^5 + 16*x^3 + 32*x^2 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 2*x^2 - 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 28

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^5 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 
Look at the ideal generated by: 
1*x^2*y^2 + 1*x^1*z^1*w^1 + 1*y^4
1*x^3*w^1 + 1*x^1*y^2*w^1 + 1*y^2*z^2 + 1*z^1*w^2
