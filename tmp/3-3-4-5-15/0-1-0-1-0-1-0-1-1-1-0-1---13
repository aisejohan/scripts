/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 44
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 0, 1, 2, 0]  	17	2 
[1, 5, 0, 0, 0]  	18	5 
[3, 2, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	6 
[1, 3, 0, 2, 0]  	22	4 
[2, 4, 0, 1, 0]  	23	3 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[2, 2, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	4 
[2, 1, 0, 2, 1]  	19	4 
[1, 4, 0, 1, 1]  	20	4 
[1, 2, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	4 
[3, 0, 0, 2, 2]  	19	4 
[2, 0, 0, 3, 2]  	21	5 
[0, 1, 2, 3, 2]  	26	2 
[0, 5, 0, 0, 254]  	15	3 
[0, 3, 0, 2, 254]  	19	3 
[0, 0, 4, 2, 254]  	26	1 
[1, 3, 0, 0, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	2 
[1, 1, 0, 2, 255]  	16	3 
[0, 2, 0, 2, 255]  	16	2 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8750730134714854136 + 5879303607184276498*2^64 + 5827488227498035141*2^128 + 7748983617*2^192,8030452520420181536 + 1097915408117072855*2^64 + 7035807868756770123*2^128 + 3632948501*2^192,6036868764228353872 + 16134777270716564832*2^64 + 11511832715735535071*2^128 + 942987230*2^192,8717410436229337776 + 13682722216430029999*2^64 + 9781525659051263733*2^128 + 7857017179*2^192,11052937353165654448 + 14046143142601212995*2^64 + 12831775225343814143*2^128 + 5291271640*2^192,2637492482650074992 + 6024727553254254045*2^64 + 5770972151911621722*2^128 + 1652790748*2^192,6427087911586000048 + 12355803992407801364*2^64 + 2286185302058477506*2^128 + 7148805404*2^192,7910607352684879040 + 1370163665851064281*2^64 + 5000996656964735153*2^128 + 1983499895*2^192;\
152434420166413604 + 1971210664593935939*2^64 + 16612796034850513876*2^128 + 960950042*2^192,17481167901834124672 + 11125441540280401439*2^64 + 15184871274832489835*2^128 + 2061650068*2^192,13693208587984286584 + 2523518558529325358*2^64 + 5455692728028482032*2^128 + 1757334593*2^192,18328275728858974792 + 10762764814692813427*2^64 + 7571491566108021274*2^128 + 3094021974*2^192,2033706554157942776 + 17140311285317785587*2^64 + 12676427024330621438*2^128 + 2527848216*2^192,3702336477081474360 + 13244883871001648262*2^64 + 9932073311546581122*2^128 + 181963223*2^192,13477982153547307400 + 4741494534380988896*2^64 + 4738763043014646993*2^128 + 694589480*2^192,6012293286624096 + 8110488431798534993*2^64 + 3816627709580543323*2^128 + 3301356976*2^192;\
3644205585268792762 + 14245836938873103597*2^64 + 17872685235720370152*2^128 + 2056274289*2^192,13740151515470510008 + 5211341970308931724*2^64 + 8072498689316015707*2^128 + 7663601804*2^192,3641983914041441996 + 16861379069766072045*2^64 + 12610321681830937215*2^128 + 8272699162*2^192,2072469323415533196 + 10943891428280885477*2^64 + 4697209362255014493*2^128 + 2690319444*2^192,13505026959755073340 + 11139645415782773011*2^64 + 3573830372682286360*2^128 + 7185984445*2^192,15076767824879826076 + 13994590888800835406*2^64 + 384436707183155856*2^128 + 7207004855*2^192,14875487935495232580 + 7021372921172289249*2^64 + 5901162656459699447*2^128 + 351288335*2^192,9010456823314541024 + 2977983590677927433*2^64 + 4399534861484025950*2^128 + 5259474287*2^192;\
13652146131092243776 + 10533363525856310365*2^64 + 12353601309196181087*2^128 + 2760154231*2^192,1628162546867140800 + 15560869276355455022*2^64 + 6873513961144204876*2^128 + 1386579446*2^192,16638361763409683456 + 16121560936962879330*2^64 + 10109661574634556540*2^128 + 2118289226*2^192,16297293243840110464 + 2777224911141468795*2^64 + 766964129861166166*2^128 + 717484276*2^192,1553700473133664064 + 17979484003863680488*2^64 + 3272582142589749469*2^128 + 4274731056*2^192,459666936509338560 + 15887389205372970827*2^64 + 3020519032947964927*2^128 + 4173679697*2^192,5646765232578895200 + 13383745343405624849*2^64 + 13754453734993102391*2^128 + 4263058656*2^192,6290403153495828832 + 4082489143908433526*2^64 + 7598806730822031692*2^128 + 3873990831*2^192;\
2671222240011076875 + 12045304519087150600*2^64 + 6565269830721173903*2^128 + 4011819671*2^192,7648386260933715144 + 3936499805139064377*2^64 + 13895381904698915676*2^128 + 6197506176*2^192,2659906856139310854 + 1817979219304960144*2^64 + 10566897430308409594*2^128 + 7139474328*2^192,11341901904413633738 + 15047281633998336820*2^64 + 17337027632376101759*2^128 + 492780720*2^192,13255189683682370950 + 8404197171944952140*2^64 + 6032917909963641010*2^128 + 4037214413*2^192,10864867945842923014 + 6904739267266911867*2^64 + 912243102140422712*2^128 + 541962341*2^192,1172682023017086562 + 16739971339569057061*2^64 + 13934927257509218988*2^128 + 1656610824*2^192,4794043289871077728 + 14737381283947017580*2^64 + 6604331392304100892*2^128 + 199680894*2^192;\
6668222019792234251 + 6647421239875972984*2^64 + 12323988368005122582*2^128 + 4503770095*2^192,9106307243558921224 + 13815244790876524732*2^64 + 17815330514589120235*2^128 + 504432309*2^192,12918186572468572438 + 13906597446600160411*2^64 + 16778186212209794765*2^128 + 5317719105*2^192,6241833788772637882 + 10122848172629215422*2^64 + 11135940929311142340*2^128 + 5319872112*2^192,11911414196760959654 + 8216426633695015988*2^64 + 10286397331208190620*2^128 + 7868216301*2^192,1362395701087493958 + 16900226574837882005*2^64 + 14763365686730212528*2^128 + 8242356465*2^192,8469627952870000498 + 17886792592948429429*2^64 + 9980485128274352767*2^128 + 5106180071*2^192,7956840678070025376 + 64354611109048094*2^64 + 1147803044523484365*2^128 + 6840664636*2^192;\
5155220908342009028 + 5009546291988583518*2^64 + 12858885362822385719*2^128 + 2693201782*2^192,2367164057164296600 + 8821782628907814598*2^64 + 12858943424095377312*2^128 + 4294777863*2^192,5102753728234859232 + 15114541230771102500*2^64 + 4117154568776760770*2^128 + 2836169503*2^192,16115683518584039896 + 9109775023285544372*2^64 + 14698370044812196713*2^128 + 6148166963*2^192,14421472327629767504 + 4955107518359489376*2^64 + 14667195389304555495*2^128 + 7845138312*2^192,9124614749596973552 + 7925346673878089064*2^64 + 16420886397742525344*2^128 + 4465240958*2^192,4268138950176255744 + 171634101328252820*2^64 + 5321487087205769402*2^128 + 6801366544*2^192,7152035551957526880 + 13067302922038690739*2^64 + 15537859136012609283*2^128 + 8074578918*2^192;\
3627588100566577476 + 9012218393822905727*2^64 + 14647134887493119601*2^128 + 2150942857*2^192,7791278704075328888 + 4501417459711666327*2^64 + 13956332867390766635*2^128 + 8472508901*2^192,8701857853352546240 + 3904016024276894976*2^64 + 11052780254120572907*2^128 + 1696592483*2^192,11502893654518552296 + 446105788333980953*2^64 + 5449535737329584718*2^128 + 4832044070*2^192,7775447055079883056 + 10453455087996353724*2^64 + 12924847750935012938*2^128 + 7670969985*2^192,9042909567880148176 + 16687412116853038888*2^64 + 14529732711988226648*2^128 + 884924411*2^192,9037515784532525472 + 18264859363255784304*2^64 + 1939323521505562915*2^128 + 241605199*2^192,4165973143518324064 + 11066652624356838909*2^64 + 9377637554788796598*2^128 + 799603680*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4296 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 30
