/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 52
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[1, 0, 3, 0, 0]  	15	3 
[1, 3, 1, 0, 0]  	16	7 
[1, 3, 0, 1, 0]  	17	6 
[2, 4, 0, 0, 0]  	18	7 
[1, 5, 0, 0, 0]  	18	7 
[1, 0, 0, 3, 0]  	18	2 
[1, 2, 0, 2, 0]  	19	6 
[1, 1, 2, 1, 0]  	19	6 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	4 
[1, 0, 2, 2, 0]  	21	5 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 2, 1, 0]  	22	4 
[0, 3, 1, 2, 0]  	23	4 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 0, 3, 0]  	24	5 
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 2, 2, 3, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 2, 1, 3, 1]  	25	2 
[0, 2, 0, 4, 1]  	26	3 
[3, 1, 0, 0, 2]  	12	6 
[2, 3, 0, 0, 2]  	15	3 
[1, 1, 0, 2, 2]  	16	6 
[1, 2, 2, 0, 2]  	17	6 
[0, 2, 1, 2, 2]  	20	4 
[0, 6, 1, 0, 2]  	22	3 
[0, 2, 3, 1, 2]  	23	3 
[0, 5, 1, 0, 3]  	19	5 
[0, 1, 2, 3, 6]  	26	2 
[0, 0, 4, 2, 249]  	26	1 
[0, 3, 0, 2, 253]  	19	4 
[1, 0, 1, 1, 254]  	12	3 
[1, 4, 0, 0, 254]  	15	2 
[0, 0, 5, 0, 254]  	20	2 
[0, 1, 1, 3, 255]  	22	2 
[0, 0, 3, 2, 255]  	22	1 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 7 and 248.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8201350084745523632 + 9171868290830066906*2^64 + 7401170314398200444*2^128 + 169997343*2^192,15708267822382542200 + 12484707564814137077*2^64 + 14462124635314262577*2^128 + 4131576527*2^192,16966684380956664488 + 11892116028008731209*2^64 + 9853623343649009226*2^128 + 1606292215*2^192,10047826468297374296 + 11116844083316507691*2^64 + 15163428082961510077*2^128 + 4270611095*2^192,16505868213193649392 + 8032515709679674039*2^64 + 31541799083739120*2^128 + 3024806378*2^192,18196505942084588480 + 7944331431196014064*2^64 + 9635327439788680284*2^128 + 1087521898*2^192,2672645312770153640 + 16666258828752460564*2^64 + 16558367162025963826*2^128 + 1761795127*2^192,6241126360105081616 + 5518427502868454855*2^64 + 5879955182234905290*2^128 + 2665207019*2^192;\
1412866215957500445 + 8361550963286053838*2^64 + 2645822018265709068*2^128 + 1981818606*2^192,15192707045763667628 + 2937914982590859915*2^64 + 794960811082875425*2^128 + 1692265552*2^192,13326632929702900108 + 3864214037831814266*2^64 + 11648329987729478616*2^128 + 2705298547*2^192,13992664672316478144 + 9427888596610347401*2^64 + 10082974845544118940*2^128 + 1576694860*2^192,1245118991651274876 + 14302450687714351359*2^64 + 15128376341432684111*2^128 + 2184865154*2^192,10643244897572053954 + 8064771820715810496*2^64 + 4218228039294771100*2^128 + 1779858003*2^192,12424879966942291380 + 917535551243792567*2^64 + 6568570501331054648*2^128 + 1943695027*2^192,2939979430061526176 + 11551050125199083367*2^64 + 9921631993007073678*2^128 + 3463643483*2^192;\
3764652778083147244 + 16368483109866265450*2^64 + 3031123778363997368*2^128 + 2127916192*2^192,15095655993624074007 + 13308850717752970877*2^64 + 1983706154541931260*2^128 + 2077883979*2^192,16695882969414361909 + 14232765970102812521*2^64 + 1697209337870556464*2^128 + 218895317*2^192,13974839940989260833 + 17056889127946748663*2^64 + 14899994993711031207*2^128 + 826229601*2^192,1929688547302436168 + 16261183305681669888*2^64 + 3861111225037915591*2^128 + 2086524260*2^192,13475932445330907856 + 7630146727199354380*2^64 + 8736865857147962717*2^128 + 2132206279*2^192,17546564286795881965 + 4686914240898170951*2^64 + 5040258312893409756*2^128 + 1615459928*2^192,5186301271404554658 + 11122564808988387802*2^64 + 428262454333129045*2^128 + 1293077549*2^192;\
15846642681470391948 + 9569752619704611910*2^64 + 2718272991366198801*2^128 + 548680204*2^192,12848272624648642139 + 2985052159889374481*2^64 + 18375382543292990482*2^128 + 821066378*2^192,994682814989820465 + 3648135406068801307*2^64 + 4253012677811386322*2^128 + 1147203088*2^192,1459993276856484493 + 15658755165169649868*2^64 + 14652761794776507879*2^128 + 43336318*2^192,10439379400307264232 + 14642860222365958002*2^64 + 8278161168498328829*2^128 + 1529623354*2^192,1949053097689874392 + 3566861027426028738*2^64 + 8278988170836938656*2^128 + 1029942257*2^192,13662587915000096921 + 1064555805276515587*2^64 + 12182029658430258968*2^128 + 12221226*2^192,7546788236210863322 + 17243354622768011715*2^64 + 2569749480169470307*2^128 + 35810916*2^192;\
7324068334745435696 + 7505876667378644989*2^64 + 679773403877526371*2^128 + 1396129242*2^192,14919722769367153239 + 6162205995870919191*2^64 + 8518124176328636641*2^128 + 418439883*2^192,4063906913541110501 + 13317447742346790309*2^64 + 3287402258806298653*2^128 + 799579836*2^192,13944385030463988161 + 2971285037051740166*2^64 + 1249041900097438943*2^128 + 4110516781*2^192,330788736610290936 + 17750973276882550761*2^64 + 18287724622841936510*2^128 + 513450131*2^192,10270518501757700576 + 17145878740183195509*2^64 + 10978485720317882292*2^128 + 850043613*2^192,12199261054470486477 + 18067001115494334800*2^64 + 16451701123364331084*2^128 + 1069538221*2^192,11135858984931458050 + 15927943640288893295*2^64 + 15142409410380284372*2^128 + 348526352*2^192;\
9317578104303620848 + 4811833263196652435*2^64 + 9567538200175529201*2^128 + 2449165160*2^192,18075387785620460944 + 10147326648048861353*2^64 + 15297418307749229268*2^128 + 1064638595*2^192,3819934887047974952 + 2320106810376249837*2^64 + 4846505657322816248*2^128 + 303978265*2^192,6439720566584780792 + 9880978326897161126*2^64 + 3366199581226200130*2^128 + 987562034*2^192,12728403373463926432 + 10837891707262475879*2^64 + 2198991871630424346*2^128 + 200392828*2^192,11464349643315273552 + 6570666331666426503*2^64 + 5360665992836454941*2^128 + 3900498861*2^192,16829352613516493616 + 9368163910854320780*2^64 + 8686923241645925267*2^128 + 3429354977*2^192,16939638735832448352 + 14806658975260721895*2^64 + 18369220420071643684*2^128 + 121756339*2^192;\
15022786988268327341 + 9144428737798222186*2^64 + 13296676598900070173*2^128 + 482682444*2^192,17894486015585151492 + 682574202203637194*2^64 + 3433427079040842741*2^128 + 2046691241*2^192,16514700068105374892 + 399007492633533272*2^64 + 3364518512769539474*2^128 + 339286931*2^192,6873634067727600040 + 4598490350128640744*2^64 + 8949833010050501438*2^128 + 1851917182*2^192,4665667275906697620 + 8061462393631371130*2^64 + 508202251482767334*2^128 + 607488972*2^192,2476391826273297682 + 2709660487260777222*2^64 + 10194319582534157916*2^128 + 838704926*2^192,2031552181304339452 + 12574101717277773215*2^64 + 6308424981689347339*2^128 + 1874719626*2^192,17790337930969377792 + 9858841726934551305*2^64 + 10851222563170149919*2^128 + 1980765074*2^192;\
1650172125322565212 + 14979989659780717750*2^64 + 17547085681164644647*2^128 + 2868000748*2^192,4053942381415157919 + 8255596057154415834*2^64 + 17049753882961639348*2^128 + 2165667219*2^192,16257028303200289661 + 3660134422302039358*2^64 + 5159604972091287762*2^128 + 69597222*2^192,9030753447949678425 + 17901390247883130991*2^64 + 8389615456982487504*2^128 + 478999260*2^192,13264917589607146696 + 497988772811418861*2^64 + 16316842125720166100*2^128 + 3589688864*2^192,8169049853566814656 + 10841707781472279418*2^64 + 9957523528477164424*2^128 + 4002564948*2^192,14564950098038655493 + 3123409018321027985*2^64 + 16988228274278392518*2^128 + 45038898*2^192,10953972942459255202 + 14362131813262359392*2^64 + 1991684567626931577*2^128 + 4004008114*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5276 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 4*x^5 + 16*x^3 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 4*x + 16, 1]
The valuation of f-g is: 27
The valuation of subst(g,x,A) is: 25

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
Look at the ideal generated by: 
1*x^2*y^1 + 1*x^1*y^2 + 1*z^1*w^1
1*x^2*w^1 + 1*y^2*w^1 + 1*y^1*z^2
