/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	5 
[2, 3, 0, 0, 0]  	15	5 
[1, 0, 1, 2, 0]  	17	3 
[3, 0, 0, 2, 0]  	19	5 
[2, 1, 0, 2, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[2, 0, 0, 3, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	4 
[1, 2, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 5, 0, 0, 1]  	18	5 
[0, 5, 0, 1, 1]  	20	3 
[1, 3, 0, 2, 1]  	22	3 
[0, 3, 0, 3, 1]  	24	3 
[3, 1, 0, 0, 2]  	12	4 
[0, 1, 5, 0, 3]  	23	3 
[1, 1, 0, 3, 253]  	21	5 
[0, 1, 0, 4, 253]  	23	2 
[2, 2, 0, 0, 254]  	12	3 
[2, 0, 0, 2, 254]  	16	3 
[1, 0, 0, 3, 255]  	18	4 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[12181237911283945978 + 9807911265320899031*2^64 + 17927295124758369965*2^128 + 36596066*2^192,1619499199506499906 + 12252959730240104258*2^64 + 2690514665069973104*2^128 + 586135195*2^192,1203610486114062146 + 16813137353897611731*2^64 + 375254823887078833*2^128 + 840326830*2^192,9085614031125278644 + 6354358144341027882*2^64 + 13157190572995014107*2^128 + 383964520*2^192,3422837897505281508 + 5016467191529611767*2^64 + 13591754075980937970*2^128 + 1044162776*2^192,14614440939378049668 + 6411892108360156130*2^64 + 15363274756532356341*2^128 + 396479008*2^192,8593847716151873158 + 1400221898961294683*2^64 + 5907263708277103594*2^128 + 1026076144*2^192,17778345319476695672 + 11873790715160082663*2^64 + 11061130637161523247*2^128 + 51778540*2^192;\
4856123451364322743 + 15225559091455013097*2^64 + 8182645518040201919*2^128 + 477457913*2^192,13920715872150818329 + 12500981181120872281*2^64 + 11237648023874616591*2^128 + 429285720*2^192,16545542380403872051 + 2476396407285857223*2^64 + 15558652144628280033*2^128 + 254027592*2^192,16551646591584865548 + 1649685714067514077*2^64 + 1197494116493409177*2^128 + 205039034*2^192,10309161108871605290 + 5316460537697820335*2^64 + 3151071675934556626*2^128 + 173192266*2^192,3254949372834557440 + 13279999496450401593*2^64 + 10816751520637919247*2^128 + 41295439*2^192,6216383309084935399 + 307409915564670271*2^64 + 8316062453068927218*2^128 + 322172241*2^192,15271850804718325348 + 5922428799940989635*2^64 + 13585234720909413056*2^128 + 94344783*2^192;\
1573577153189436672 + 5884889371804140099*2^64 + 1464216749936446722*2^128 + 816851751*2^192,15496395006322490033 + 3676928262899607173*2^64 + 8748546340107206401*2^128 + 744335998*2^192,12289130096728244295 + 12730108942121785890*2^64 + 5846058992802554046*2^128 + 664846674*2^192,3303011944968884336 + 10339452454858245926*2^64 + 3881783751644232123*2^128 + 153539674*2^192,9333042479180247544 + 10360710924402158224*2^64 + 3479303341038826372*2^128 + 738229364*2^192,1151766803827751708 + 4915379246593131149*2^64 + 2223407726082736567*2^128 + 1003911292*2^192,1495133360949907991 + 9070564656050910739*2^64 + 17344214689463245553*2^128 + 25811786*2^192,4458771997075788292 + 5158732949030178075*2^64 + 4676284238221762774*2^128 + 226950793*2^192;\
15527524771076108624 + 9868407608966962241*2^64 + 4064223637192420868*2^128 + 483929840*2^192,14245122138750504532 + 539661158716205556*2^64 + 2774266602081518783*2^128 + 172331980*2^192,15682594442039621788 + 242505716649098724*2^64 + 11697499775188190411*2^128 + 31616771*2^192,1923490726969158472 + 8040466390628878228*2^64 + 9990138792711916720*2^128 + 43557014*2^192,11750600241715499872 + 8197261844496354115*2^64 + 15024936798647556869*2^128 + 435500598*2^192,9918515929654756568 + 10709453740048471144*2^64 + 693989120232632817*2^128 + 532292385*2^192,3895658724505344992 + 6780939395065028732*2^64 + 11380140336562605844*2^128 + 460450503*2^192,14805010266870496732 + 16715052810582378729*2^64 + 4860842624216492421*2^128 + 383121110*2^192;\
15009283088348065258 + 12201984550025580895*2^64 + 10622045223848749546*2^128 + 146359678*2^192,15030538844906166421 + 18410349867608368699*2^64 + 9931757829244980242*2^128 + 1014049787*2^192,16110821885401949581 + 15198176540592749381*2^64 + 4927144872166886143*2^128 + 775404369*2^192,17333411604725168778 + 6657915589700792986*2^64 + 14884691801462788887*2^128 + 448567458*2^192,5544794900022867402 + 6972449325442745081*2^64 + 15801324575808069636*2^128 + 868207195*2^192,14890358284177884518 + 13982595006697895997*2^64 + 5542436516229378145*2^128 + 313781630*2^192,9795025675448212667 + 2647595903147353714*2^64 + 11493532033255410779*2^128 + 742021667*2^192,9823041217715758304 + 4581892447531472753*2^64 + 1126163838124693130*2^128 + 161807153*2^192;\
7945327469139047550 + 3708794518600888929*2^64 + 7096248201694651019*2^128 + 655259763*2^192,2160761676283073548 + 15225663862587180326*2^64 + 6762674026030508921*2^128 + 813902259*2^192,13906548478425985112 + 6980485990316459416*2^64 + 2032074643743898235*2^128 + 870879336*2^192,7552960107700679830 + 10980720377451309023*2^64 + 16872592370257833178*2^128 + 964179737*2^192,16592766572891940744 + 15383299167331232746*2^64 + 10031381045063696864*2^128 + 511424763*2^192,17017088506587829392 + 9530594828346174733*2^64 + 15942294451566489372*2^128 + 846964388*2^192,7211727919321934328 + 15493658591327167098*2^64 + 6913792480883326376*2^128 + 46715416*2^192,16728135901386955392 + 2213900099719224869*2^64 + 15491491785948265380*2^128 + 179976299*2^192;\
13151657692340161990 + 12858236612016763177*2^64 + 14474427293438601514*2^128 + 643311460*2^192,8152588367990844620 + 1892944318252118841*2^64 + 11971876136626354652*2^128 + 139526317*2^192,2807390779670939790 + 2810101484675225857*2^64 + 9474828412237440585*2^128 + 319576569*2^192,424358931005764738 + 475474994693342580*2^64 + 7332059645146075469*2^128 + 182347775*2^192,4760891524497939426 + 18349844793229695490*2^64 + 15314874375995296162*2^128 + 351945440*2^192,13783306983062427682 + 13724079485012636603*2^64 + 9733806182291540298*2^128 + 297443334*2^192,11190046260579882526 + 17068866615191090387*2^64 + 9606411654476976489*2^128 + 703251065*2^192,4877314705705092056 + 13798242879898225866*2^64 + 9825691423844760781*2^128 + 628597956*2^192;\
15080505048354973097 + 13999028489308645035*2^64 + 1650995521908952905*2^128 + 960714669*2^192,10480219282175109554 + 2906374543269804269*2^64 + 7651432393115396481*2^128 + 785987893*2^192,18439393139215760830 + 17069567826780710667*2^64 + 5636139347994225852*2^128 + 817252476*2^192,2304262451718936530 + 1131368015218611001*2^64 + 17412571477631395303*2^128 + 395226374*2^192,4034310239758027606 + 6077106454434179218*2^64 + 5572657531347296600*2^128 + 1962711*2^192,4611938464993353194 + 5849685370189181096*2^64 + 5690564855893101605*2^128 + 1036879519*2^192,1701382991767080886 + 14783465019622378234*2^64 + 323511902704066954*2^128 + 732953029*2^192,17043327219919393768 + 8761404340951417204*2^64 + 11419682198854843168*2^128 + 160828871*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 4374 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 2*x^7 + 4*x^5 - 16*x^3 + 128*x - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 2*x^5 + 4*x^4 - 4*x^3 + 16*x^2 - 32*x + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 37

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^1*z^3 + 1*y^5 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
