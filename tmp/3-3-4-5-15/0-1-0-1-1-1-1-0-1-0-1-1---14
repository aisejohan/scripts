/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 50
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[0, 1, 3, 0, 0]  	15	2 
[1, 5, 0, 0, 0]  	18	6 
[1, 4, 1, 0, 0]  	19	6 
[1, 0, 4, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[1, 1, 1, 2, 0]  	20	4 
[1, 0, 3, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	7 
[1, 2, 2, 1, 0]  	22	4 
[1, 0, 1, 3, 0]  	22	4 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	5 
[1, 3, 1, 0, 1]  	16	6 
[1, 1, 0, 2, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	6 
[1, 2, 2, 0, 1]  	17	6 
[1, 1, 2, 1, 1]  	19	5 
[1, 0, 2, 2, 1]  	21	6 
[0, 3, 1, 2, 1]  	23	3 
[0, 0, 5, 1, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[0, 2, 1, 3, 2]  	25	3 
[0, 2, 0, 4, 2]  	26	2 
[0, 0, 0, 5, 253]  	25	1 
[0, 5, 0, 0, 254]  	15	2 
[0, 0, 4, 2, 254]  	26	1 
[1, 3, 0, 0, 255]  	12	4 
[0, 4, 0, 0, 255]  	12	2 
[1, 0, 2, 1, 255]  	16	2 
[1, 0, 1, 2, 255]  	17	2 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 8 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 6.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[16331508651880493656 + 15747342354353311302*2^64 + 4509759232831030618*2^128 + 7471779077*2^192,10128408064315130016 + 13717534007509014206*2^64 + 10581529363297338477*2^128 + 12210872574*2^192,6474454466292990240 + 523351948156192462*2^64 + 758090327847726124*2^128 + 9994648598*2^192,17905592551011096240 + 10507737277787955181*2^64 + 10428708382018684834*2^128 + 7131396913*2^192,17280108283734310592 + 9626338144255680616*2^64 + 14618160500969366539*2^128 + 6493051258*2^192,836124771583667072 + 13669233587168150672*2^64 + 4308581381330536449*2^128 + 9856519648*2^192,13447744519873847976 + 7394019435082347844*2^64 + 5787775756884126378*2^128 + 14272910282*2^192,9585846085602245536 + 7673881973748555266*2^64 + 16208050142637291078*2^128 + 13029922255*2^192;\
9672166415033944402 + 14770328965181047660*2^64 + 12604859537449302826*2^128 + 14138604326*2^192,8843455805576267080 + 8418024352782164753*2^64 + 2393414434852555482*2^128 + 13404104952*2^192,16849523714536760264 + 16523428601961319689*2^64 + 12454357310521431932*2^128 + 12242823058*2^192,5510132187360225204 + 6725209521839572259*2^64 + 3978095548876819280*2^128 + 9245974134*2^192,1537354835919453952 + 8017154516344332464*2^64 + 8441680975219974057*2^128 + 11995659782*2^192,16592095303979912816 + 422465058183858675*2^64 + 1996276632438388148*2^128 + 5496624389*2^192,9984129653981943206 + 6929046246032253994*2^64 + 5676891146450613273*2^128 + 15756181353*2^192,423262184230917752 + 1379615149138256149*2^64 + 18400947284839490448*2^128 + 10800030934*2^192;\
1051741066218394886 + 8360446561690713394*2^64 + 9315146402075279721*2^128 + 11336329704*2^192,275557749201050616 + 4981653518409137156*2^64 + 8079481673151369703*2^128 + 9672706135*2^192,10580386960419844088 + 10295730629277552429*2^64 + 15989067566422615778*2^128 + 1294044280*2^192,5161389643896567164 + 9939673062308028082*2^64 + 16275877848130569935*2^128 + 12327769494*2^192,18172298801087750144 + 2741384998990447696*2^64 + 8264809101599608146*2^128 + 12823449359*2^192,15358863177477136848 + 958465070087571570*2^64 + 13071822807451024523*2^128 + 14285164437*2^192,4826912201669251170 + 17408914668669615355*2^64 + 13900866113859239282*2^128 + 3188841979*2^192,6091216198783062184 + 14805798163720725230*2^64 + 7720815424457610937*2^128 + 17123003427*2^192;\
0 + 0*2^64 + 0*2^128 + 6979321856*2^192,0 + 0*2^64 + 0*2^128 + 8455716864*2^192,0 + 0*2^64 + 0*2^128 + 4697620480*2^192,4109316406917464096 + 2503503676642762098*2^64 + 4937555828998460857*2^128 + 1928647547*2^192,0 + 0*2^64 + 0*2^128 + 5637144576*2^192,0 + 0*2^64 + 0*2^128 + 939524096*2^192,0 + 0*2^64 + 0*2^128 + 4697620480*2^192,0 + 0*2^64 + 0*2^128 + 4026531840*2^192;\
9470640767023366709 + 10115255995834249837*2^64 + 18433837342564055273*2^128 + 14362650229*2^192,7029250265464383116 + 8707395463722196126*2^64 + 10029359195765373514*2^128 + 1624494374*2^192,18087473046867952092 + 3327646057324731371*2^64 + 5059259927739427465*2^128 + 15065505233*2^192,3404504211957440362 + 6813076345721709169*2^64 + 6204747872062243911*2^128 + 11588669547*2^192,9038129186348850992 + 18128201202413259472*2^64 + 12152574963819233586*2^128 + 13070217902*2^192,9265650503391071624 + 2198162051247038906*2^64 + 15091155002031389542*2^128 + 14413208218*2^192,6786679658524570395 + 14405002308924794283*2^64 + 11873033741288891857*2^128 + 8891513806*2^192,12598151721604465132 + 10893308065747865411*2^64 + 7196183094420771493*2^128 + 13544625813*2^192;\
15377614859961127005 + 14017428532323843775*2^64 + 5595738690778062299*2^128 + 5494971937*2^192,17180363340462066828 + 14126988390843560546*2^64 + 231597934357620304*2^128 + 2356503679*2^192,908747718647766620 + 13146451835959553173*2^64 + 7680680382886179587*2^128 + 6586366164*2^192,10139549438636890554 + 16234223767930898032*2^64 + 17180858800300002533*2^128 + 3218592024*2^192,18003996892881735408 + 14498874825845083874*2^64 + 13618058890101773231*2^128 + 4470098719*2^192,6854176340375359880 + 5758687324749375955*2^64 + 13904158565983390791*2^128 + 2785733279*2^192,18355182452959628499 + 17621180225348500146*2^64 + 15543706195914073720*2^128 + 4767681280*2^192,16560095920244926092 + 18164044851353911437*2^64 + 9038587541426504527*2^128 + 681186700*2^192;\
17676778498685812064 + 12269325414108495966*2^64 + 17946387357487319327*2^128 + 9528926748*2^192,8189914514345028064 + 15332966667906647331*2^64 + 343629863011584046*2^128 + 10553010610*2^192,13075396375089023392 + 17723339397060855601*2^64 + 900200785145822922*2^128 + 1353834048*2^192,5645305934076407360 + 15804164393018884702*2^64 + 13396353112583464483*2^128 + 1117041893*2^192,10312016244920559520 + 8220389180003458658*2^64 + 12212629032269824622*2^128 + 12076747522*2^192,11299550186963359712 + 9619021465154573815*2^64 + 15620697316423320293*2^128 + 1191925989*2^192,3086576603034298256 + 14467881634783597885*2^64 + 13404608903339309832*2^128 + 181830841*2^192,3778475916768182080 + 7142219316379724415*2^64 + 8604099431424532311*2^128 + 219532435*2^192;\
8815640194029345756 + 1435041243029080084*2^64 + 7047783251513069100*2^128 + 9892654639*2^192,802374574891370496 + 7401044124591504622*2^64 + 7517608729163098929*2^128 + 6404143870*2^192,13302869426677342816 + 8628996377284503469*2^64 + 5265093643888377540*2^128 + 1731265334*2^192,2840845550037045512 + 2687058893809913425*2^64 + 5614402805301108483*2^128 + 10959763102*2^192,16977738995486380000 + 7447390758194291051*2^64 + 17762502514060373555*2^128 + 10708640735*2^192,10182835494798122624 + 10609521424546675002*2^64 + 8905930355393673197*2^128 + 4402528027*2^192,17042328350801722332 + 8848502724873783719*2^64 + 18377199259189461225*2^128 + 2579080207*2^192,8402627189663645712 + 6184457654179445082*2^64 + 13881558295708111447*2^128 + 3052619067*2^192]
/* 
This matrix times 2^(-4) should be the matrix of frobenius.
*/ 
B = 2^(-4) * A; 
/* Freed 4204 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 4*x^6 + 16*x^4 - 64*x^2 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + x^3 - 2*x^2 + 4*x + 16, 1]
The valuation of f-g is: 26
The valuation of subst(g,x,A) is: 22

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*y^5 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
