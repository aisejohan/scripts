/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 54
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[3, 2, 0, 0, 0]  	15	4 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	2 
[1, 2, 2, 0, 0]  	17	6 
[1, 0, 0, 3, 0]  	18	3 
[1, 4, 1, 0, 0]  	19	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	4 
[1, 1, 1, 2, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	7 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[0, 6, 0, 1, 0]  	23	4 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 0, 3, 0]  	24	4 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 3, 1, 0, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	6 
[1, 5, 0, 0, 1]  	18	6 
[0, 5, 0, 1, 1]  	20	4 
[0, 3, 2, 1, 1]  	22	4 
[0, 3, 4, 0, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[0, 5, 1, 0, 2]  	19	5 
[1, 0, 2, 2, 2]  	21	5 
[0, 2, 3, 1, 2]  	23	3 
[1, 1, 0, 2, 3]  	16	5 
[2, 2, 0, 0, 254]  	12	4 
[0, 2, 0, 2, 254]  	16	2 
[1, 0, 2, 1, 255]  	16	4 
[0, 4, 1, 0, 255]  	16	4 
[1, 0, 1, 2, 255]  	17	2 
[0, 6, 0, 0, 255]  	18	2 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[1506109878249389858 + 800996215021165817*2^64 + 14523500562186962331*2^128 + 393236590*2^192,6366543771425788762 + 7806777059620731548*2^64 + 9760726234631050688*2^128 + 268591416*2^192,14883608524001343490 + 13863292804691405549*2^64 + 16838772826774929067*2^128 + 765039130*2^192,2062764235337185322 + 2785368477033082486*2^64 + 2802396226658831543*2^128 + 803047401*2^192,18394022935242934994 + 90103471997265187*2^64 + 10341079483606629687*2^128 + 90747102*2^192,7928422823443382582 + 3166525038701334747*2^64 + 5651253504211884037*2^128 + 91445659*2^192,16954057163435716290 + 7111463134957978338*2^64 + 2734226163516711918*2^128 + 315349315*2^192,5879347543227709932 + 14512037429648559431*2^64 + 3528821692196691550*2^128 + 458576068*2^192;\
13328517651610302379 + 9341554702038900646*2^64 + 15390890176707782851*2^128 + 507681258*2^192,7170569507151586165 + 16302677733080706753*2^64 + 12686164987425119586*2^128 + 387462554*2^192,12342492983417643741 + 621059444734517811*2^64 + 8200856109305606396*2^128 + 28147072*2^192,3756134952875961895 + 226708460475983805*2^64 + 7456513042583964307*2^128 + 1016152148*2^192,8604991858444882859 + 5814403861694451500*2^64 + 7123111824738923009*2^128 + 636737006*2^192,7819123450676936283 + 524637294278900962*2^64 + 17562626161709681767*2^128 + 735138295*2^192,17316454442198759743 + 8424167169674284287*2^64 + 2126487196376422549*2^128 + 271354927*2^192,2365453129579079702 + 3158571647810262861*2^64 + 6682421721780589785*2^128 + 927850271*2^192;\
15897567336732145466 + 11075562477722925617*2^64 + 8101166460510808317*2^128 + 576985158*2^192,7963851848820181556 + 16962663737324364138*2^64 + 4783934942304515317*2^128 + 556755097*2^192,17857706984330079348 + 15431475842155873801*2^64 + 9796983848816830741*2^128 + 131294900*2^192,474056498019821340 + 12770528525847000689*2^64 + 17822456849049826196*2^128 + 985094593*2^192,12926238702661671400 + 12256566644308379377*2^64 + 5019527267363405069*2^128 + 757765665*2^192,18313155869349688984 + 13270367496345847964*2^64 + 4884478491948510285*2^128 + 10641777*2^192,11330622379847290180 + 11126490611907687372*2^64 + 5316096629161598822*2^128 + 735450116*2^192,9806043847285586596 + 12030843176915845122*2^64 + 10053709706397860979*2^128 + 496498081*2^192;\
1515935503613393250 + 353988621728424572*2^64 + 9345665305598348205*2^128 + 358494968*2^192,16792189708671805352 + 4983855479856565221*2^64 + 5683990506822399183*2^128 + 456202711*2^192,17238669288710260434 + 5443586701654752923*2^64 + 8741658672477051168*2^128 + 300107411*2^192,15453759984968472578 + 4602545935005500191*2^64 + 4698982588835362161*2^128 + 222472131*2^192,6771654267874836924 + 16960144310221155768*2^64 + 11656646759968436727*2^128 + 517788087*2^192,17733417001078274966 + 817470827127526896*2^64 + 1775189386291399510*2^128 + 422727435*2^192,3740236801031412824 + 4574791543791838861*2^64 + 17511152215439410449*2^128 + 429233068*2^192,9639429898762914508 + 2214551089928934338*2^64 + 2014389734703699876*2^128 + 1035667004*2^192;\
7358099879371394172 + 5629390803030988047*2^64 + 3711557695036591862*2^128 + 59767483*2^192,3121185369681907697 + 17451985441524868329*2^64 + 12084949636993781472*2^128 + 244163224*2^192,13504571648641688535 + 6098629214190293008*2^64 + 6066252198872117200*2^128 + 745734604*2^192,13735681530792509109 + 7630430531232328965*2^64 + 1823513720013734837*2^128 + 264379840*2^192,3665199542669447181 + 12470432090097968327*2^64 + 10281696261765685297*2^128 + 711526498*2^192,7447154915411640501 + 4496385561707139108*2^64 + 10031013856849878908*2^128 + 841592908*2^192,1091986735985518653 + 16402646245339346171*2^64 + 1525094905469221415*2^128 + 376101690*2^192,558388275050720014 + 3881109474911906477*2^64 + 9169847333662584963*2^128 + 621487537*2^192;\
1515935503613393250 + 353988621728424572*2^64 + 9345665305598348205*2^128 + 383660792*2^192,16792189708671805352 + 4983855479856565221*2^64 + 5683990506822399183*2^128 + 292624855*2^192,17238669288710260434 + 5443586701654752923*2^64 + 8741658672477051168*2^128 + 270747283*2^192,12891084700322437120 + 12516527487463256392*2^64 + 10154992872557193237*2^128 + 9656971*2^192,6771654267874836924 + 16960144310221155768*2^64 + 11656646759968436727*2^128 + 387764663*2^192,1849348212014758808 + 11350233348379322312*2^64 + 14765923176279120049*2^128 + 551656514*2^192,3740236801031412824 + 4574791543791838861*2^64 + 17511152215439410449*2^128 + 378901420*2^192,9639429898762914508 + 2214551089928934338*2^64 + 2014389734703699876*2^128 + 591070780*2^192;\
1282122642281645004 + 15097514228363672594*2^64 + 18159034299219955916*2^128 + 887522902*2^192,4622197838538331684 + 11876846604823250144*2^64 + 1738891852501378410*2^128 + 634508658*2^192,18032883831149025550 + 4939349801601921084*2^64 + 12581466930688439040*2^128 + 1023679029*2^192,609352607750878014 + 3503326885096165484*2^64 + 14900071944983481657*2^128 + 495686847*2^192,10950231303826006224 + 10907427916610839236*2^64 + 4214267055285803680*2^128 + 651941257*2^192,10907799769693441744 + 6849729502178800316*2^64 + 2641004468946189220*2^128 + 342323399*2^192,5505371326105062334 + 7812032160948240232*2^64 + 4183319554218277893*2^128 + 805858563*2^192,5281666455330900200 + 16245931139364072544*2^64 + 17276151007335935393*2^128 + 447665371*2^192;\
795854417391190717 + 12425173275849819542*2^64 + 8605275487047497258*2^128 + 422236681*2^192,13755244754192516458 + 7741285354332053105*2^64 + 3196920995194530393*2^128 + 1044508068*2^192,13365751739109771052 + 8558638906907654976*2^64 + 13562483792817819277*2^128 + 270508785*2^192,3535692766998555334 + 12676834432389419010*2^64 + 3965510877759203051*2^128 + 771351909*2^192,4251119345125445092 + 264196674642839191*2^64 + 13110111131363454658*2^128 + 652567520*2^192,11250925469880861104 + 17249224239568008552*2^64 + 16193862527056972955*2^128 + 758082482*2^192,9585728551486559508 + 16603462148466350428*2^64 + 1028812913343588114*2^128 + 596419369*2^192,15641264301200064912 + 3145354902464102272*2^64 + 2724386643068416929*2^128 + 132160725*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 4736 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 4*x^6 - 4*x^5 + 16*x^3 + 64*x^2 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 4*x^3 + 64, 1]
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 35

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
