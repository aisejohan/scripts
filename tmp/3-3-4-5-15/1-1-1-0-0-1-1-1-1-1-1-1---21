/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 56
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	6 
[1, 0, 3, 0, 0]  	15	3 
[3, 0, 1, 1, 0]  	18	7 
[0, 1, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	7 
[0, 5, 0, 1, 0]  	20	5 
[0, 2, 1, 2, 0]  	20	3 
[2, 0, 0, 3, 0]  	21	7 
[1, 6, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[0, 5, 2, 0, 0]  	23	3 
[2, 0, 2, 2, 0]  	24	5 
[0, 4, 2, 1, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	3 
[1, 0, 1, 4, 0]  	27	4 
[1, 0, 0, 5, 0]  	28	1 
[0, 4, 4, 0, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 5, 0, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 10, 0, 0, 0]  	30	2  <--- 2
[0, 2, 6, 0, 0]  	30	2 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	7 
[2, 0, 0, 2, 1]  	16	6 
[3, 0, 2, 0, 1]  	17	6 
[2, 0, 2, 1, 1]  	19	6 
[0, 5, 1, 0, 1]  	19	5 
[0, 4, 2, 0, 1]  	20	4 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[0, 2, 3, 1, 1]  	23	3 
[0, 8, 0, 0, 1]  	24	5 
[0, 3, 4, 0, 1]  	25	2 
[0, 2, 5, 0, 2]  	26	2 
[1, 0, 2, 2, 5]  	21	6 
[0, 7, 0, 0, 252]  	21	4 
[0, 0, 4, 2, 253]  	26	1 
[0, 3, 0, 2, 254]  	19	4 
[2, 2, 0, 0, 255]  	12	3 
[0, 4, 1, 0, 255]  	16	1 
[0, 4, 0, 1, 255]  	17	1 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 6 and 251.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[12655603832408543306 + 16946173528010797340*2^64 + 8657863414918898624*2^128 + 1835380896*2^192,8082630521583858700 + 15594907295703670054*2^64 + 7965515721011502791*2^128 + 1876537967*2^192,9471030642591593192 + 13469332346759645617*2^64 + 3420446746703152326*2^128 + 692550089*2^192,4381019052364985548 + 8165110394237646931*2^64 + 11225465322633676085*2^128 + 837231849*2^192,17847681197124950320 + 5437289734786180613*2^64 + 13189488020192456125*2^128 + 1025903479*2^192,14452195253806819700 + 6763564907203858776*2^64 + 1632240582212307477*2^128 + 214301831*2^192,9915680345102743884 + 7062079332935140914*2^64 + 1078714351508565016*2^128 + 1621802490*2^192,2999203424529320608 + 9644391488392191590*2^64 + 5057556199704149204*2^128 + 1006396780*2^192;\
4106134948763174928 + 17175223115563536919*2^64 + 6998623461089439310*2^128 + 651270109*2^192,1114077084631265524 + 18273143223960078851*2^64 + 12623781075986284308*2^128 + 145998490*2^192,12900327665920432432 + 9586795464325101333*2^64 + 8961871614798662536*2^128 + 1656585920*2^192,16520409069208172780 + 3684939452319886092*2^64 + 6222818700721477317*2^128 + 276869151*2^192,15245875851822470352 + 15560251623832676909*2^64 + 1864849204257186472*2^128 + 1280406034*2^192,18402664639985673216 + 13531905591346350988*2^64 + 17397206648384881268*2^128 + 764838514*2^192,13672007187394123820 + 8904794275523694383*2^64 + 3431403448412056896*2^128 + 1927000543*2^192,174477138107918832 + 9278631882281713961*2^64 + 11254577123651925668*2^128 + 888274712*2^192;\
7535352183492336442 + 374454329257387676*2^64 + 3013837448946891576*2^128 + 1665684626*2^192,4494669169047823068 + 1889500327411465965*2^64 + 7360213623477986614*2^128 + 2095446505*2^192,13868305658041699920 + 1279147525824015859*2^64 + 4302581281708294048*2^128 + 582138339*2^192,1580515185642453928 + 18358224400862748167*2^64 + 11688173682631483862*2^128 + 1445195443*2^192,6232299488006154032 + 7813074635181090705*2^64 + 13386109292869311931*2^128 + 262741857*2^192,10513210879714394800 + 17285518206061207443*2^64 + 9221461969855569796*2^128 + 1871960547*2^192,12106560258436854700 + 12338424809714616519*2^64 + 17268675499163202194*2^128 + 1778377700*2^192,6498853961885554704 + 2706372149837512230*2^64 + 11740412377194734291*2^128 + 591868526*2^192;\
16064118704530921245 + 8981464846377959545*2^64 + 9477695377844540720*2^128 + 1051608530*2^192,16039489962636046538 + 6028555630941697202*2^64 + 14015429854893523364*2^128 + 340975021*2^192,1977352196160531664 + 15660506837068113241*2^64 + 9029051495096436261*2^128 + 1967576603*2^192,18424891369669911226 + 6130368355105900298*2^64 + 5487397008295286049*2^128 + 1822567171*2^192,5844754165831676680 + 18073849587255017597*2^64 + 104269963719272498*2^128 + 1636538523*2^192,11166445480765764182 + 16937618609323471040*2^64 + 4284461782018666915*2^128 + 2135216847*2^192,17598336451956010658 + 3534313191890025423*2^64 + 5086738621580849318*2^128 + 175189235*2^192,17006260603556833688 + 18191555314322403289*2^64 + 18298693505773090007*2^128 + 65197249*2^192;\
1105754737606931849 + 12803715671291544593*2^64 + 15883607551087328104*2^128 + 445628556*2^192,16338515103546242450 + 13032797381931123240*2^64 + 5579215480274125449*2^128 + 595868865*2^192,2900231659151772108 + 934759675378144398*2^64 + 12183573050814741876*2^128 + 137789976*2^192,10097760467014507358 + 12527551605988861623*2^64 + 9946855715452326125*2^128 + 530300845*2^192,12515287280232337152 + 10981581818318869492*2^64 + 7367148900709707388*2^128 + 2055973337*2^192,14630330888142204282 + 17840011580792157485*2^64 + 2843133463750629186*2^128 + 2023191948*2^192,17441886242189947746 + 452182118607385915*2^64 + 8918730597972199362*2^128 + 243775118*2^192,13695056845743624144 + 3835969350733101363*2^64 + 10418881718990266991*2^128 + 1354615684*2^192;\
7276223946437039833 + 6290216759655545434*2^64 + 7069770181488472402*2^128 + 695547571*2^192,6920174544564780250 + 13323807718659315050*2^64 + 1049791810014364228*2^128 + 691147383*2^192,90039977168411476 + 6125437485530466442*2^64 + 9842664028350666197*2^128 + 1417142887*2^192,16333154303491330990 + 8874974427159923750*2^64 + 8401528872370620404*2^128 + 4758840*2^192,4399044104728039848 + 7908902943288291931*2^64 + 13811719783121352802*2^128 + 1065852304*2^192,12856803421079192454 + 14974457124288239129*2^64 + 17616229609090674976*2^128 + 1279353035*2^192,16376191401558541278 + 18200438886616991635*2^64 + 15761705194147870149*2^128 + 1717801689*2^192,16604286641640342312 + 6287825990982931319*2^64 + 18123483711896558030*2^128 + 1969216643*2^192;\
8494875845025958072 + 6078037081771837322*2^64 + 14743209231391387340*2^128 + 333743004*2^192,8783837584524444876 + 16802605223556739793*2^64 + 4076264286619071770*2^128 + 774869376*2^192,4308077921604618212 + 18013718680623152398*2^64 + 10283308940518847317*2^128 + 321499105*2^192,9832163100325117992 + 15073465529735034804*2^64 + 4073871177632898145*2^128 + 1313131037*2^192,11983297260841465396 + 14212081218726524728*2^64 + 6939480992444422231*2^128 + 1648422376*2^192,8169280168348224728 + 2362967987439336614*2^64 + 1682228146082345082*2^128 + 461544914*2^192,9718755632130062332 + 4455348644881793955*2^64 + 3095742786908659066*2^128 + 1900475389*2^192,9245850243276339640 + 12746847814407103595*2^64 + 9747734968652187913*2^128 + 694212260*2^192;\
17756354641941200834 + 7186876385982917744*2^64 + 6494657118644819251*2^128 + 956683906*2^192,10085671476708011732 + 3909920008275415476*2^64 + 13306729695174137778*2^128 + 963183585*2^192,16721976968401251584 + 12088152757507559654*2^64 + 11592682869402713192*2^128 + 726907034*2^192,3028919671812309412 + 15123800140803352344*2^64 + 9571678935948602462*2^128 + 1874045944*2^192,17085077380566129704 + 7127650300043708697*2^64 + 6500315731435786577*2^128 + 157550977*2^192,28007182625114828 + 4168508574223170620*2^64 + 5914406516483532595*2^128 + 2004122970*2^192,7577683318577884828 + 5173935195587933617*2^64 + 3749330706972673224*2^128 + 983474968*2^192,15641695106674705208 + 1201083133880369390*2^64 + 241678881922979574*2^128 + 1460155695*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5219 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 2*x^6 - 4*x^5 + 16*x^3 + 32*x^2 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 2*x^2 - 4*x + 16, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 27

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^3*y^2 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^5 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 
Look at the ideal generated by: 
1*x^2*y^2 + 1*x^1*z^1*w^1 + 1*y^1*z^1*w^1
1*x^2*z^2 + 1*x^1*y^2*w^1 + 1*y^3*w^1 + 1*z^1*w^2
