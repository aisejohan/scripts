/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[2, 0, 1, 0, 0]  	10	4 
[2, 0, 0, 1, 0]  	11	5 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 4, 0, 0, 0]  	15	5 
[1, 0, 3, 0, 0]  	15	3 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 0, 0, 3, 0]  	18	3 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	4 
[0, 5, 1, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	3 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	4 
[0, 3, 2, 1, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 0, 3, 0]  	24	4 
[0, 3, 4, 0, 0]  	25	3 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 0, 2, 2, 1]  	21	6 
[0, 0, 5, 1, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[1, 1, 0, 2, 2]  	16	6 
[1, 2, 2, 0, 2]  	17	6 
[1, 0, 1, 1, 255]  	12	4 
[0, 4, 0, 0, 255]  	12	3 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 254.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[13803758577374283272 + 11058608056962308119*2^64 + 12415563673828487030*2^128 + 664237809*2^192,14601663925394159024 + 13837794481650846762*2^64 + 6427540128068366685*2^128 + 909464048*2^192,12186451270414758464 + 14243471945101051109*2^64 + 1186659586450629056*2^128 + 2085225140*2^192,2345452999346207264 + 10072496705590868037*2^64 + 5953699300567991533*2^128 + 989930680*2^192,7733511646888637904 + 7764780165901381839*2^64 + 7743281543248280218*2^128 + 7122134880*2^192,15344025206583907536 + 10866532050080512367*2^64 + 14906780926550880817*2^128 + 4840504593*2^192,13485168210280294816 + 9736250404788655040*2^64 + 13953403272552392682*2^128 + 1147654827*2^192,10293682029889870528 + 15899720080962550173*2^64 + 15982781261296679773*2^128 + 6924819298*2^192;\
4887891276758074052 + 5649654755387512327*2^64 + 12227779451593119628*2^128 + 4165115328*2^192,13483815160908573512 + 6901396422511665237*2^64 + 11555582269213857937*2^128 + 3750067875*2^192,1154084087641579392 + 4129709683107748127*2^64 + 4886653698070767895*2^128 + 511031483*2^192,16504486555680356832 + 8532336184265244807*2^64 + 4243385344149824455*2^128 + 634149859*2^192,6101356565449704152 + 10475265218325839836*2^64 + 192094521492466862*2^128 + 2432710617*2^192,2907413720606454696 + 6856975355876730582*2^64 + 10826840656443534164*2^128 + 14427650*2^192,15287636602571678208 + 8329611671961023714*2^64 + 7875092046041902608*2^128 + 1862762679*2^192,2709793050861099776 + 4905312806630344176*2^64 + 5555850028539361912*2^128 + 3407894452*2^192;\
6215833441508712270 + 13464922632484679584*2^64 + 18276825641165154127*2^128 + 658661123*2^192,5291673405821887100 + 511896187319429546*2^64 + 15152243222683701690*2^128 + 7859643782*2^192,780943176900391552 + 12965520685899019976*2^64 + 6923677450144112587*2^128 + 2467378562*2^192,517887162774211216 + 6559458522308675946*2^64 + 16952665651620686433*2^128 + 6378930064*2^192,15846700413759003980 + 8910060078091266066*2^64 + 13458227124702913589*2^128 + 1139449637*2^192,16621744965169445428 + 1594865204468542947*2^64 + 15511868087954299300*2^128 + 8212006866*2^192,6460436905933814112 + 86453644723251255*2^64 + 11004293366413440813*2^128 + 8522889380*2^192,12436306543586331616 + 6675725993610410679*2^64 + 17172547222518110514*2^128 + 2471996428*2^192;\
3389713199237869391 + 17034330384862673534*2^64 + 15389799210811271708*2^128 + 3136247951*2^192,3070295090775325430 + 3476989501662294928*2^64 + 12213505940860482162*2^128 + 2825241359*2^192,4323164996516993056 + 3579258597650450872*2^64 + 3390022593909695930*2^128 + 8432816593*2^192,12507913988646153032 + 31491126614563604*2^64 + 11566706825513194496*2^128 + 1840914422*2^192,6622560493572381526 + 9787379992016453824*2^64 + 10666483687630727551*2^128 + 903461212*2^192,6188085051189834858 + 6770922064195845865*2^64 + 3722885009450089340*2^128 + 112626467*2^192,5401462886211856256 + 16364341155719295687*2^64 + 2642913006916912251*2^128 + 851320786*2^192,17769295810994276672 + 17220415872051965571*2^64 + 17057781566574711137*2^128 + 3153586706*2^192;\
3389713199237869391 + 17034330384862673534*2^64 + 15389799210811271708*2^128 + 5845768335*2^192,7869451809408443302 + 13983006420727355053*2^64 + 9842506444011487498*2^128 + 3428505614*2^192,4323164996516993056 + 3579258597650450872*2^64 + 3390022593909695930*2^128 + 6285332945*2^192,13440868195058892904 + 6761044831882027122*2^64 + 16879637984084567259*2^128 + 8568374375*2^192,10718287353336115350 + 11749656255812480715*2^64 + 2225938322624125450*2^128 + 617351656*2^192,4067055999282378 + 1857982643557179037*2^64 + 17315433712821324910*2^128 + 7549546017*2^192,5401462886211856256 + 16364341155719295687*2^64 + 2642913006916912251*2^128 + 2067668946*2^192,17769295810994276672 + 17220415872051965571*2^64 + 17057781566574711137*2^128 + 4244105746*2^192;\
3389713199237869391 + 17034330384862673534*2^64 + 15389799210811271708*2^128 + 6768515215*2^192,10200599347188347718 + 11070917504533785405*2^64 + 13292899792374324797*2^128 + 3797036772*2^192,4323164996516993056 + 3579258597650450872*2^64 + 3390022593909695930*2^128 + 1763873233*2^192,4086251463765952760 + 5710813213046992278*2^64 + 5206320716663236465*2^128 + 7109661076*2^192,14995961134338640710 + 2815130185348538304*2^64 + 3702817658264999088*2^128 + 3269924155*2^192,9121883011358492682 + 1344949652248047315*2^64 + 9263305905778021423*2^128 + 4865867102*2^192,5401462886211856256 + 16364341155719295687*2^64 + 2642913006916912251*2^128 + 1388191698*2^192,17769295810994276672 + 17220415872051965571*2^64 + 17057781566574711137*2^128 + 938994194*2^192;\
15381235266280680480 + 6621225629156668517*2^64 + 16940833673772632215*2^128 + 2253210389*2^192,12764272289174052176 + 10189089056163346433*2^64 + 1891724042526347736*2^128 + 6966457037*2^192,17962070245969470480 + 5180123360383148987*2^64 + 16199268623440157150*2^128 + 8092738186*2^192,3713862653007306656 + 10979701305712093720*2^64 + 3724482333310481679*2^128 + 3919233981*2^192,14835828288946346272 + 7709179022228637813*2^64 + 9274050403552581645*2^128 + 3664127516*2^192,4409556959785357536 + 7966564430215250311*2^64 + 7639908417934908233*2^128 + 6327021363*2^192,2453767336477576256 + 6048879177078431912*2^64 + 17575366720152182909*2^128 + 1723256372*2^192,17538463746565073728 + 13126227218164477407*2^64 + 10557915276469893168*2^128 + 6294411304*2^192;\
16788469776769773696 + 6551366277430112774*2^64 + 4233361833536993510*2^128 + 7615868450*2^192,15772652688677368048 + 9748584130190963493*2^64 + 8836537147550630348*2^128 + 3551747996*2^192,1631602020438364576 + 14877975958025262853*2^64 + 743026787974493843*2^128 + 8011906311*2^192,6081177193235233792 + 2000062556407491431*2^64 + 6338048388152178616*2^128 + 2903152969*2^192,16735002725851328608 + 15979435125473927144*2^64 + 12319793009402821172*2^128 + 1240875113*2^192,10008924865811106272 + 12890878972890800644*2^64 + 7531429073724481108*2^128 + 2417210963*2^192,15577355877538647072 + 3197459749264749658*2^64 + 6437419488796443562*2^128 + 987228017*2^192,8971721399769132032 + 11576377845189051160*2^64 + 18189177477016789937*2^128 + 1000792649*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4647 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + x^7 - 8*x^5 + 32*x^3 - 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 - 3*x + 4, 1; x^2 + 2*x + 4, 2]
The valuation of f-g is: 27
The valuation of subst(g,x,A) is: 24

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
