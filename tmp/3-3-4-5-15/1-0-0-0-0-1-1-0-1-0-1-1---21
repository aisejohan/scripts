/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 40
[1, 1, 1, 0, 0]  	10	2 
[1, 1, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[0, 1, 3, 0, 0]  	15	2 
[1, 0, 2, 1, 0]  	16	4 
[1, 0, 1, 2, 0]  	17	4 
[1, 0, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	4 
[0, 5, 1, 0, 0]  	19	3 
[0, 5, 0, 1, 0]  	20	3 
[3, 4, 0, 0, 0]  	21	5 
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 2, 1, 0]  	22	3 
[1, 0, 5, 0, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[2, 6, 0, 0, 0]  	24	4 
[1, 7, 0, 0, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[3, 0, 4, 0, 0]  	25	3 
[0, 2, 1, 3, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 3, 0, 0, 2]  	12	4 
[3, 0, 3, 0, 2]  	21	7 
[0, 0, 5, 1, 2]  	25	2 
[0, 4, 2, 0, 5]  	20	4 
[0, 3, 0, 3, 5]  	24	4 
[0, 7, 0, 0, 250]  	21	5 
[0, 2, 1, 2, 251]  	20	3 
[0, 6, 0, 0, 252]  	18	3 
[1, 0, 1, 1, 254]  	12	3 
[0, 5, 0, 0, 254]  	15	2 
[0, 0, 0, 5, 254]  	25	1 
------
The gap is between 6 and 249.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[10716505715065766644 + 7275201024311194435*2^64 + 13453789719746382845*2^128 + 8215309678*2^192,11992763919287589096 + 10891887845912077305*2^64 + 17042714261937225591*2^128 + 1687294844*2^192,15465033215104592904 + 12858387555830466575*2^64 + 8327267871720883485*2^128 + 1320010479*2^192,1174426566490147560 + 3918271575839563479*2^64 + 8866717628662259596*2^128 + 6039134356*2^192,17954222762658129408 + 7341498708624416049*2^64 + 13353371825197433457*2^128 + 642108922*2^192,12422072375804396600 + 4032274939176312259*2^64 + 13206495983467355691*2^128 + 5008162058*2^192,11172480703658810272 + 10436800953370929571*2^64 + 3949235389374123433*2^128 + 1197316741*2^192,4035902587838641744 + 8097429451187223475*2^64 + 6043412801765959093*2^128 + 8577945954*2^192;\
13238028546602266746 + 17113526645464086966*2^64 + 4222436209024237629*2^128 + 1216471613*2^192,10056524140604105668 + 1624184539803339510*2^64 + 16056483201190166595*2^128 + 384881225*2^192,7273485829014132356 + 10455966289651515442*2^64 + 5952567270932485063*2^128 + 1513495270*2^192,12142192692783500340 + 4069558683118277916*2^64 + 14599241472847020235*2^128 + 1176477849*2^192,16404157740744835104 + 16925911583422737335*2^64 + 2424475270890966568*2^128 + 3753930543*2^192,11277413192622090700 + 4160872952292102917*2^64 + 14842402378000162400*2^128 + 598345314*2^192,17431795769045329952 + 5438297183725978831*2^64 + 2866806836118354267*2^128 + 3914402071*2^192,10628572021863212488 + 5720329353499221408*2^64 + 6719229079452850506*2^128 + 2628798401*2^192;\
17994163355623351388 + 5598308261410139336*2^64 + 11940112648612243937*2^128 + 8546622762*2^192,8999034363315684788 + 14531909269181854050*2^64 + 2059991254732449904*2^128 + 8141854299*2^192,3482570214392612512 + 11504348446532648032*2^64 + 11050505936711094328*2^128 + 352281392*2^192,12936888790242109684 + 2012110900271483466*2^64 + 17743613590586330122*2^128 + 782720397*2^192,925862350318195632 + 1000772867171513523*2^64 + 1118704422334754766*2^128 + 166925800*2^192,18413573256259375008 + 15103009143389740153*2^64 + 16123230794013806838*2^128 + 19516443*2^192,11103893133521513584 + 10525708607012824976*2^64 + 17863037571789527140*2^128 + 3361674422*2^192,7054590872533642248 + 11743322219105240432*2^64 + 18173213472375274375*2^128 + 1681165444*2^192;\
3426038322236513126 + 10366170935462586926*2^64 + 17870074396669955767*2^128 + 6228823156*2^192,16640218713196177688 + 13336679375479915787*2^64 + 4880557704690625677*2^128 + 1642679694*2^192,16649590658586230020 + 18373825928254212147*2^64 + 4398646414850852037*2^128 + 2538558855*2^192,7893867344785924648 + 8216489856170411095*2^64 + 58861730158389696*2^128 + 5744993649*2^192,12998472849924832592 + 9889324708170009940*2^64 + 13723581339407570168*2^128 + 5968532500*2^192,17801817666812576908 + 18130083927734193619*2^64 + 1343811379126691634*2^128 + 678536006*2^192,5375292518152375952 + 9807371533747213789*2^64 + 10514122175147423661*2^128 + 2231021707*2^192,12340188856106648944 + 3633527305363562359*2^64 + 5769366122027163873*2^128 + 4028279675*2^192;\
15172192562054998929 + 6327513654138176969*2^64 + 5155397289175123730*2^128 + 5691572768*2^192,14512409169025101067 + 15666033490336798288*2^64 + 14028418822297988421*2^128 + 7314706138*2^192,15024733134419340644 + 318704710143439264*2^64 + 3909530975139293104*2^128 + 1572428154*2^192,9106053842901827079 + 16981901030457456706*2^64 + 3711684611863353468*2^128 + 1138391227*2^192,6777998258118865620 + 17206555230441740599*2^64 + 18323409414126322878*2^128 + 5438338802*2^192,826169271650017460 + 1537506930456684778*2^64 + 5597291518963420123*2^128 + 2433966953*2^192,11449186829354659748 + 9787653311436879262*2^64 + 7405922797498295967*2^128 + 6224298498*2^192,1576961750189969374 + 15636999161511246882*2^64 + 5030299933940386616*2^128 + 3222348564*2^192;\
164341611246125658 + 1252165009459356826*2^64 + 2765813495737553489*2^128 + 7374553940*2^192,12340578193228993284 + 4000355288042267722*2^64 + 13630490784561930595*2^128 + 2155292027*2^192,1288982668000005060 + 11342923849701386472*2^64 + 15338436993272569681*2^128 + 7317840425*2^192,10334730992210821524 + 10286724920759437482*2^64 + 5651555499457030318*2^128 + 6503440284*2^192,17524596622593598880 + 8714115063239526594*2^64 + 12582549383274839554*2^128 + 7461077299*2^192,17995542130444113836 + 4761480599846283151*2^64 + 12259756675778649638*2^128 + 4455943406*2^192,9091055414502340640 + 6010168385060541519*2^64 + 2647613123997139780*2^128 + 3170490716*2^192,14610197746696574824 + 9024876636841447846*2^64 + 10899477613776370494*2^128 + 6137249814*2^192;\
5279342226663593218 + 4984365135514422184*2^64 + 15375757678212144750*2^128 + 3517505494*2^192,10778386999949266378 + 430387259821763938*2^64 + 15934095251165820399*2^128 + 8522588464*2^192,5213202566263062288 + 17805384533352168728*2^64 + 8831601062447786234*2^128 + 912316038*2^192,8886167175430138210 + 4658772604527280215*2^64 + 5838580799095419029*2^128 + 947307323*2^192,11665639759154676408 + 6980863894601267904*2^64 + 11953179322541436418*2^128 + 8496929733*2^192,1912210783276828016 + 2863659910332373213*2^64 + 11829525490963416226*2^128 + 4036183903*2^192,5163888906189358552 + 4170240633413628400*2^64 + 1775966031261987926*2^128 + 2721310651*2^192,11076831355431374212 + 556494629704773306*2^64 + 15702204998213164304*2^128 + 4604002406*2^192;\
3098516164652246324 + 6967478087319011649*2^64 + 12608773546478530649*2^128 + 2781647500*2^192,14544616230716540616 + 14895894980398355578*2^64 + 3694462841888592084*2^128 + 4219715289*2^192,12438214469134027208 + 17495634297628253217*2^64 + 5332370118517124789*2^128 + 5154670*2^192,6862915207382797608 + 5713432114914117905*2^64 + 9312041367510032328*2^128 + 784829045*2^192,2313288884062795584 + 12040872362314252165*2^64 + 4758210519093040341*2^128 + 3055472846*2^192,3332724860678977624 + 6155673570747913451*2^64 + 13790044615013444956*2^128 + 2995544468*2^192,9345298495601685184 + 18276643269891424296*2^64 + 12920436009752657915*2^128 + 1229164825*2^192,11873465121464442928 + 12795677928916765007*2^64 + 15055230541090250821*2^128 + 410141149*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4012 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 + 4*x^5 - 8*x^4 + 16*x^3 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x^2 - 2*x + 4, 1; x^6 + x^5 - 2*x^4 - 4*x^3 - 8*x^2 + 16*x + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 27
