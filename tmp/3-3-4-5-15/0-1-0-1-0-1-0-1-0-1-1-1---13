/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 44
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 0, 1, 2, 0]  	17	3 
[1, 5, 0, 0, 0]  	18	5 
[3, 2, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	6 
[1, 3, 0, 2, 0]  	22	4 
[2, 4, 0, 1, 0]  	23	3 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[2, 2, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	4 
[2, 1, 0, 2, 1]  	19	4 
[1, 4, 0, 1, 1]  	20	4 
[1, 2, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	4 
[3, 0, 0, 2, 2]  	19	4 
[2, 0, 0, 3, 2]  	21	5 
[0, 1, 2, 3, 3]  	26	2 
[0, 0, 4, 2, 253]  	26	1 
[0, 5, 0, 0, 254]  	15	3 
[0, 3, 0, 2, 254]  	19	3 
[1, 3, 0, 0, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	2 
[1, 1, 0, 2, 255]  	16	3 
[0, 2, 0, 2, 255]  	16	2 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[6446431200201171800 + 15218469649602309996*2^64 + 17126847271318289238*2^128 + 1621075740*2^192,11208456564654931920 + 8858149334932417802*2^64 + 3606077847117211006*2^128 + 2475634225*2^192,10761918511370655808 + 10229245544884967031*2^64 + 5643402568071125295*2^128 + 1558032019*2^192,11739642382655143840 + 3112619973617418872*2^64 + 8634497363279927593*2^128 + 4745296982*2^192,479329559288103024 + 14398444218605246684*2^64 + 17893883254716051827*2^128 + 6116718349*2^192,6790747115926705872 + 3340152313947583577*2^64 + 14071635003080141531*2^128 + 7218252271*2^192,10653780665161750128 + 16479641412250503156*2^64 + 14163851854879538604*2^128 + 2365051271*2^192,14626160282870985344 + 15201366284472299716*2^64 + 2967996147362104400*2^128 + 8197556919*2^192;\
18163130351767259068 + 16651917135854145071*2^64 + 9940798453549829203*2^128 + 264483967*2^192,13601091984740869800 + 7418543941730556097*2^64 + 2168636385604531219*2^128 + 2128786322*2^192,8267111417748408464 + 14438578471734937848*2^64 + 6517697769675813809*2^128 + 925735498*2^192,15072367940505032448 + 6807454098808925437*2^64 + 15201333477483882976*2^128 + 645035706*2^192,9664746009555294744 + 13655079252046255341*2^64 + 42261156863119374*2^128 + 3039042311*2^192,5399701991245611944 + 4647136178268538821*2^64 + 1381265771332077525*2^128 + 2569753742*2^192,9637039429039845000 + 7397549099309530794*2^64 + 11247656918769828442*2^128 + 615201260*2^192,2626670303765054048 + 17228552332040447371*2^64 + 5797115981289769464*2^128 + 918841430*2^192;\
13383027363890029356 + 8750604613159023902*2^64 + 6331938583962860744*2^128 + 6601715313*2^192,1210649581491093896 + 13542996079617846193*2^64 + 3786580994210374322*2^128 + 7991177112*2^192,10687994318147291104 + 9605019626874236974*2^64 + 16294462969467645824*2^128 + 5277717213*2^192,4249458050865857768 + 1090397654191912476*2^64 + 18216689364805628693*2^128 + 5827225521*2^192,11595683118022653152 + 1194947301438480564*2^64 + 2327718500784980430*2^128 + 6724663230*2^192,7739991584039424608 + 14676933323061412673*2^64 + 16267536246731258121*2^128 + 5904623465*2^192,2876180264315366256 + 16044827206028513243*2^64 + 293891955060220262*2^128 + 4994393178*2^192,7899487072852283504 + 7461576693558945222*2^64 + 14583857642617307542*2^128 + 6422202780*2^192;\
13903433241691030872 + 14701173020512385786*2^64 + 2877298893782490916*2^128 + 874192680*2^192,71144146898467728 + 11286120560424070954*2^64 + 7429392720966034435*2^128 + 1647824586*2^192,1219010571463571680 + 17534789663610788287*2^64 + 14982500888341947332*2^128 + 818339453*2^192,10196966533645382464 + 5530138849039040984*2^64 + 41171100155389622*2^128 + 2005921174*2^192,17056485491975018288 + 8217627293837839958*2^64 + 11907741333684631883*2^128 + 600842883*2^192,17742038270342826704 + 1859914691925236371*2^64 + 2152701727499183455*2^128 + 3207625836*2^192,8337059621490204080 + 10978475459496300609*2^64 + 1084070432708203260*2^128 + 2589799416*2^192,1383732055385767584 + 6271048786129504019*2^64 + 5764255669546323501*2^128 + 4259535596*2^192;\
13836088277960972595 + 4473358141027661200*2^64 + 8353595224569061590*2^128 + 3168654711*2^192,8301844022599889902 + 14212584267984157252*2^64 + 3675749772824713802*2^128 + 2650113589*2^192,1178629604119952260 + 17141220338126298112*2^64 + 12069719116991420705*2^128 + 1017936172*2^192,10086033069094096080 + 18195727320407815283*2^64 + 2200707044714077914*2^128 + 1663052334*2^192,9033024752893962746 + 9195972840257494199*2^64 + 6118856723722222955*2^128 + 8564596982*2^192,8125780500487324918 + 7572538675278240758*2^64 + 3140523029187915455*2^128 + 1757051203*2^192,1658409294297069766 + 14754784138200060213*2^64 + 5724121762682785030*2^128 + 664863723*2^192,4889928770050122280 + 10531838910599715000*2^64 + 204850535769861096*2^128 + 461770368*2^192;\
10526358734911251453 + 537182374138298987*2^64 + 3098356695912633784*2^128 + 3813609097*2^192,11721564371065236466 + 11297479421977687705*2^64 + 6796613526953973276*2^128 + 2265046642*2^192,6185126244301061212 + 10403623624907742031*2^64 + 16881222508559906571*2^128 + 7996478400*2^192,11587565905680648792 + 2951427143440490817*2^64 + 11033012404740590813*2^128 + 2531839439*2^192,18424546985927961854 + 15615438225491460437*2^64 + 13326869658741614973*2^128 + 535768674*2^192,9509193355857808498 + 2808270367936320110*2^64 + 8893498562793925201*2^128 + 1986014462*2^192,4239454491136845762 + 8507762693032432914*2^64 + 12855968267072140374*2^128 + 2676217634*2^192,3786717264605245224 + 17684486336622794226*2^64 + 7640666912814662690*2^128 + 4665709635*2^192;\
6616745720171755982 + 155848465370283524*2^64 + 4293932199939222863*2^128 + 82497016*2^192,15872535248741251196 + 5987640945324522947*2^64 + 5334743601147439579*2^128 + 6323638858*2^192,10252000954578829624 + 2438933249990281977*2^64 + 1254523143739373473*2^128 + 2534172844*2^192,16704250011338566184 + 9310842833035789082*2^64 + 13095990326535403970*2^128 + 4133698954*2^192,3900266559350995308 + 14521000844541413394*2^64 + 16565531366859641208*2^128 + 7720967310*2^192,9187414577305153268 + 8042707338672294522*2^64 + 9229123489849982484*2^128 + 1431469968*2^192,7278968653653531172 + 17774459769915572614*2^64 + 12742132131717446452*2^128 + 6325073909*2^192,12778197766288165536 + 16033719007382219997*2^64 + 14076588376457831380*2^128 + 292227314*2^192;\
8012933059072238442 + 8449514804278434506*2^64 + 16138441277859959293*2^128 + 478363372*2^192,7938838666758542068 + 8862280785664437060*2^64 + 15295095366612921160*2^128 + 4202950898*2^192,9760396612232603656 + 18310419111471915188*2^64 + 18286936720407698048*2^128 + 6585650425*2^192,6313724632232520280 + 5580877179776657562*2^64 + 10008901573157511591*2^128 + 8068996426*2^192,15974818912242636468 + 11302782910935625641*2^64 + 678988253043941366*2^128 + 4170713549*2^192,2339916709947723372 + 12328823364285261029*2^64 + 489895216105109439*2^128 + 8224185337*2^192,15919261322951307484 + 17708898647731362642*2^64 + 1442607955938906979*2^128 + 1344574355*2^192,1915047613923895872 + 971964663025214378*2^64 + 15451862527924004247*2^128 + 2920258876*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4331 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 29
