/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 50
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[1, 0, 1, 2, 0]  	17	2 
[3, 0, 0, 2, 0]  	19	5 
[2, 1, 0, 2, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[2, 0, 0, 3, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	2 
[0, 1, 5, 0, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 2, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 0, 4, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 1, 1, 1, 1]  	18	6 
[1, 6, 0, 0, 1]  	21	6 
[0, 5, 0, 2, 1]  	25	2 
[0, 7, 0, 1, 1]  	26	3 
[3, 1, 0, 0, 2]  	12	6 
[0, 6, 0, 1, 2]  	23	3 
[0, 2, 0, 4, 2]  	26	2 
[0, 4, 0, 3, 2]  	27	3 
[0, 5, 0, 1, 5]  	20	4 
[1, 3, 0, 2, 5]  	22	4 
[0, 3, 0, 3, 5]  	24	4 
[0, 1, 3, 1, 252]  	20	3 
[0, 4, 0, 2, 253]  	22	3 
[0, 0, 4, 2, 253]  	26	1 
[2, 2, 0, 0, 254]  	12	4 
[2, 0, 0, 2, 254]  	16	4 
[1, 1, 0, 3, 254]  	21	3 
[1, 0, 0, 3, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 1, 1, 3, 255]  	22	2 
[0, 0, 3, 2, 255]  	22	1 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 6 and 251.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[3362633928167546106 + 15805570224678629727*2^64 + 10528989637872812196*2^128 + 733897719*2^192,13192780860557924172 + 11286869255710968270*2^64 + 14338144695960102508*2^128 + 1494884963*2^192,4916028881316643932 + 13956100932463648877*2^64 + 13453107582000406655*2^128 + 1546654385*2^192,10693656142986103480 + 14047320342799067871*2^64 + 7743630195483717978*2^128 + 258522880*2^192,8703651479173905348 + 6079559859042891686*2^64 + 4401945610887523085*2^128 + 1150492688*2^192,12828400393588293328 + 5886551489757690602*2^64 + 17800136883878010583*2^128 + 1328554211*2^192,779871465703515244 + 10569289413472742615*2^64 + 17534051848823433944*2^128 + 1629951664*2^192,3201435721799843280 + 8833695873676899093*2^64 + 6730031046144517216*2^128 + 770650110*2^192;\
14741373933099986309 + 7569447201424463700*2^64 + 16591940352787323955*2^128 + 801716162*2^192,1799352659366387782 + 18441230840435332577*2^64 + 10208413398370300322*2^128 + 624393012*2^192,8856076164358750890 + 3494885189779807223*2^64 + 9413982255266451277*2^128 + 1062670631*2^192,6642793636991906336 + 7835943374860212649*2^64 + 17721577365197907066*2^128 + 933144585*2^192,13431078303801245626 + 4999101862522336537*2^64 + 15335835413528742320*2^128 + 529175684*2^192,1358979139393349680 + 14708414153491660460*2^64 + 10049454746703003931*2^128 + 262558401*2^192,467112576927987390 + 7193085628920578774*2^64 + 6503078926130718785*2^128 + 927200079*2^192,15556209094585704288 + 8898587029600845891*2^64 + 16085861208464583941*2^128 + 246320437*2^192;\
7899596209829509267 + 5421550480048288857*2^64 + 3397098335567136981*2^128 + 1036077094*2^192,2695070557159860990 + 6083920231127904521*2^64 + 6569943782513381943*2^128 + 1448409590*2^192,6420855686348688578 + 3222712231319107970*2^64 + 13511729131637639732*2^128 + 382999108*2^192,12685657957526458116 + 13616327136157363754*2^64 + 5577607295656507058*2^128 + 2014403414*2^192,3245361043869957778 + 15555023162726951073*2^64 + 2141882614828709459*2^128 + 1375811578*2^192,12178754753673563052 + 17214823103673006289*2^64 + 4634378380965028867*2^128 + 1125271392*2^192,439998860872723978 + 18174553492600917848*2^64 + 17257964934578742135*2^128 + 2023956438*2^192,2621029853680819616 + 11356431281194954427*2^64 + 17966748154178836747*2^128 + 715847350*2^192;\
14452873156020343192 + 9935753886486096863*2^64 + 18150761023154311397*2^128 + 1550879611*2^192,17190073340821267152 + 9383093769806130681*2^64 + 5873876866602722079*2^128 + 1206810966*2^192,9493693624793212128 + 8118801262775672384*2^64 + 638405216394106384*2^128 + 1483288781*2^192,8920609374847464528 + 3851100965757625445*2^64 + 200774236380763301*2^128 + 566701974*2^192,10569650773190827176 + 2252404353307084665*2^64 + 10233114714803739195*2^128 + 1406742935*2^192,11093613214812645568 + 18224618843854985116*2^64 + 9755644204118763466*2^128 + 1789456618*2^192,13036678070226563992 + 13247786526530593085*2^64 + 3913157033418436879*2^128 + 1395592776*2^192,3733136484568820808 + 11311577799180138721*2^64 + 12340060336720802730*2^128 + 2009124233*2^192;\
1327693411303468848 + 12872708809553128832*2^64 + 7415626131140716360*2^128 + 738214904*2^192,17181835448043169172 + 5932418578015564997*2^64 + 15781336039133495432*2^128 + 437879655*2^192,5035153790406512604 + 11637257648685954820*2^64 + 18096679327912717582*2^128 + 1458421556*2^192,2311877546188531532 + 16539549699504889412*2^64 + 459635990499755961*2^128 + 1651526787*2^192,5545217305485813576 + 14359064808202371373*2^64 + 6988661936220859906*2^128 + 1115839259*2^192,46893271137094908 + 16746963743503691687*2^64 + 17384151313324736821*2^128 + 1494068643*2^192,7055930011429897664 + 14132219739757866914*2^64 + 6208298546493763149*2^128 + 47567531*2^192,2355011908835713456 + 6861697742686031624*2^64 + 147246470112689024*2^128 + 100877983*2^192;\
17105052265100328716 + 11479560548886226097*2^64 + 5314206167600088415*2^128 + 1694488691*2^192,11620751508273803024 + 7554973679043556635*2^64 + 14576813593557072117*2^128 + 2062497036*2^192,9481309036324950588 + 3417568170931831003*2^64 + 4419768544454246882*2^128 + 272959597*2^192,2931083709672243188 + 14621579524078544633*2^64 + 842904125715023808*2^128 + 610216190*2^192,3216485940571171860 + 12183791154851768136*2^64 + 1330798339413660857*2^128 + 1398420845*2^192,6917206659362242896 + 1956036370733932317*2^64 + 8384713648205382207*2^128 + 1914190887*2^192,9307866087843741892 + 5670214645268332622*2^64 + 16640852443299081713*2^128 + 1804866879*2^192,12038781380631723560 + 13789720292456267580*2^64 + 16256415308911751494*2^128 + 950936597*2^192;\
9894752558040591007 + 4500124239083694388*2^64 + 15192754635472017003*2^128 + 1684411307*2^192,9538907774742369482 + 13077259955747216700*2^64 + 2970812430181638380*2^128 + 1761558423*2^192,14530712918782722018 + 10893554126764154356*2^64 + 13978844622699913087*2^128 + 65477998*2^192,255105746156646360 + 8000550816816904566*2^64 + 2340836009638435322*2^128 + 1009248801*2^192,17321318427187175222 + 16157136303566556831*2^64 + 1601527960214787568*2^128 + 679299998*2^192,2124558668473342284 + 12459872360966878059*2^64 + 14040154642594919431*2^128 + 1302114719*2^192,14985784563284010374 + 16613389900968310374*2^64 + 7839957180337374698*2^128 + 860359125*2^192,3818073830572513648 + 14435705542647122949*2^64 + 7570852540275093545*2^128 + 1291932803*2^192;\
9052831859547990129 + 17579236682253298624*2^64 + 5495095274582514659*2^128 + 557992698*2^192,12746863666217101814 + 3939906597731550973*2^64 + 551227780604386492*2^128 + 490491527*2^192,15093571368111195774 + 18242965252339099044*2^64 + 12885113174695739709*2^128 + 213629404*2^192,17202865912347711172 + 2563976258562024626*2^64 + 7300648230850018156*2^128 + 184964076*2^192,16502266777943086282 + 2513314724967822445*2^64 + 10142044857818693178*2^128 + 1002956183*2^192,10152022281020101204 + 12551871882783155893*2^64 + 12140020302242713961*2^128 + 193359901*2^192,7659912515063629130 + 4172760893040129857*2^64 + 100633153109786538*2^128 + 1027611944*2^192,10299687125010019216 + 2580048718506470796*2^64 + 5093103469860835213*2^128 + 1404218418*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5175 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 34
