/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 39
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[1, 0, 1, 2, 0]  	17	2 
[3, 0, 0, 2, 0]  	19	5 
[2, 1, 0, 2, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	2 
[0, 1, 5, 0, 0]  	23	3 
[1, 2, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[2, 1, 1, 1, 1]  	18	6 
[0, 5, 0, 1, 1]  	20	4 
[2, 0, 0, 3, 1]  	21	6 
[1, 3, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[1, 1, 0, 3, 254]  	21	5 
[2, 2, 0, 0, 255]  	12	3 
[2, 0, 0, 2, 255]  	16	3 
[1, 0, 0, 3, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 2 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[12724728957197261608 + 16723398341312323237*2^64 + 1994877858258357726*2^128 + 632976137*2^192,1164819674983759784 + 8931192317038005589*2^64 + 14037854453181232000*2^128 + 916835789*2^192,17819701306883379358 + 5397927190913923467*2^64 + 12905977472885339178*2^128 + 280688736*2^192,16074067243414740450 + 13997174806924733992*2^64 + 12312312798309495942*2^128 + 879814675*2^192,12676513296160758244 + 13224876947744570019*2^64 + 16830511847117777340*2^128 + 909795226*2^192,13581660562748991128 + 4612343544311207392*2^64 + 11240216582826466240*2^128 + 395754500*2^192,15236006326412425414 + 17360797145667724509*2^64 + 3217600244132497221*2^128 + 965858570*2^192,12453500266476183128 + 5754337027059611969*2^64 + 11187513694777165604*2^128 + 493158593*2^192;\
4351865367961931922 + 14457430549144452877*2^64 + 4165312926771380439*2^128 + 495531273*2^192,10832605525209406798 + 8644077030178930319*2^64 + 8959659100878171157*2^128 + 167362875*2^192,18192469890002269021 + 15301155810399625288*2^64 + 4012304965042176811*2^128 + 221986930*2^192,10124271500423179059 + 14558476320339398999*2^64 + 1696756713854199212*2^128 + 374248201*2^192,10452114990156410486 + 2853314408593939051*2^64 + 12486198169594140045*2^128 + 139568612*2^192,16607762158663334126 + 803302253815509864*2^64 + 3280191198162270664*2^128 + 23914339*2^192,3770300514900648421 + 9936982336009452228*2^64 + 17142275293710104642*2^128 + 220374750*2^192,3865723260230403152 + 9486060612774817932*2^64 + 8760057132836122395*2^128 + 433882128*2^192;\
2508704361749941937 + 2891871210009971545*2^64 + 10405523486932101343*2^128 + 13647405*2^192,13534380006569213686 + 3093282155244417043*2^64 + 5704209523099438166*2^128 + 1004588046*2^192,10959857638160493305 + 15568526110532171787*2^64 + 10638111508431653786*2^128 + 901549907*2^192,15252405180654773911 + 596520886618656241*2^64 + 1485142401512607613*2^128 + 291343944*2^192,1205906011998325122 + 4736720847034369089*2^64 + 13672892156398035578*2^128 + 22368338*2^192,724187467707859340 + 11355389751620154834*2^64 + 17443025224237223372*2^128 + 1024631376*2^192,14438585211122225995 + 16052847683895938568*2^64 + 12041328882603713392*2^128 + 918715853*2^192,15322186639827688416 + 10223106371775056951*2^64 + 1297213119675321458*2^128 + 1036558654*2^192;\
11235838420218374978 + 10527324782744360306*2^64 + 16878317049020235364*2^128 + 512004131*2^192,18134812429104946184 + 3947766445312030687*2^64 + 6245505001498424373*2^128 + 501403567*2^192,14928324376467281476 + 15641148850544898496*2^64 + 3497020139777915080*2^128 + 416767437*2^192,16101373910420144800 + 10392956422840420314*2^64 + 3860199053584267668*2^128 + 473452621*2^192,14560281316513239108 + 7872739680933991208*2^64 + 12146375007737153942*2^128 + 629180201*2^192,17354574101677043408 + 12839406673254521644*2^64 + 1299171402915374311*2^128 + 86621720*2^192,11069469698695975436 + 4657014542127581618*2^64 + 17007644297769375135*2^128 + 257028145*2^192,14368522591576702764 + 17558794071434634771*2^64 + 8868819351928927905*2^128 + 890593318*2^192;\
7132253761993007830 + 12248385860122801804*2^64 + 3306776556767609234*2^128 + 755011713*2^192,8996172312350476548 + 16819398617086636405*2^64 + 4881301679399489332*2^128 + 530968395*2^192,16415455637256791858 + 17008574264334720854*2^64 + 4702125929717752317*2^128 + 789279677*2^192,1247409556530723804 + 13798942752531530561*2^64 + 12293583957652767905*2^128 + 277727026*2^192,3154348174741937218 + 13456422052947558048*2^64 + 8068550382167379985*2^128 + 427633782*2^192,1150475514761479014 + 5656251974144593519*2^64 + 4058241458297214773*2^128 + 509725019*2^192,10624678734175315174 + 942718959581158804*2^64 + 15800680934350395469*2^128 + 180965567*2^192,11602907739266397664 + 14623901677210768741*2^64 + 14718679018589258506*2^128 + 871414908*2^192;\
7132253761993007830 + 12248385860122801804*2^64 + 3306776556767609234*2^128 + 801149057*2^192,8996172312350476548 + 16819398617086636405*2^64 + 4881301679399489332*2^128 + 421916491*2^192,16415455637256791858 + 17008574264334720854*2^64 + 4702125929717752317*2^128 + 600535997*2^192,1247409556530723804 + 13798942752531530561*2^64 + 12293583957652767905*2^128 + 332252978*2^192,591672890095901760 + 2923659531695762633*2^64 + 13524560665889211062*2^128 + 93183806*2^192,3713150799407514472 + 16189014495396388934*2^64 + 17048975248284935312*2^128 + 718345874*2^192,10624678734175315174 + 942718959581158804*2^64 + 15800680934350395469*2^128 + 352932031*2^192,11602907739266397664 + 14623901677210768741*2^64 + 14718679018589258506*2^128 + 418430076*2^192;\
15150135951829043262 + 9752759331374457902*2^64 + 9229834634018943415*2^128 + 575520937*2^192,17394916436502450012 + 15765024604717584093*2^64 + 14718686580999102485*2^128 + 514066444*2^192,10706111306659024253 + 3375363865961956073*2^64 + 1537280677573161474*2^128 + 660169375*2^192,9803253855824429041 + 17376033630329301911*2^64 + 16496159336912033151*2^128 + 786675468*2^192,336478208264045588 + 5123112801204145740*2^64 + 172081187337478251*2^128 + 404815861*2^192,2054577318770304688 + 11412740254073343136*2^64 + 16225272257146953192*2^128 + 682239690*2^192,9420862365789441523 + 259440364663585931*2^64 + 5237625980674793681*2^128 + 891699857*2^192,3627498122476164716 + 4280992323115957868*2^64 + 992342127530497702*2^128 + 134451226*2^192;\
10553605224657262941 + 2213259313279817487*2^64 + 10529560714179131255*2^128 + 1025683293*2^192,797446474274866098 + 2807421768933927566*2^64 + 2812399726910570082*2^128 + 178765919*2^192,3034275782918017579 + 5405675257575716824*2^64 + 17726117248607496645*2^128 + 62983641*2^192,617184347521718933 + 17900936548084232424*2^64 + 13517915285236319776*2^128 + 847477833*2^192,6483858641537152560 + 11837116409490674282*2^64 + 1999132420012210108*2^128 + 890484349*2^192,11322075151416412676 + 13202025140426624274*2^64 + 17935889432965435574*2^128 + 278767610*2^192,14184754037186250841 + 18235670762713413794*2^64 + 1953107057948024243*2^128 + 903411658*2^192,3216627551989754964 + 3357038402053217247*2^64 + 8286413208259921626*2^128 + 990350690*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 5174 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 4*x^6 - 4*x^5 + 16*x^3 + 64*x^2 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 4*x^3 + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 36

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^3*y^2 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
