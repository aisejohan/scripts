/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 51
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[0, 1, 3, 0, 0]  	15	2 
[1, 0, 1, 2, 0]  	17	5 
[3, 0, 1, 1, 0]  	18	7 
[1, 0, 0, 3, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	4 
[2, 0, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	4 
[1, 0, 3, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[3, 0, 3, 0, 0]  	21	7 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 4, 2, 1, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 3, 1, 3, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 0, 4, 0]  	29	1 
[0, 2, 2, 3, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[2, 0, 0, 2, 1]  	16	6 
[0, 1, 2, 3, 1]  	26	2 
[1, 6, 0, 0, 2]  	21	6 
[0, 2, 1, 3, 2]  	25	2 
[0, 2, 0, 4, 2]  	26	3 
[0, 3, 2, 1, 3]  	22	3 
[0, 3, 1, 2, 3]  	23	3 
[0, 4, 2, 0, 4]  	20	4 
[0, 3, 0, 3, 4]  	24	4 
[0, 0, 5, 0, 253]  	20	2 
[0, 0, 4, 2, 253]  	26	1 
[0, 7, 0, 0, 254]  	21	4 
[0, 0, 3, 2, 254]  	22	1 
[0, 0, 2, 3, 254]  	23	1 
[0, 0, 0, 5, 254]  	25	1 
[2, 2, 0, 0, 255]  	12	3 
[1, 0, 2, 1, 255]  	16	4 
[0, 2, 1, 2, 255]  	20	3 
[0, 1, 1, 3, 255]  	22	2 
[0, 1, 0, 4, 255]  	23	2 
------
The gap is between 5 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[6672654162968829954 + 11648346626005896033*2^64 + 15646702586830482518*2^128 + 1099475561*2^192,6090817145678111518 + 10866011206429110860*2^64 + 18303539222264119698*2^128 + 1119900951*2^192,1062611369371878678 + 2319519545979893413*2^64 + 11025750186845985674*2^128 + 682809097*2^192,7258300756912857204 + 12231828225977201064*2^64 + 2794731246241199864*2^128 + 1096686231*2^192,9282189485529412372 + 6905197568069017909*2^64 + 13576784815218904721*2^128 + 713594589*2^192,16038011755362377574 + 11214027189405311926*2^64 + 6048784960925960645*2^128 + 1398832634*2^192,12113906421864544442 + 6687999931929679994*2^64 + 11988142247753028564*2^128 + 1750125297*2^192,7933421987825286452 + 11029090320220723628*2^64 + 6756825620853724606*2^128 + 256167724*2^192;\
4097423224191767471 + 12213790548808933408*2^64 + 16255725751498210160*2^128 + 262948583*2^192,5351025675759466685 + 6238489109597376621*2^64 + 2933702699116300466*2^128 + 594338083*2^192,670827591297983017 + 6036201813467061093*2^64 + 11639463360898136613*2^128 + 283360671*2^192,9546244485463432214 + 2983935060046099998*2^64 + 17447174492631243169*2^128 + 1900870229*2^192,2508602978512208878 + 9386305551053957789*2^64 + 5750139034894227915*2^128 + 753274964*2^192,7775539026408770201 + 10911852234986048470*2^64 + 455031894616677554*2^128 + 1710917394*2^192,7252094496488234715 + 16663251212541360710*2^64 + 5036700606287198864*2^128 + 1559910747*2^192,11212596050089328710 + 6769477923986861141*2^64 + 11108714773431873817*2^128 + 42371303*2^192;\
15183646533969407677 + 11887941422479336548*2^64 + 7547438112412395889*2^128 + 1717753545*2^192,10320716581990791327 + 222791705796819687*2^64 + 512374285872218975*2^128 + 517376490*2^192,4081667014727606519 + 2058805022233008248*2^64 + 17719103444521426611*2^128 + 1744984385*2^192,13866462329095333190 + 37514804947578042*2^64 + 9075256538837228044*2^128 + 1755021731*2^192,8699748642173329114 + 4140341556584867860*2^64 + 12314319516195495566*2^128 + 927207655*2^192,4634404758319332555 + 12531166830789678169*2^64 + 8282125153972351529*2^128 + 1038941188*2^192,2612423666875220137 + 147124959583957538*2^64 + 1423687492373986355*2^128 + 1757118600*2^192,2617098437784514914 + 11791651288712735014*2^64 + 17185080905125812292*2^128 + 198532864*2^192;\
14159957712137540773 + 14236837995446349289*2^64 + 7872093966558424679*2^128 + 451994240*2^192,9976455088636239821 + 16996519470244829905*2^64 + 1133976701557907356*2^128 + 681006670*2^192,17307129973328951689 + 2561905702791623611*2^64 + 14254410995916037086*2^128 + 415717879*2^192,6478215658075330558 + 3790914864590664149*2^64 + 17098838540680479992*2^128 + 1292782680*2^192,5446293274081327690 + 1181294164451340699*2^64 + 7990492712109456141*2^128 + 1304643893*2^192,7807619167823787781 + 415003312712215740*2^64 + 2286439235163679086*2^128 + 882895064*2^192,13514093494767243731 + 10635399089673475880*2^64 + 5938703524546569096*2^128 + 1425822010*2^192,9598104292801481126 + 14983162961329736023*2^64 + 14418766376220581383*2^128 + 1707012702*2^192;\
4882198506734856421 + 16373122738331979193*2^64 + 13122427317510707806*2^128 + 1279752134*2^192,15697771037815487025 + 12716287282271614975*2^64 + 13813559985558628456*2^128 + 904847552*2^192,5226125514653979733 + 8457917750612375834*2^64 + 4053146268900496294*2^128 + 1211133864*2^192,8938837855938124726 + 11862415754496569486*2^64 + 7490768100963234993*2^128 + 417761630*2^192,10455319523726555754 + 5660884628408414252*2^64 + 5202659732561296763*2^128 + 856698987*2^192,6281949013772206085 + 10443231842427500317*2^64 + 14118431803143523464*2^128 + 986487998*2^192,9393085809357576399 + 17547836569088234258*2^64 + 3665076917529072391*2^128 + 707039582*2^192,9853733167839167198 + 15252670331019139459*2^64 + 7799869716453752914*2^128 + 1277096387*2^192;\
13190236929999842508 + 1903589906183504157*2^64 + 18350816502684716518*2^128 + 130678830*2^192,12744915049103218850 + 675769063270912389*2^64 + 9561836101062180050*2^128 + 976107492*2^192,12688330245490266078 + 302884356683183588*2^64 + 9600179445779662038*2^128 + 1137670674*2^192,2269641205377020028 + 3901462966035976467*2^64 + 2513096837419252936*2^128 + 1469765335*2^192,10236921038566889724 + 8484508378550390950*2^64 + 4155850596572760097*2^128 + 487616832*2^192,5632391131428138202 + 13190531146039749511*2^64 + 3895934566876105090*2^128 + 668432298*2^192,5515894905040379526 + 17246149882655961346*2^64 + 12734171052730800302*2^128 + 921433569*2^192,1601603606005642332 + 1694567105713849805*2^64 + 15583486525151902183*2^128 + 1195494072*2^192;\
13477164185583298994 + 7430619654418842119*2^64 + 14405454871250871986*2^128 + 1054105077*2^192,8935223458636670478 + 10915753432648344011*2^64 + 15460397096673388360*2^128 + 1547178005*2^192,11276153521247114178 + 3854205914628529614*2^64 + 11691049366180174972*2^128 + 140835334*2^192,18118287784460084880 + 10096695531386438526*2^64 + 11236365344557308414*2^128 + 1801509277*2^192,9428988545738260204 + 1810356270594293514*2^64 + 7223993912107450008*2^128 + 2111307253*2^192,2713247679030836258 + 8131273800843455492*2^64 + 11665846948560022387*2^128 + 1806054520*2^192,7701285370501531630 + 9690470303655656075*2^64 + 15475264736407332425*2^128 + 688953041*2^192,8671038080288764580 + 191020463415847228*2^64 + 5402922973455750335*2^128 + 1758378907*2^192;\
12178659564573134028 + 12950339081425559033*2^64 + 12554768105731005201*2^128 + 1942028662*2^192,9643239684718849824 + 3708407528216569703*2^64 + 12422001367269261424*2^128 + 1725875471*2^192,2084192604033745160 + 16367112644255816809*2^64 + 10778816768081373630*2^128 + 1712137051*2^192,1131539947684708936 + 14880619199018411554*2^64 + 5472478461561133380*2^128 + 77009215*2^192,4107562552747428568 + 6297689640935288979*2^64 + 2268999188642425463*2^128 + 1868693319*2^192,2429130090108954608 + 1282919110507067945*2^64 + 4485018326420530483*2^128 + 2110567017*2^192,18009773339791942296 + 15789450596114265728*2^64 + 6378776092307915450*2^128 + 1083316192*2^192,17878239769409814296 + 1435424037886514432*2^64 + 10184827711253196600*2^128 + 868784689*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4132 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + x^7 + 4*x^5 - 16*x^3 - 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 + x^3 + 4*x + 16, 1]
The valuation of f-g is: 31
The valuation of subst(g,x,A) is: 30

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
Look at the ideal generated by: 
1*x^2*y^1 + 1*z^1*w^1
1*x^1*z^2 + 1*y^2*w^1
