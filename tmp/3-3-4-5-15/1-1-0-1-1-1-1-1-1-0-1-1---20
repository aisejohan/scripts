/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 58
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	3 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	7 
[1, 0, 0, 3, 0]  	18	2 
[1, 2, 0, 2, 0]  	19	6 
[0, 5, 1, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 1, 2, 0]  	23	5 
[0, 3, 0, 3, 0]  	24	5 
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 3, 3, 1, 0]  	26	3 
[0, 2, 5, 0, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 2, 2, 3, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 1, 0, 2, 1]  	16	6 
[1, 5, 0, 0, 1]  	18	7 
[1, 1, 2, 1, 1]  	19	5 
[1, 0, 2, 2, 1]  	21	5 
[0, 3, 2, 1, 1]  	22	4 
[0, 2, 3, 1, 1]  	23	4 
[0, 1, 5, 0, 1]  	23	3 
[0, 2, 1, 3, 1]  	25	2 
[0, 2, 0, 4, 1]  	26	3 
[3, 1, 0, 0, 2]  	12	7 
[1, 2, 2, 0, 2]  	17	6 
[0, 2, 1, 2, 2]  	20	4 
[0, 1, 2, 3, 2]  	26	2 
[0, 0, 4, 2, 253]  	26	1 
[2, 2, 0, 0, 254]  	12	4 
[0, 4, 1, 0, 255]  	16	3 
[1, 0, 1, 2, 255]  	17	4 
[0, 4, 0, 1, 255]  	17	3 
[0, 6, 0, 0, 255]  	18	4 
[0, 3, 0, 2, 255]  	19	4 
[0, 1, 3, 1, 255]  	20	2 
[0, 0, 5, 0, 255]  	20	1 
[0, 1, 1, 3, 255]  	22	2 
[0, 0, 3, 2, 255]  	22	1 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[12655603832408543306 + 16946173528010797340*2^64 + 8657863414918898624*2^128 + 1523429536*2^192,17993629892576272452 + 17070310521965512275*2^64 + 9825334326645556033*2^128 + 296749064*2^192,10238513497266947468 + 11036803306002473030*2^64 + 7226572450646157418*2^128 + 884503682*2^192,9278001893375407780 + 9313256380563859649*2^64 + 12042875594836619959*2^128 + 507912613*2^192,8082630521583858700 + 15594907295703670054*2^64 + 7965515721011502791*2^128 + 1496167023*2^192,5608612284095926232 + 9439213987926912671*2^64 + 15707291496566901553*2^128 + 1296022168*2^192,9915680345102743884 + 7062079332935140914*2^64 + 1078714351508565016*2^128 + 186826234*2^192,2999203424529320608 + 9644391488392191590*2^64 + 5057556199704149204*2^128 + 436233580*2^192;\
14203045471985604871 + 3121411178667360113*2^64 + 2417243473931269089*2^128 + 461109016*2^192,4570348004485317650 + 15991902324331779049*2^64 + 15979318162960523344*2^128 + 2049453148*2^192,9429598580898408462 + 8453385149044303881*2^64 + 7822344524879113480*2^128 + 1035381461*2^192,9000098428669865438 + 7061740896017038783*2^64 + 12388996548774572603*2^128 + 1978857334*2^192,5092041958455564526 + 3634426340353495959*2^64 + 15615640848889015532*2^128 + 1763293318*2^192,7299834816906023612 + 9890891842540451403*2^64 + 7787538399999041220*2^128 + 1399261867*2^192,9511276930413488566 + 17555480353256028365*2^64 + 17591478407988251515*2^128 + 866670024*2^192,14683990260117770888 + 6917525693651472250*2^64 + 1139691485682194961*2^128 + 1882618994*2^192;\
12597247001428257886 + 4835282537871742686*2^64 + 10139976929545239382*2^128 + 811950328*2^192,3446183053591116396 + 433691958157842404*2^64 + 17916962843485178762*2^128 + 1225868102*2^192,11866290924887918436 + 16024441752983281410*2^64 + 10790455805436770137*2^128 + 150267304*2^192,6588001157011983116 + 11143896050096519056*2^64 + 7655889208695070550*2^128 + 1866278104*2^192,4811359770531433308 + 7115640300249264275*2^64 + 12330370515818977108*2^128 + 604799247*2^192,394959131342759796 + 13011119680666783627*2^64 + 9890691327201711493*2^128 + 161799062*2^192,1028886855396532308 + 12294502513902872192*2^64 + 1172344407527374186*2^128 + 1019979852*2^192,10959610818093742776 + 10368702930435782964*2^64 + 12802580970806117095*2^128 + 94013060*2^192;\
13633450889407017650 + 3487338919736562287*2^64 + 2979516151153593634*2^128 + 1314299325*2^192,3103981829763430348 + 5971375438519784384*2^64 + 9844269065865883848*2^128 + 527330062*2^192,8232499355043101532 + 5578555768134591824*2^64 + 2667048003596273932*2^128 + 1565394470*2^192,18043124061655955824 + 6909085449570769016*2^64 + 12066377470584901835*2^128 + 966823099*2^192,12622404523138260188 + 17480036863709168019*2^64 + 12473998756648754717*2^128 + 1665030904*2^192,7550035531433547620 + 14701403583461518387*2^64 + 15758254944882072749*2^128 + 1894283241*2^192,3539807045284620844 + 5341881647190491930*2^64 + 16508014417882843939*2^128 + 1484774546*2^192,18087041532431762960 + 15969236192829622386*2^64 + 11400901850086779204*2^128 + 1720265055*2^192;\
8530304567334157156 + 1866731169076264038*2^64 + 6627629301747650402*2^128 + 183273414*2^192,7292458380085426016 + 927229539095187306*2^64 + 10973025095348730494*2^128 + 1849442809*2^192,7588089727578828508 + 3149976688022765643*2^64 + 7357187863958656351*2^128 + 1756332563*2^192,13405766459185021212 + 12784469233562928839*2^64 + 11317090311970119513*2^128 + 1083762177*2^192,16359136464844333044 + 12936682431076693424*2^64 + 8872324487760429039*2^128 + 571286678*2^192,14715518393852018216 + 12412882904023171553*2^64 + 8567883776284906303*2^128 + 161884050*2^192,3196760194801831916 + 14019024907885112393*2^64 + 14453810227760966370*2^128 + 569398597*2^192,1607638155289073392 + 9705468843387049538*2^64 + 5700183269912582878*2^128 + 1582853937*2^192;\
2002608174027167674 + 8210529322285463110*2^64 + 878064384776332377*2^128 + 741669609*2^192,13029170029307929852 + 8458407057330887051*2^64 + 18327924151957788824*2^128 + 1954314546*2^192,1969400983753778664 + 9681701904014942171*2^64 + 16864858461446439375*2^128 + 1824408650*2^192,7769051968352996800 + 16467312154235862110*2^64 + 13085990611541668752*2^128 + 41316418*2^192,17431385023009379604 + 12161090756404457891*2^64 + 2164506700595041982*2^128 + 699222366*2^192,3574697742792614664 + 8313962694623672206*2^64 + 16597285510660161958*2^128 + 1437509941*2^192,12569828688620230680 + 7878759187241400078*2^64 + 1753707105712345540*2^128 + 1263216794*2^192,6617220005015870048 + 7490009329080617431*2^64 + 10652372831639168846*2^128 + 999949676*2^192;\
9821188342988364419 + 17867481299742999530*2^64 + 13889766714522616963*2^128 + 120804274*2^192,14482993335267676314 + 15881474871546291273*2^64 + 1629954592004624194*2^128 + 1517959445*2^192,10701127504231775010 + 8862436058804597293*2^64 + 5573513084346652784*2^128 + 1033644450*2^192,6335926704245056722 + 15115830642670663573*2^64 + 3430423492171538799*2^128 + 1123909908*2^192,9203617312607151546 + 14536954135132603910*2^64 + 3550812084306626527*2^128 + 854216198*2^192,13562993688014414688 + 6902984358100821833*2^64 + 1943353193556845746*2^128 + 902663734*2^192,14294116916370818390 + 13205784470338992330*2^64 + 11884537181185993080*2^128 + 1319376039*2^192,15979937689957217032 + 1691778250707512728*2^64 + 7507408557698577925*2^128 + 350621736*2^192;\
14007446877654907404 + 8628098102555732528*2^64 + 14059435944125553667*2^128 + 738088283*2^192,10389306906552631920 + 10101098172775558058*2^64 + 883506696960314547*2^128 + 1148689595*2^192,18381612427289811032 + 12281957052819798260*2^64 + 17521475756246812478*2^128 + 1094868572*2^192,780239226548100600 + 2190669657991209245*2^64 + 4742098974684411351*2^128 + 2036218921*2^192,17317686392893161848 + 4568102195968931964*2^64 + 11920190076613001747*2^128 + 2135115465*2^192,14623413353286176852 + 17481732939139821718*2^64 + 5032129952518202149*2^128 + 790029172*2^192,4045046551706320328 + 3107893946407897444*2^64 + 6175055784433566370*2^128 + 78922137*2^192,7548406322943271552 + 10132798199364809196*2^64 + 13223798351057280130*2^128 + 1805553371*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5276 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 2*x^6 - 4*x^5 + 16*x^3 + 32*x^2 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 2*x^2 - 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 28

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^5 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 
Look at the ideal generated by: 
1*x^2*y^2 + 1*x^1*z^1*w^1 + 1*y^1*z^1*w^1
1*x^2*z^2 + 1*x^1*y^2*w^1 + 1*y^3*w^1 + 1*z^1*w^2
