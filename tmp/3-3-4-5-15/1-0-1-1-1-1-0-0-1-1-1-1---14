/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 56
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[0, 1, 3, 0, 0]  	15	2 
[1, 4, 1, 0, 0]  	19	7 
[1, 2, 0, 2, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	6 
[1, 3, 2, 0, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	8 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[1, 0, 3, 2, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	3 
[0, 2, 0, 4, 0]  	26	3 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[1, 3, 1, 0, 1]  	16	6 
[1, 1, 0, 2, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	6 
[1, 2, 2, 0, 1]  	17	6 
[1, 5, 0, 0, 1]  	18	7 
[1, 1, 2, 1, 1]  	19	5 
[1, 0, 4, 0, 1]  	19	5 
[1, 0, 3, 1, 1]  	20	4 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[0, 1, 2, 3, 2]  	26	2 
[1, 0, 2, 2, 5]  	21	6 
[0, 7, 0, 0, 251]  	21	5 
[0, 0, 4, 2, 253]  	26	1 
[2, 2, 0, 0, 255]  	12	3 
[0, 4, 1, 0, 255]  	16	3 
[0, 2, 0, 2, 255]  	16	2 
[0, 4, 0, 1, 255]  	17	3 
[0, 3, 2, 0, 255]  	17	2 
[0, 6, 0, 0, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 6 and 250.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8628322198518396154 + 9657400705305631796*2^64 + 16310142904291694474*2^128 + 1308973976*2^192,7743447178429842980 + 16762081552970182025*2^64 + 16900013823845347033*2^128 + 1104596212*2^192,15059155712265921676 + 14709319886571293268*2^64 + 16605781837031974070*2^128 + 162012182*2^192,16786359167886034956 + 15763123702537288217*2^64 + 6258686970212863493*2^128 + 349305756*2^192,15739664508051765600 + 22228754233532461*2^64 + 9821440573887762237*2^128 + 230978849*2^192,4522272124838919964 + 493788289801435944*2^64 + 16865610454168789087*2^128 + 369302132*2^192,17190098416214212588 + 1454858696371012859*2^64 + 4553908680310142727*2^128 + 425756603*2^192,14563744491608622352 + 6664779382679073612*2^64 + 8897331219891050486*2^128 + 59946261*2^192;\
16470100217560065628 + 17658531386252492116*2^64 + 2679246017650739519*2^128 + 1677479162*2^192,7673896084256002832 + 11854407654108485437*2^64 + 5259091470314196568*2^128 + 1590708299*2^192,9543925272270527432 + 16637823963577608306*2^64 + 17344431419431664082*2^128 + 1281447073*2^192,10028582217786775788 + 9462751203150430085*2^64 + 13492319017792148380*2^128 + 310962485*2^192,8585639555125276364 + 7192132688592548868*2^64 + 3250626480657861245*2^128 + 909573551*2^192,14057630498211854932 + 15095628474711029936*2^64 + 14434327826045123360*2^128 + 889809975*2^192,15685145397810237992 + 4297006492244338449*2^64 + 248274766294793*2^128 + 2094012867*2^192,10398393564584320192 + 16603510641605919137*2^64 + 5861251406476671222*2^128 + 1500563803*2^192;\
16696865687171531372 + 4050368591723020360*2^64 + 121671081366367275*2^128 + 15692014*2^192,6701880235964942224 + 10479624187701167765*2^64 + 15737684012243258314*2^128 + 1538218886*2^192,360940254633070080 + 384788174885801430*2^64 + 15485991959601010750*2^128 + 1709430473*2^192,10393042581201785144 + 12527888491872107772*2^64 + 17931379491859080886*2^128 + 1074805509*2^192,10943192771686129928 + 18006689243620594720*2^64 + 14792588226849876687*2^128 + 389176406*2^192,3261561712446668496 + 13819603824156022481*2^64 + 2772624390689160997*2^128 + 17036757*2^192,9274229376195675656 + 8147724218460646403*2^64 + 13073140343224327077*2^128 + 1672476592*2^192,16948663599819662488 + 11589604256431557058*2^64 + 3432020214987741546*2^128 + 1239377524*2^192;\
15759627015420355436 + 2226278293530122825*2^64 + 13384947747974101844*2^128 + 478097676*2^192,12176082297913492604 + 6391372446611168521*2^64 + 835465434174057325*2^128 + 1871780874*2^192,4850798890964604636 + 10439466680999135098*2^64 + 15337709478031548933*2^128 + 862591304*2^192,1763913812115850144 + 15189842181319463415*2^64 + 5682536791557639660*2^128 + 1033924965*2^192,1129342081839043420 + 804093516561062251*2^64 + 13035049045798049668*2^128 + 2049022287*2^192,14946434683212816204 + 4137539403298458487*2^64 + 1165272326323271868*2^128 + 1361785530*2^192,13098862083948805836 + 12221847434403278616*2^64 + 9988885528478892307*2^128 + 2075055971*2^192,137659749835920528 + 17719088874767935867*2^64 + 3816190804345204359*2^128 + 356802137*2^192;\
14803688455585441291 + 1513018653750971429*2^64 + 5266549325451890524*2^128 + 1844836051*2^192,501589096711126102 + 9928501001336725325*2^64 + 15138022642700237946*2^128 + 1599047620*2^192,2884318857587477338 + 5107136002535932008*2^64 + 16839973328732994694*2^128 + 1953493703*2^192,1927780338895196466 + 13526714949057727245*2^64 + 3882687743362047983*2^128 + 369443981*2^192,4812743664596541768 + 10953871938493666494*2^64 + 8419711809593587178*2^128 + 482588363*2^192,14052398685720550510 + 12522901077909939723*2^64 + 8377688591148454862*2^128 + 1150048920*2^192,11936615235419409438 + 12145696984659414910*2^64 + 11065733548265394027*2^128 + 1580795851*2^192,14468243804668305824 + 14389814970562718570*2^64 + 5853762308139248940*2^128 + 1031228426*2^192;\
4528428932820065047 + 13150867369599539986*2^64 + 3688433162783328083*2^128 + 1345470495*2^192,7628400782247299730 + 9132851126350814048*2^64 + 5162544889079310209*2^128 + 1653549401*2^192,9379811076895926098 + 15349447630139731714*2^64 + 10280822656680606839*2^128 + 1852813084*2^192,5310569270024082730 + 183508724310534514*2^64 + 18150868319714688942*2^128 + 128486312*2^192,7586890205259004288 + 2512523594354372238*2^64 + 2108554256923290844*2^128 + 223106977*2^192,2768204699002704582 + 11364194677286746168*2^64 + 3433929370672251751*2^128 + 60443509*2^192,16039240348985959958 + 6655364978884026234*2^64 + 9699230089510897536*2^128 + 489236817*2^192,16189270650050074240 + 6073347165198207535*2^64 + 6868273198191015782*2^128 + 1038095636*2^192;\
16618491344558023504 + 3638041205775646949*2^64 + 6439859810009254239*2^128 + 1499646453*2^192,6144685526973296740 + 14441584390804147613*2^64 + 13116608710395143096*2^128 + 784975720*2^192,17912869910686319180 + 1239842319016721977*2^64 + 11325773613161130198*2^128 + 1264305906*2^192,15495364134496548132 + 917708688373894205*2^64 + 13389098667384435777*2^128 + 1310116451*2^192,15569794284225884560 + 4539200009818836915*2^64 + 17178693690175523403*2^128 + 2093665915*2^192,5568925390825564480 + 16318196052031170878*2^64 + 7496364183598939694*2^128 + 1384346773*2^192,12376307167783187936 + 5709151583331430999*2^64 + 16367749264063042796*2^128 + 423492260*2^192,17315353624318383488 + 582022390766110860*2^64 + 13686219828558884211*2^128 + 173648496*2^192;\
12646976200582982532 + 6717290395463534828*2^64 + 15195535470030037219*2^128 + 967444695*2^192,3620920098535598368 + 16892347369260188397*2^64 + 7656602712181824680*2^128 + 1926547198*2^192,10144718401561874388 + 15963921722563136120*2^64 + 975241968166719330*2^128 + 683648078*2^192,8371627182463725860 + 868111728656840121*2^64 + 5604177477127491582*2^128 + 1856018737*2^192,2607065723545887236 + 10572735839975210872*2^64 + 16626103466375539345*2^128 + 1695038420*2^192,6942008060336773956 + 10567815813414242222*2^64 + 3987374472661415547*2^128 + 259945794*2^192,6352030052850837148 + 7815675445033289024*2^64 + 12248559405052209281*2^128 + 1263481873*2^192,2564299814225149032 + 9064242346445948084*2^64 + 15873460901748456747*2^128 + 175874655*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4656 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 - 8*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 31
The valuation of subst(g,x,A) is: 33
