/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 41
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 0, 1, 2, 0]  	17	2 
[2, 4, 0, 0, 0]  	18	7 
[3, 2, 0, 1, 0]  	20	4 
[1, 4, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[2, 2, 0, 2, 0]  	22	4 
[1, 3, 0, 2, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	4 
[1, 2, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[2, 3, 0, 0, 2]  	15	4 
[3, 0, 0, 2, 2]  	19	5 
[2, 1, 0, 2, 2]  	19	4 
[2, 0, 0, 3, 2]  	21	6 
[2, 1, 1, 1, 3]  	18	6 
[0, 1, 2, 3, 7]  	26	2 
[0, 0, 4, 2, 249]  	26	1 
[1, 5, 0, 0, 253]  	18	3 
[0, 4, 0, 0, 254]  	12	3 
[0, 2, 0, 2, 254]  	16	3 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 8 and 248.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[403520054211500752 + 6976992286637319820*2^64 + 17725634606282661976*2^128 + 326579601*2^192,12105393180817484784 + 16180478838793412211*2^64 + 16325843696131249768*2^128 + 1602809416*2^192,10876265815881534024 + 5302959958194363379*2^64 + 11124579125226853120*2^128 + 2718733479*2^192,12667290292097979800 + 10612093855173800477*2^64 + 3546536655558028591*2^128 + 167375997*2^192,9675921258784912312 + 9865029009468749594*2^64 + 12139488631346738489*2^128 + 1465742109*2^192,4796920779772288248 + 14558424896095015291*2^64 + 4268947670541250053*2^128 + 1163022821*2^192,13056893723385180840 + 8278969990944089227*2^64 + 9166257166290558564*2^128 + 1744041386*2^192,423338812681976960 + 391956180280244659*2^64 + 14111456385982276943*2^128 + 3248398350*2^192;\
4295761165556736296 + 6041588413843118034*2^64 + 7422257320584453988*2^128 + 1266261030*2^192,6925058553559437824 + 8654963989925251170*2^64 + 13458062445875652928*2^128 + 1282957489*2^192,8853744891900183052 + 11743716385910136507*2^64 + 11731243279446509268*2^128 + 649764385*2^192,17405766464745341044 + 2607399514096329910*2^64 + 5806103122556346837*2^128 + 428015001*2^192,4986443291821462516 + 9382666641975065481*2^64 + 15156927216416208077*2^128 + 1240681531*2^192,3789139771852598436 + 5148452970728112250*2^64 + 3554960227521876724*2^128 + 1994906940*2^192,17977156039613165388 + 14412493305656579549*2^64 + 4207221501874560351*2^128 + 905222767*2^192,16140215000342689520 + 1557591046546348269*2^64 + 5035672523675495185*2^128 + 1125600353*2^192;\
9977019089880415520 + 2426101192937138422*2^64 + 13988043612640251716*2^128 + 78104299*2^192,503983410732942184 + 12898177104425751353*2^64 + 7651752445456764274*2^128 + 3100337128*2^192,8135093193449672002 + 13304538729067702837*2^64 + 8781562198685663028*2^128 + 3004114523*2^192,16966395685318316740 + 18147282167535155992*2^64 + 654655305120358652*2^128 + 1684743491*2^192,8962742306953035570 + 9349273766215210092*2^64 + 17339732666662523192*2^128 + 3837763451*2^192,6610605912719179722 + 3090466870550475747*2^64 + 6364072373848229254*2^128 + 3731834830*2^192,2128694986747350878 + 13952639636563100979*2^64 + 9426837593439478262*2^128 + 2906382267*2^192,6184133404838684840 + 10777692525110406363*2^64 + 8039510467684461199*2^128 + 104742742*2^192;\
853947797233211112 + 3281836035599814840*2^64 + 7982489085745671507*2^128 + 1455566624*2^192,11421236359683339216 + 8922954758288760288*2^64 + 17573132268174777534*2^128 + 1362797085*2^192,16397953425405353620 + 9525505657043486352*2^64 + 15369957058662038848*2^128 + 1880217477*2^192,4415571387418040224 + 2875797668329491720*2^64 + 6751638685749335827*2^128 + 541035752*2^192,9378399948899155252 + 17146384721236375362*2^64 + 9292747142373135444*2^128 + 946412767*2^192,9040191741243386484 + 15555328603954547806*2^64 + 5862280363098046098*2^128 + 1061238869*2^192,3294278660738921516 + 13519016267078960191*2^64 + 17905576865724984466*2^128 + 382084309*2^192,7518988958615264096 + 14957439664190650147*2^64 + 15798735037831164622*2^128 + 486041870*2^192;\
14381560981324189 + 7714275181263215669*2^64 + 5490597331816600253*2^128 + 760842099*2^192,5879718598106373092 + 7740335263742186747*2^64 + 1695807553966021996*2^128 + 1866909012*2^192,4617921889081921505 + 4736405815543282770*2^64 + 6746863463384224871*2^128 + 1395097488*2^192,437926055800512441 + 11128494811842729791*2^64 + 11439714879252588583*2^128 + 1639874815*2^192,855367132356343911 + 9563501786848258001*2^64 + 17355403899874038415*2^128 + 1569676345*2^192,13531117979476882279 + 15000435874287879799*2^64 + 6220648940792014264*2^128 + 4130268815*2^192,11019659775643574921 + 344762866014847271*2^64 + 10452266925292474264*2^128 + 729109229*2^192,2013675771442358168 + 15696678319998186626*2^64 + 11875554513769338803*2^128 + 669910202*2^192;\
14381560981324189 + 7714275181263215669*2^64 + 5490597331816600253*2^128 + 811173747*2^192,5879718598106373092 + 7740335263742186747*2^64 + 1695807553966021996*2^128 + 172410196*2^192,4617921889081921505 + 4736405815543282770*2^64 + 6746863463384224871*2^128 + 707231632*2^192,437926055800512441 + 11128494811842729791*2^64 + 11439714879252588583*2^128 + 968786175*2^192,9051410067481753695 + 4325939849260179572*2^64 + 2285956887342259489*2^128 + 1439835995*2^192,5335075044351472495 + 1791253738166406612*2^64 + 2843351879614241575*2^128 + 485235566*2^192,11019659775643574921 + 344762866014847271*2^64 + 10452266925292474264*2^128 + 4218770157*2^192,2013675771442358168 + 15696678319998186626*2^64 + 11875554513769338803*2^128 + 1190003898*2^192;\
18080479762885092054 + 5500605955379601355*2^64 + 14001866835690836642*2^128 + 4193751831*2^192,3560524678348337048 + 14213300393219259719*2^64 + 3499405588521576467*2^128 + 676612997*2^192,13818251122386843732 + 17470563814496238566*2^64 + 5662640929025204872*2^128 + 984992833*2^192,13282423035382142102 + 2358411514548423357*2^64 + 2613208656058759753*2^128 + 4136406455*2^192,748386212068705032 + 15466526856914565290*2^64 + 17706787401489364400*2^128 + 2629680846*2^192,2974267406255197520 + 6231999769975668000*2^64 + 18349060667453407782*2^128 + 225938306*2^192,2397656316297932960 + 1482348951029781043*2^64 + 17521151078573179643*2^128 + 891419656*2^192,13005651830934649784 + 10856737974360536256*2^64 + 7736951398764243891*2^128 + 168681141*2^192;\
8820399800878333243 + 18039247112140012010*2^64 + 3520377653409903232*2^128 + 355091859*2^192,2893094505306865588 + 11367878969833078064*2^64 + 4973975910334432243*2^128 + 242276478*2^192,9733153689640149997 + 18359759990754482778*2^64 + 2583169191554460387*2^128 + 485374482*2^192,10011104500247913899 + 17450071304332811481*2^64 + 14428636052791717460*2^128 + 2638080119*2^192,9160072486579297351 + 5846618360899518314*2^64 + 13588014984576309657*2^128 + 4185793404*2^192,7884765618684994191 + 4962454079633500181*2^64 + 2565250515634482577*2^128 + 3146842514*2^192,8616580797538910617 + 10159179416630408213*2^64 + 3685428937656478563*2^128 + 422142702*2^192,3707292234398962144 + 4825205890195861049*2^64 + 12970659615698323168*2^128 + 2470516900*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5174 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^7 - 4*x^5 + 16*x^4 - 16*x^3 - 128*x + 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 2; x^6 + 2*x^5 + 4*x^4 + 4*x^3 + 16*x^2 + 32*x + 64, 1]
The valuation of f-g is: 31
The valuation of subst(g,x,A) is: 31

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
