/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 47
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[1, 4, 0, 0, 0]  	15	4 
[1, 0, 3, 0, 0]  	15	3 
[1, 0, 0, 3, 0]  	18	2 
[0, 5, 1, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 3, 1, 1, 0]  	21	7 
[1, 0, 2, 2, 0]  	21	5 
[1, 2, 2, 1, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	3 
[0, 3, 2, 1, 0]  	22	4 
[0, 2, 3, 1, 0]  	23	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 5, 0, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 5, 1, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	7 
[1, 3, 1, 0, 1]  	16	5 
[1, 1, 0, 2, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	5 
[1, 2, 2, 0, 1]  	17	6 
[1, 1, 2, 1, 1]  	19	5 
[0, 7, 0, 0, 1]  	21	6 
[0, 1, 5, 0, 1]  	23	3 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[1, 0, 1, 1, 255]  	12	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 1, 1, 2, 255]  	17	2 
[0, 3, 0, 2, 255]  	19	3 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 2 and 254.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[13690975095860549026 + 11566103828054836577*2^64 + 9506112413444367779*2^128 + 18679354*2^192,8362092311275656338 + 5835748237979614662*2^64 + 11475621617821931791*2^128 + 1072548539*2^192,6498987342103011226 + 17119603442255387950*2^64 + 7883969805274875153*2^128 + 687019232*2^192,123545077147471020 + 6407051129331642029*2^64 + 1942761603292310258*2^128 + 131493713*2^192,8995531262864435546 + 16448082737452956352*2^64 + 7105221457704497711*2^128 + 123703144*2^192,819468277535110402 + 9205815415417126432*2^64 + 5869941067471919782*2^128 + 388620611*2^192,1585487804091568136 + 9144911325270936423*2^64 + 6579478190146570380*2^128 + 60408485*2^192,6351294552959454356 + 6135392882494217855*2^64 + 16272545301150450060*2^128 + 570158000*2^192;\
16301802806221864133 + 5332092262165208604*2^64 + 11827628673795312827*2^128 + 527921421*2^192,6514576983063243632 + 785842300894244750*2^64 + 7167939137602223832*2^128 + 1005859738*2^192,5839539907541228232 + 10363222817582997805*2^64 + 12601181379481715280*2^128 + 991233636*2^192,12873907348743289888 + 15120866808028431098*2^64 + 3791488912074687816*2^128 + 718365750*2^192,15549923821521428772 + 4353702440301063876*2^64 + 8962776449321241973*2^128 + 936332514*2^192,17597242160792122462 + 2264225353398199867*2^64 + 12038834713158018791*2^128 + 88499325*2^192,6479976863744553048 + 4658058009444826084*2^64 + 14790793836345199691*2^128 + 788951282*2^192,2201809160814940804 + 1016075943412864504*2^64 + 2639724555077030641*2^128 + 112687369*2^192;\
18196698495786196548 + 7037516624243837068*2^64 + 13710292235400915941*2^128 + 60928433*2^192,8513155017696170995 + 18082836032880422342*2^64 + 8442889257138228993*2^128 + 230220610*2^192,11339791100985171706 + 13427078007609222460*2^64 + 12024270571225274771*2^128 + 204295506*2^192,17658163998733318305 + 2254598215592347755*2^64 + 5271415434173143481*2^128 + 1045194959*2^192,9664565512976888153 + 17093097867011382932*2^64 + 10347454707014138993*2^128 + 452634583*2^192,6685667147006304811 + 10887841931315574483*2^64 + 4902343118893346377*2^128 + 828283190*2^192,2181934737366339702 + 10398723820614363449*2^64 + 9950517772759473179*2^128 + 737494712*2^192,18073092228826747242 + 7938458298976157068*2^64 + 476876534520710366*2^128 + 1069382766*2^192;\
11533262731491086336 + 5502195622118962470*2^64 + 11966185506384422227*2^128 + 375320193*2^192,3900561893231097955 + 6274169230472633037*2^64 + 3727904394933481830*2^128 + 232171131*2^192,12914455153076288306 + 7660116553832988875*2^64 + 13132364636690403111*2^128 + 497453142*2^192,17223887059145209481 + 1144954328975426189*2^64 + 6287456401303952194*2^128 + 1036154514*2^192,4461904454800513893 + 1144392511617010052*2^64 + 6486809786282785878*2^128 + 458704437*2^192,2207098145514501967 + 11682123944384596129*2^64 + 6068650221584530720*2^128 + 479841792*2^192,17976104254799319718 + 6985112495345078797*2^64 + 10688045611808885705*2^128 + 954776836*2^192,15489514372324900738 + 17812383001760688558*2^64 + 1743471294660722028*2^128 + 798971268*2^192;\
3189227677666834281 + 13972483743493522839*2^64 + 9089765689792137691*2^128 + 529325915*2^192,14159459226889372599 + 1151867748702966568*2^64 + 1875418571095638265*2^128 + 44968024*2^192,8975778400189730898 + 17244442039356085431*2^64 + 15648175546020675388*2^128 + 382275343*2^192,4428551168473162059 + 6125157035833310127*2^64 + 10257319359999222757*2^128 + 211361461*2^192,14816737677238983939 + 10617863776586573113*2^64 + 2765045019932801413*2^128 + 541398096*2^192,11265431456799047511 + 16325494598687054974*2^64 + 12108699356699509684*2^128 + 497900014*2^192,12656514940291258458 + 6519259222130753325*2^64 + 18227851470704765789*2^128 + 1016917010*2^192,3858936167410707202 + 5865009310903753329*2^64 + 10446966839910637365*2^128 + 580953115*2^192;\
104958982493418811 + 8189141105599907959*2^64 + 9284539769092057942*2^128 + 778725508*2^192,11434775423991814277 + 2028348029674435498*2^64 + 7374778378743664023*2^128 + 889566222*2^192,5811020189487591305 + 17050335694158080421*2^64 + 6419872076838882489*2^128 + 849987083*2^192,3801680329663565546 + 16336820705223409591*2^64 + 462310118139264345*2^128 + 378471985*2^192,9579650790665792385 + 12269939839040845256*2^64 + 16726790393144446422*2^128 + 424511289*2^192,2882099149723806841 + 7074549268495126088*2^64 + 14533484862372852208*2^128 + 617619079*2^192,11751107416269128850 + 3250385967957353515*2^64 + 17931696873061169528*2^128 + 245819588*2^192,5970799081055308866 + 3182555922940974856*2^64 + 5412734197470396919*2^128 + 185807653*2^192;\
4419910450651687903 + 11232928949586016356*2^64 + 16114986732120349907*2^128 + 317803405*2^192,15314115404614532827 + 17771028241743929220*2^64 + 550827860093203479*2^128 + 11306556*2^192,2616220568967144969 + 5103335132874143722*2^64 + 9518240052380367726*2^128 + 605779505*2^192,2479948139026634738 + 578161328467024597*2^64 + 13997722661234999137*2^128 + 421172158*2^192,9820349404085116761 + 4826735516739315448*2^64 + 14554394390163566750*2^128 + 433985022*2^192,9675010199050503159 + 8995124655446300467*2^64 + 10262402921123496825*2^128 + 1023961833*2^192,12248645032815074662 + 1028282358257312483*2^64 + 1453595081044869974*2^128 + 287342875*2^192,15007479926615765290 + 664337946652608406*2^64 + 14522278099146786168*2^128 + 1020819775*2^192;\
16887836374873117950 + 134119073712124835*2^64 + 7872748420136992503*2^128 + 419664124*2^192,13704692110520285005 + 3356616994089799910*2^64 + 7752207388089240310*2^128 + 295973329*2^192,11770848181321103076 + 6407077539596928559*2^64 + 4078859696317829164*2^128 + 94429076*2^192,15889807790476421861 + 594422157338983005*2^64 + 15935518252737690217*2^128 + 513298630*2^192,17101594104295556751 + 13114676716978474862*2^64 + 671689498641093450*2^128 + 819668692*2^192,3584255948948860617 + 16759039758733263045*2^64 + 18120393580030856490*2^128 + 70785141*2^192,2674162395284552946 + 14378710843689746089*2^64 + 8327271775399129695*2^128 + 793577745*2^192,15556051232122225290 + 14891069868964917364*2^64 + 932119502240841275*2^128 + 838243501*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 4905 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 4*x^5 + 16*x^3 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 + 4, 1; x^4 - x^3 - 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 29

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
Look at the ideal generated by: 
1*x^2*y^1 + 1*z^1*w^1
1*x^1*z^2 + 1*y^2*w^1
