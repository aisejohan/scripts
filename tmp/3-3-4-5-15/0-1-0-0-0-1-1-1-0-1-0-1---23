/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 4, 0, 0, 0]  	15	3 
[1, 0, 3, 0, 0]  	15	2 
[0, 2, 3, 0, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	4 
[2, 0, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[3, 0, 2, 1, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	3 
[0, 1, 3, 2, 0]  	25	3 
[1, 0, 2, 3, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 0, 1, 3, 1]  	22	4 
[0, 0, 5, 1, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	4 
[2, 0, 0, 2, 2]  	16	6 
[3, 0, 2, 0, 2]  	17	6 
[2, 0, 2, 1, 2]  	19	5 
[1, 0, 2, 2, 2]  	21	6 
[0, 4, 0, 0, 254]  	12	3 
[0, 3, 0, 2, 254]  	19	3 
[0, 3, 2, 1, 255]  	22	3 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[15785496766491179624 + 2949435370787871026*2^64 + 15564851350422760392*2^128 + 471920215*2^192,6424069732731404984 + 17342915198970712293*2^64 + 5393297342540433205*2^128 + 4178601542*2^192,11779568500551530600 + 751907068623007304*2^64 + 17539896378600571992*2^128 + 2850666351*2^192,6090780032694371912 + 7708501242823725669*2^64 + 4718221787139499539*2^128 + 220243791*2^192,12331576150788054360 + 14056570828800418122*2^64 + 1539597430356699551*2^128 + 3478222464*2^192,10046083869467531136 + 1582656965018483005*2^64 + 18425237905955055593*2^128 + 1841881890*2^192,2476224668766898072 + 520939539727556592*2^64 + 17779974326234387569*2^128 + 728362885*2^192,7351270636829414464 + 6862753320969849045*2^64 + 10543700770465875533*2^128 + 3838797251*2^192;\
2213187222104375344 + 3606957536842374677*2^64 + 5729026470095054245*2^128 + 870617490*2^192,12559130862878732912 + 18188821440984160964*2^64 + 2157615094336395833*2^128 + 1901660295*2^192,7493760116211482440 + 5281515548835551743*2^64 + 13879498924451174911*2^128 + 516359212*2^192,16997803759436291512 + 12661121231070852322*2^64 + 15058464310879320340*2^128 + 2018172075*2^192,6500623167908959520 + 16960443510257953724*2^64 + 4498498234579129948*2^128 + 242090192*2^192,6018417900450798184 + 6822379779187165004*2^64 + 10101608905668500251*2^128 + 1325833561*2^192,10798401676346290184 + 12031914956200210465*2^64 + 3206815829171056023*2^128 + 992686100*2^192,1069987518378381776 + 13189732549621117994*2^64 + 4322904757777781330*2^128 + 1766255476*2^192;\
11754298174535483488 + 4295281692554734048*2^64 + 150319366679504986*2^128 + 292685148*2^192,17047695153259629260 + 8486628370166813535*2^64 + 14793712131197368213*2^128 + 283474496*2^192,9640638838882960580 + 9941515376622992248*2^64 + 13202391155582113051*2^128 + 2110671954*2^192,2114599413310054412 + 4877578357353620898*2^64 + 3165028162595571552*2^128 + 1904238320*2^192,17082250752157447260 + 10150477433674454418*2^64 + 1371533226928551757*2^128 + 1615376688*2^192,12350283255760482088 + 10641931557542814307*2^64 + 4929185934436318875*2^128 + 1165806045*2^192,18355033828785406220 + 17447177175427072690*2^64 + 4896474764840332658*2^128 + 710786298*2^192,549587360286568928 + 16669642135516961631*2^64 + 10315385786090136275*2^128 + 1976069092*2^192;\
10591851620936739307 + 3046816258927496351*2^64 + 15479512088278642719*2^128 + 1624620615*2^192,13062186374447522571 + 2115468535257967434*2^64 + 14438996481039145823*2^128 + 1035477946*2^192,10416601428164055923 + 13260268930029342691*2^64 + 14276413741196781061*2^128 + 1497612611*2^192,9259201478039667873 + 14895202685447703783*2^64 + 11003926455378993481*2^128 + 1465240581*2^192,7157046151368938635 + 6210700763539806784*2^64 + 15094334090866365026*2^128 + 4153786333*2^192,998016427727657024 + 4786350869821266909*2^64 + 5224604696808714809*2^128 + 4240229313*2^192,14828783692582191989 + 13121989615661186281*2^64 + 6068101819068586337*2^128 + 551606045*2^192,9389762763953079084 + 14525357809224120732*2^64 + 3424954059911009088*2^128 + 431958504*2^192;\
15948156591345717343 + 8646876582888079879*2^64 + 10760063172833421055*2^128 + 44968553*2^192,7760958209988016527 + 11786412139887313534*2^64 + 5977844968043581637*2^128 + 1525447975*2^192,7600476735134217199 + 16238562476777181672*2^64 + 12817922465901464690*2^128 + 3968253474*2^192,18336607560984703397 + 14475912703855971365*2^64 + 15714125030976996932*2^128 + 3264215048*2^192,3229083202960657479 + 10952030997529350868*2^64 + 6045433197914063738*2^128 + 44325503*2^192,14587091002501706992 + 14251768213065740222*2^64 + 1006383529213004576*2^128 + 284999331*2^192,17017481975258067433 + 2340141471361365323*2^64 + 5449766148920771375*2^128 + 3433095485*2^192,14773645755870424332 + 14546757879944284312*2^64 + 2707098809480009725*2^128 + 3596637147*2^192;\
10591851620936739307 + 3046816258927496351*2^64 + 15479512088278642719*2^128 + 3444948551*2^192,13062186374447522571 + 2115468535257967434*2^64 + 14438996481039145823*2^128 + 2654479290*2^192,10416601428164055923 + 13260268930029342691*2^64 + 14276413741196781061*2^128 + 3217277251*2^192,17455244413165077657 + 9657640747859625354*2^64 + 14381223516556766171*2^128 + 379098918*2^192,7157046151368938635 + 6210700763539806784*2^64 + 15094334090866365026*2^128 + 739622877*2^192,11248717566311798856 + 10023912807409345337*2^64 + 1847307635630942119*2^128 + 2180642976*2^192,14828783692582191989 + 13121989615661186281*2^64 + 6068101819068586337*2^128 + 920704797*2^192,9389762763953079084 + 14525357809224120732*2^64 + 3424954059911009088*2^128 + 1128212968*2^192;\
12350880822053416972 + 9172653919366746884*2^64 + 6555156476603727161*2^128 + 2032947830*2^192,1503529730031476584 + 7641592183342582591*2^64 + 4966293986228091710*2^128 + 3303541950*2^192,6274375957500990464 + 4446247210293909034*2^64 + 15407676650022646846*2^128 + 1669168290*2^192,146732658713129416 + 16734374698361635189*2^64 + 8152938648174589110*2^128 + 3391700196*2^192,6795454513089597208 + 6673186199559596334*2^64 + 12436829524239992705*2^128 + 2713166763*2^192,1246306995631849792 + 7701475393513832996*2^64 + 7290762891560982658*2^128 + 2385980761*2^192,14687465379516272840 + 12693358368633678538*2^64 + 4292150530822057485*2^128 + 3656550178*2^192,5197569731350306192 + 12862952642224755795*2^64 + 11567755096383535084*2^128 + 1946218574*2^192;\
13373035836677237936 + 7362891236052007180*2^64 + 15063401471325724806*2^128 + 563395767*2^192,9897283570515072312 + 3509550409001483975*2^64 + 9756596600161650653*2^128 + 935107501*2^192,13857449123786758168 + 5131169614175080218*2^64 + 17819686722889714706*2^128 + 1448864498*2^192,3427179771129300808 + 5447840722286933776*2^64 + 1977550561949465851*2^128 + 1722088473*2^192,2470834824232704952 + 13606063431421672916*2^64 + 12151687393755216775*2^128 + 357320903*2^192,16459894360028072864 + 17141863241091818138*2^64 + 15192072566142000125*2^128 + 683863858*2^192,13505269735537023400 + 17523607660299878128*2^64 + 5247174259021947802*2^128 + 43180155*2^192,7730810344479691888 + 6793732280752059150*2^64 + 12633386861132133914*2^128 + 1970430869*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4227 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 8*x^5 + 16*x^4 - 32*x^3 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 - 2*x + 4, 1; x^2 + 2*x + 4, 1; x^2 + 3*x + 4, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 26

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
