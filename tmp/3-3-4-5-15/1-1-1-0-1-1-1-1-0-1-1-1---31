/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 52
[2, 0, 1, 0, 0]  	10	4 
[2, 0, 0, 1, 0]  	11	5 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	6 
[1, 0, 3, 0, 0]  	15	3 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	7 
[1, 0, 0, 3, 0]  	18	3 
[1, 2, 0, 2, 0]  	19	6 
[1, 1, 2, 1, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	5 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 6, 1, 0, 0]  	22	4 
[0, 3, 2, 1, 0]  	22	4 
[0, 5, 2, 0, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 4, 3, 0, 0]  	24	5 
[0, 3, 4, 0, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	7 
[1, 1, 0, 2, 1]  	16	6 
[0, 5, 1, 0, 1]  	19	5 
[0, 4, 2, 0, 1]  	20	4 
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[1, 2, 2, 0, 3]  	17	6 
[1, 5, 0, 0, 6]  	18	7 
[1, 2, 1, 1, 250]  	18	6 
[1, 0, 1, 2, 253]  	17	5 
[2, 2, 0, 0, 255]  	12	4 
[1, 0, 2, 1, 255]  	16	2 
[0, 2, 2, 1, 255]  	19	1 
[0, 1, 3, 1, 255]  	20	3 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 7 and 249.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[13252410543458539806 + 3419671266152666746*2^64 + 5705628087195181710*2^128 + 1910852975*2^192,1449515175412453604 + 908854284749775982*2^64 + 15750282702636164472*2^128 + 1357695283*2^192,13118853167622435840 + 2295636833982862400*2^64 + 2303526766299458015*2^128 + 2031729796*2^192,18443384654092986784 + 1565983340281466152*2^64 + 11726985315708944001*2^128 + 1802911277*2^192,13945526609217757580 + 9224611043824061213*2^64 + 3836026542230932183*2^128 + 2062695226*2^192,9350755103553894400 + 9829390441098864422*2^64 + 17872716446972089401*2^128 + 1930773451*2^192,10063794956673719616 + 6464443800952136236*2^64 + 2140974781869928597*2^128 + 1573225474*2^192,4270343442706435856 + 15385885944367939937*2^64 + 6514817624519145563*2^128 + 1042538403*2^192;\
2404981830998604063 + 1793647655854869973*2^64 + 15497608652760315694*2^128 + 843932721*2^192,5259956167180781698 + 17553168739383993445*2^64 + 14539652620851391416*2^128 + 2114381394*2^192,3420576772557425296 + 12460411737586212245*2^64 + 12942898882291894792*2^128 + 1860498532*2^192,5176576650246239936 + 15079342713627876249*2^64 + 2014059589078222445*2^128 + 512616523*2^192,2780372195441308130 + 7318368624370700907*2^64 + 4564917780645013260*2^128 + 1068132315*2^192,13460669858157456968 + 18030559123077389850*2^64 + 4975693375996073273*2^128 + 1847976156*2^192,12003420233166939164 + 14793168524405189225*2^64 + 14772143166057211052*2^128 + 210602915*2^192,6836246845872392512 + 12690848643962381430*2^64 + 17274734724356312755*2^128 + 197558734*2^192;\
9797041268307804999 + 1342658558882555512*2^64 + 13015157385427030267*2^128 + 1920690463*2^192,9024999546532309602 + 6858449360787473558*2^64 + 8093725348390724623*2^128 + 2146880438*2^192,8647540998316118036 + 17389205185312300662*2^64 + 18231111094040647247*2^128 + 1752232234*2^192,10730567860463109816 + 1193920195568070345*2^64 + 11614110851651738902*2^128 + 1611952245*2^192,457900964114740510 + 4830234602876474377*2^64 + 3266932583044488221*2^128 + 723594564*2^192,18371180357280440192 + 11957610125929741025*2^64 + 13590185449737344804*2^128 + 423237634*2^192,4658862223552740284 + 3246168660886839162*2^64 + 15946801565293467063*2^128 + 2131245557*2^192,8145263131208053040 + 12197225864026587633*2^64 + 3795546264783761737*2^128 + 1790593033*2^192;\
474885940794691550 + 11547513720844796167*2^64 + 6866460997683665058*2^128 + 328283176*2^192,2447970433302028020 + 15699633456507795256*2^64 + 15297095089994642734*2^128 + 1361981645*2^192,8760689422779616388 + 14547458416222705822*2^64 + 539900433132920366*2^128 + 1039341518*2^192,3864091392809645940 + 3358120950243772631*2^64 + 14760672155663437846*2^128 + 1233285974*2^192,14870738448760946716 + 15836148404015589298*2^64 + 6774719712525789788*2^128 + 682977252*2^192,4649562318009992760 + 5126332408997538280*2^64 + 4958573898351724986*2^128 + 873607657*2^192,4120551652124502776 + 10291132785178672888*2^64 + 778762785635420166*2^128 + 1802700822*2^192,1036013327629245416 + 5377374985097120835*2^64 + 3953817634817907882*2^128 + 224951656*2^192;\
2769053356717527505 + 10823899945298423367*2^64 + 10301571869878382853*2^128 + 1283053428*2^192,7370362905854732086 + 14631608687314023981*2^64 + 3412837720100867346*2^128 + 1018228878*2^192,15310367589541336308 + 15694597310885493775*2^64 + 1596606499337936876*2^128 + 489444678*2^192,7203919216229680124 + 13243011286983578547*2^64 + 1596065039896678994*2^128 + 717785150*2^192,6404042295304162306 + 10374441249621826461*2^64 + 11490804906724856889*2^128 + 537196313*2^192,7491548274155867800 + 1414208984270511051*2^64 + 15705721790996985217*2^128 + 167457981*2^192,4416922955860251260 + 4239624778268067421*2^64 + 17617065743302901944*2^128 + 1670349328*2^192,6116973636302139976 + 1684268701012174816*2^64 + 8174723101311457073*2^128 + 1402543558*2^192;\
16438864144445975413 + 788319692322392671*2^64 + 3895961274138365768*2^128 + 311456910*2^192,16613848623673597434 + 152776326343969345*2^64 + 5649123169794192165*2^128 + 1382354540*2^192,15683938429015376596 + 2011518506571491859*2^64 + 3401037075248653880*2^128 + 2099318966*2^192,6593584384226831496 + 13059399310767248750*2^64 + 14640245008781514560*2^128 + 101286506*2^192,15790061158936616670 + 7017592007014353704*2^64 + 17356338776437723715*2^128 + 537685416*2^192,9273816112716856372 + 15556387936512646033*2^64 + 17009542171670993643*2^128 + 1308858881*2^192,7403343131263394596 + 16364504972979829833*2^64 + 8885529988057656293*2^128 + 1424147608*2^192,922864353097371256 + 322988700667019112*2^64 + 16746857118602241533*2^128 + 1209895317*2^192;\
1067321299664549081 + 5812045172902258793*2^64 + 620610760051062513*2^128 + 20183765*2^192,15714169104201867754 + 2742627043533194950*2^64 + 8737688046287044204*2^128 + 1216907971*2^192,11984907522532395740 + 14098491646589517014*2^64 + 15605239099917198884*2^128 + 2083958254*2^192,11024794649172961584 + 18437900572032751919*2^64 + 2548120055220444232*2^128 + 539702240*2^192,3791542712759979598 + 13743249949937566168*2^64 + 6536883393155726186*2^128 + 673472025*2^192,3032975894731884920 + 2248459700278594755*2^64 + 16828024573960864280*2^128 + 741668631*2^192,12295628703858635148 + 9232823707083941248*2^64 + 4305111901069479500*2^128 + 2065601658*2^192,7735794793238775840 + 10464780823789315712*2^64 + 12395126987632297066*2^128 + 1787997038*2^192;\
13203850110584671329 + 13583831488035113176*2^64 + 18176919017848178932*2^128 + 311333654*2^192,5948942492724416958 + 11385477640765437199*2^64 + 303674976522576974*2^128 + 1600116314*2^192,14139505402017479124 + 4307452787353992420*2^64 + 15516843861576736918*2^128 + 1019756863*2^192,12419371854729776960 + 10926793859597794706*2^64 + 4842470297437211864*2^128 + 2054926317*2^192,1252251770139331026 + 9989249571087454793*2^64 + 12792531011740340199*2^128 + 359844937*2^192,3596988165838329416 + 14896430692954219611*2^64 + 2142864923720384357*2^128 + 1539851369*2^192,13018566471005105956 + 15010153733766007669*2^64 + 290331001333694751*2^128 + 726275286*2^192,17344100747623734552 + 12675329045007647515*2^64 + 5730203183546013813*2^128 + 919739644*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5276 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 4*x^6 + 16*x^4 - 64*x^2 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + x^3 - 2*x^2 + 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 28

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
