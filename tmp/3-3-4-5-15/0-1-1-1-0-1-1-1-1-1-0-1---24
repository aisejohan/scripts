/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 57
[1, 1, 1, 0, 0]  	10	3 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[1, 0, 3, 0, 0]  	15	2 
[0, 2, 3, 0, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	5 
[2, 0, 2, 1, 0]  	19	5 
[2, 0, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[1, 0, 1, 3, 0]  	22	4 
[0, 6, 1, 0, 0]  	22	5 
[1, 0, 0, 4, 0]  	23	3 
[0, 5, 2, 0, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 4, 2, 1, 0]  	25	2 
[0, 1, 3, 2, 0]  	25	3 
[0, 4, 1, 2, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	4 
[0, 3, 1, 3, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 3, 0, 4, 0]  	29	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 0, 0, 3, 1]  	18	3 
[0, 5, 1, 0, 1]  	19	4 
[0, 4, 2, 0, 1]  	20	4 
[0, 2, 1, 2, 1]  	20	4 
[1, 6, 0, 0, 1]  	21	6 
[1, 0, 2, 2, 1]  	21	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[0, 2, 0, 4, 1]  	26	2 
[3, 1, 0, 0, 2]  	12	6 
[2, 0, 0, 2, 2]  	16	6 
[3, 0, 2, 0, 2]  	17	6 
[0, 4, 0, 2, 3]  	22	4 
[0, 7, 0, 0, 253]  	21	5 
[2, 2, 0, 0, 254]  	12	5 
[1, 0, 2, 1, 254]  	16	4 
[1, 0, 1, 2, 254]  	17	4 
[0, 3, 2, 1, 254]  	22	3 
[0, 0, 0, 5, 254]  	25	1 
[0, 6, 0, 0, 255]  	18	1 
[0, 1, 4, 0, 255]  	19	2 
[0, 1, 3, 1, 255]  	20	2 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[12025810580991808674 + 2505353121887853461*2^64 + 11846085310978099835*2^128 + 1330114729*2^192,17681135590602490418 + 6671609857322299998*2^64 + 9077980748198593218*2^128 + 1179054712*2^192,11431253736210303682 + 16016168329658271135*2^64 + 10099412800577980949*2^128 + 105972569*2^192,1044807005705614296 + 15647902752066756951*2^64 + 794116028617794164*2^128 + 609133470*2^192,6452909244359014538 + 14255514781642991699*2^64 + 2813152716773491308*2^128 + 1357280227*2^192,7895939685873655782 + 1611573691642863120*2^64 + 8203522363181506419*2^128 + 1612823277*2^192,1844838717324984308 + 14824654983852877789*2^64 + 15789958736320284036*2^128 + 1273856697*2^192,15948068429732277156 + 4820222986217242129*2^64 + 16146541438559799650*2^128 + 817628960*2^192;\
16301919798298349064 + 1390975012049233558*2^64 + 6170902977744318214*2^128 + 824932601*2^192,5261054295886035056 + 7641781849511799954*2^64 + 7290241968849030872*2^128 + 545037918*2^192,4969963505163428528 + 7701192023381908480*2^64 + 769006311766098048*2^128 + 492692925*2^192,13272481899045505080 + 17458894235867349619*2^64 + 953286250404995630*2^128 + 371698789*2^192,4069160958088468820 + 5174122200280110316*2^64 + 11795733622257070907*2^128 + 406553296*2^192,10394210327017344400 + 12570795132933337573*2^64 + 6062476238935681892*2^128 + 1037137747*2^192,5501082580412261528 + 12513361395029503537*2^64 + 17527894351262929515*2^128 + 287142080*2^192,8141862243506055240 + 12251089907164905502*2^64 + 3404779749301459901*2^128 + 350333194*2^192;\
6648850231059244977 + 6178740111239743713*2^64 + 8092324845063746346*2^128 + 854399085*2^192,4855983675647543107 + 4746264318882901554*2^64 + 2287512887110746823*2^128 + 901285715*2^192,3818881787126976007 + 7967272320077491243*2^64 + 6399986587886281610*2^128 + 667132106*2^192,5171840987293663880 + 2164200967022117814*2^64 + 404769799932937222*2^128 + 1242650832*2^192,7127603540267959295 + 3631885750215343539*2^64 + 7116719291274761326*2^128 + 1877005822*2^192,12608688469194932925 + 4098670462841592194*2^64 + 1224360233841644834*2^128 + 486668254*2^192,6158378794760042706 + 2234411470992686939*2^64 + 5637804375997042183*2^128 + 650926096*2^192,13864376334133552214 + 18393929224609341258*2^64 + 18008353705414270802*2^128 + 402279502*2^192;\
7261444140064653789 + 3337202212613706504*2^64 + 8795573314170976995*2^128 + 1336626678*2^192,3265079117457485675 + 11643421505585899636*2^64 + 13916364808417125955*2^128 + 358149886*2^192,16736994014415701155 + 14021933404983957038*2^64 + 59110905839866823*2^128 + 166825182*2^192,16787446460639395572 + 1172362460285564803*2^64 + 11414939328236129662*2^128 + 940703350*2^192,6377787708309997307 + 14921914788491028065*2^64 + 15117201083079378846*2^128 + 1363317366*2^192,9839653492088829525 + 6947585894803152364*2^64 + 17706178156989632097*2^128 + 1212088124*2^192,15588446875997286034 + 10316547880438173476*2^64 + 12877858877664913879*2^128 + 867363306*2^192,13325993166414838262 + 8004710723622106831*2^64 + 2652725285975150380*2^128 + 559741130*2^192;\
8170045652788605700 + 3208657802666810876*2^64 + 5508371224575908756*2^128 + 1771296314*2^192,2433624933796459378 + 11963660694141386722*2^64 + 5126157743187800431*2^128 + 1994832244*2^192,7388741178995535054 + 12096915768364127996*2^64 + 13538571312578800520*2^128 + 2055948007*2^192,2519260448133346736 + 7234319535002110741*2^64 + 14966516545761217116*2^128 + 2023878601*2^192,16483444558898029190 + 13832225407825346193*2^64 + 8447195221225848313*2^128 + 1892378197*2^192,6730357583982172414 + 2963696633985570374*2^64 + 16663060119123075815*2^128 + 1632620959*2^192,2685524026950155268 + 10232381731952725416*2^64 + 16951821572310977789*2^128 + 234537091*2^192,1250922994071935732 + 14221128723193936463*2^64 + 15987658585645060398*2^128 + 1530200318*2^192;\
1294267919947368873 + 9254849653494329765*2^64 + 1563478026930529512*2^128 + 2096849331*2^192,8212265270083067401 + 16447667256962392876*2^64 + 412691227485117993*2^128 + 1836550735*2^192,17714355382248352257 + 2646620105606416371*2^64 + 5227134826846973742*2^128 + 1236224542*2^192,8778448630197882060 + 2332572555029282054*2^64 + 4516820654153378545*2^128 + 745294511*2^192,9752030212151173093 + 10761889507550275876*2^64 + 7945375146223684491*2^128 + 1691960156*2^192,2760641847574792283 + 2982219012593820442*2^64 + 10267978578498219804*2^128 + 1254730163*2^192,5704411362322809038 + 14957645803512058131*2^64 + 14915307429162718252*2^128 + 1362562289*2^192,3458190977041028090 + 127529672877979966*2^64 + 12546830706845563639*2^128 + 1374842404*2^192;\
17655091796451301722 + 16356816626480678500*2^64 + 2980885483167093100*2^128 + 1607068617*2^192,12788653992772989222 + 1945561467595523634*2^64 + 5161914359610159545*2^128 + 1308697695*2^192,12136484729457341074 + 4248978046000654973*2^64 + 9367623657818966821*2^128 + 748774677*2^192,1442978792903039952 + 10747155561094434831*2^64 + 4368286276277719606*2^128 + 636999999*2^192,3163991637924719362 + 17942822750177736112*2^64 + 1498126658862060339*2^128 + 1223709225*2^192,4654425683387159950 + 13354788026630977941*2^64 + 9943487412652559714*2^128 + 871581650*2^192,17788458056568171476 + 10445357196231319436*2^64 + 11845378448755883779*2^128 + 123334925*2^192,9390588274308368196 + 9911318323641528339*2^64 + 4206188771197926845*2^128 + 1410214061*2^192;\
2481012603486040698 + 10529944876447297383*2^64 + 16942467781696636755*2^128 + 32085822*2^192,1872332198500172778 + 5236914594573976736*2^64 + 10523035240487011908*2^128 + 274916406*2^192,17822057212107491778 + 179243725184383853*2^64 + 10072064733070962261*2^128 + 298650761*2^192,8680489714398898200 + 18103554500458166677*2^64 + 9673389692671166244*2^128 + 502439435*2^192,13803869498178049042 + 7438595077678058543*2^64 + 6366297779334676524*2^128 + 378305171*2^192,12845011655476420358 + 829496851798491445*2^64 + 2968334884475250003*2^128 + 1033542309*2^192,15029202564582783644 + 15632396638399490205*2^64 + 773835741654301452*2^128 + 306460299*2^192,6863875704143204156 + 4399825674911739203*2^64 + 13389009286798927829*2^128 + 951629526*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4121 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 - 4*x^5 - 8*x^4 - 16*x^3 + 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - x^5 - 2*x^4 + 4*x^3 - 8*x^2 - 16*x + 64, 1]
The valuation of f-g is: 27
The valuation of subst(g,x,A) is: 26
