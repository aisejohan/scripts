/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 53
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 4, 0, 0, 0]  	15	3 
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	6 
[1, 1, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[1, 2, 2, 1, 0]  	22	5 
[0, 6, 1, 0, 0]  	22	5 
[1, 0, 5, 0, 0]  	23	5 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[1, 0, 3, 2, 0]  	25	3 
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	2 
[1, 0, 2, 3, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 1, 2, 1, 1]  	19	5 
[1, 0, 4, 0, 1]  	19	5 
[1, 0, 3, 1, 1]  	20	5 
[1, 0, 2, 2, 1]  	21	6 
[1, 0, 1, 3, 1]  	22	5 
[1, 0, 0, 4, 1]  	23	4 
[0, 5, 2, 0, 1]  	23	3 
[0, 0, 5, 1, 1]  	25	2 
[0, 4, 0, 3, 1]  	27	3 
[3, 1, 0, 0, 2]  	12	4 
[1, 1, 0, 2, 2]  	16	6 
[1, 2, 2, 0, 2]  	17	6 
[0, 4, 2, 0, 3]  	20	4 
[0, 4, 0, 2, 3]  	22	4 
[0, 3, 0, 3, 3]  	24	4 
[0, 2, 1, 2, 252]  	20	3 
[0, 3, 2, 1, 252]  	22	3 
[0, 7, 0, 0, 254]  	21	4 
[0, 1, 0, 4, 254]  	23	2 
[1, 0, 1, 1, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	2 
[0, 3, 0, 2, 255]  	19	3 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 251.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[7892748383245589812 + 1474717685393935513*2^64 + 17005797712066156004*2^128 + 1999009579*2^192,9142069775169308828 + 8289550178899404293*2^64 + 4276220937274666095*2^128 + 1554534842*2^192,64967662193356816 + 18057607543796541249*2^64 + 5184309650772760492*2^128 + 706119706*2^192,14246413971588541376 + 10014700519364017310*2^64 + 9212618952977527796*2^128 + 177041809*2^192,12295461146742259260 + 9968070621925083744*2^64 + 10852066228261341454*2^128 + 432650787*2^192,5889784250275765300 + 375953534311503652*2^64 + 17993320226155061804*2^128 + 485415863*2^192,1238112334383449036 + 9483841806718554104*2^64 + 18113359199971969592*2^128 + 1954936770*2^192,12899007355269483040 + 12654748697339700330*2^64 + 14495222422087713574*2^128 + 905097953*2^192;\
15709784905545624618 + 12353111555854558912*2^64 + 5934463970861817793*2^128 + 1013285744*2^192,2737384661716752566 + 8128940545744061208*2^64 + 1491712147024085100*2^128 + 809331527*2^192,8490694703902832508 + 16562500973871033698*2^64 + 1052503268097968892*2^128 + 665300368*2^192,16450711218254237568 + 8874042334067017797*2^64 + 7997534680092121997*2^128 + 390854781*2^192,16310521586948231238 + 16537019203997414098*2^64 + 6569445638286030852*2^128 + 808333613*2^192,16060285291090991386 + 10372950287360417848*2^64 + 8340660665025541108*2^128 + 289373560*2^192,7235920762254719254 + 10649508916096730668*2^64 + 6310540435572378940*2^128 + 1027592645*2^192,18113962619512945064 + 7842772528970861766*2^64 + 11596835953887533438*2^128 + 787098671*2^192;\
10603608764551580858 + 10133288509091278278*2^64 + 10150839877053623078*2^128 + 1526900106*2^192,12411745457188669698 + 8883177828889503335*2^64 + 7585972402659846385*2^128 + 149728399*2^192,12590143783978512758 + 7371663609727321667*2^64 + 17670783661006498464*2^128 + 1468565032*2^192,924230274355051278 + 7396754438863135804*2^64 + 13418766412662893765*2^128 + 1722440504*2^192,10593421089193798812 + 7176499149833650901*2^64 + 1725357367198449929*2^128 + 80182813*2^192,13369680372744212464 + 11025532394699356285*2^64 + 6482742943389640265*2^128 + 1132773509*2^192,10041108494857653444 + 6994631351527245766*2^64 + 17954207951490695091*2^128 + 1929457386*2^192,6263933661301507740 + 15138610900944190327*2^64 + 8501573472625830156*2^128 + 18985001*2^192;\
0 + 0*2^64 + 0*2^128 + 553648128*2^192,0 + 0*2^64 + 0*2^128 + 1006632960*2^192,0 + 0*2^64 + 0*2^128 + 352321536*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 56531567*2^192,0 + 0*2^64 + 0*2^128 + 822083584*2^192,0 + 0*2^64 + 0*2^128 + 419430400*2^192,0 + 0*2^64 + 0*2^128 + 285212672*2^192,0 + 0*2^64 + 0*2^128 + 654311424*2^192;\
6640880624878034938 + 6466659335535785021*2^64 + 13118929746520281931*2^128 + 449113549*2^192,10404234222752030826 + 18242428409143819342*2^64 + 12618215562336322497*2^128 + 213388483*2^192,7128055434188218989 + 5309015506549238591*2^64 + 13473509102586257618*2^128 + 913472257*2^192,8471069799298426035 + 10676417573670074134*2^64 + 14878199951287295132*2^128 + 537619540*2^192,3092793477540553799 + 11304780203095446176*2^64 + 7605585741249773920*2^128 + 489079539*2^192,1369122994687258647 + 1645653565609249984*2^64 + 7488434671298378944*2^128 + 356097914*2^192,14791100854952571391 + 801853639688667643*2^64 + 8822520058208393805*2^128 + 58776061*2^192,13701309615484865990 + 12186341486579523962*2^64 + 8683008942132553141*2^128 + 95412881*2^192;\
12518029712145776682 + 8614300181813152045*2^64 + 13194089429860034424*2^128 + 10154107*2^192,10861368423247783928 + 14696119364517991904*2^64 + 16979529700555264843*2^128 + 976727707*2^192,12561780910602567581 + 3430526023367683150*2^64 + 17266852454161733141*2^128 + 327273056*2^192,5422839390323891271 + 6774011315586705480*2^64 + 8119420881650678762*2^128 + 654397763*2^192,17845326680986669549 + 552520871773704325*2^64 + 1287573237010694646*2^128 + 400666276*2^192,6189442414128738937 + 15839783290775521916*2^64 + 14089630249089435469*2^128 + 479970723*2^192,5521873695635722885 + 9525442227402203989*2^64 + 11270757440628560134*2^128 + 561199226*2^192,4752731258773374646 + 11297790517483228970*2^64 + 13840701835177621279*2^128 + 192059523*2^192;\
16587727029122793048 + 5409608510597273957*2^64 + 10356751611469696076*2^128 + 802326280*2^192,16985798447244697670 + 15454813030579648879*2^64 + 11206643886390900560*2^128 + 960467307*2^192,7978085651037746148 + 8132847808082981830*2^64 + 14420047485346951593*2^128 + 865477165*2^192,7909657746219177368 + 17322727792454533951*2^64 + 749341160319280869*2^128 + 1558781530*2^192,14717452421892671290 + 11352630369754989928*2^64 + 9893337251573606978*2^128 + 175543459*2^192,16584747055150029126 + 6979055321879971853*2^64 + 668203201099522171*2^128 + 848380675*2^192,4060685265744323254 + 13296079363911794898*2^64 + 3073578770632751186*2^128 + 1449309281*2^192,3746332414653911032 + 15622748251886908335*2^64 + 16084032460693042394*2^128 + 1343174970*2^192;\
9364670403543107986 + 6481475780006295354*2^64 + 14395348314795027379*2^128 + 1248826476*2^192,10902298676249729534 + 14138859678241205215*2^64 + 11174553413659767930*2^128 + 131770875*2^192,17286414294653233476 + 9060721889622670002*2^64 + 18358471898450503394*2^128 + 1080710771*2^192,5801112430546285608 + 13303640292168145726*2^64 + 5486925699273144946*2^128 + 822277386*2^192,8067816467215940022 + 7108368767801444671*2^64 + 12530827205788637031*2^128 + 2029612695*2^192,14744034252233235530 + 13278103617316235407*2^64 + 17403969760651974975*2^128 + 1586394088*2^192,7846984009106449422 + 3370879758000028585*2^64 + 11537791331291842228*2^128 + 226948429*2^192,6557346668198518568 + 12630938212590887173*2^64 + 5957765805350567275*2^128 + 510019268*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4087 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 8*x^5 + 16*x^4 - 32*x^3 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 - 2*x + 4, 1; x^2 + 2*x + 4, 1; x^2 + 3*x + 4, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 27

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
