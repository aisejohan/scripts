/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 39
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	5 
[2, 3, 0, 0, 0]  	15	5 
[1, 0, 1, 2, 0]  	17	2 
[3, 0, 0, 2, 0]  	19	5 
[2, 1, 0, 2, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	4 
[2, 0, 0, 3, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	2 
[0, 1, 5, 0, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 2, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 5, 0, 0, 1]  	18	5 
[0, 5, 0, 1, 1]  	20	4 
[1, 3, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[3, 1, 0, 0, 2]  	12	4 
[1, 1, 0, 3, 253]  	21	4 
[2, 2, 0, 0, 254]  	12	3 
[2, 0, 0, 2, 254]  	16	3 
[1, 0, 0, 3, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[11472429735331794266 + 12505482720083444243*2^64 + 17038348327998692350*2^128 + 1973977463*2^192,8539468913851472404 + 3342108462629905333*2^64 + 13028793388661499767*2^128 + 1899899605*2^192,18423976421652463644 + 2465078759994282604*2^64 + 16880212600767098085*2^128 + 793015284*2^192,8206219730884653016 + 10512120585059338646*2^64 + 15046229788769867149*2^128 + 1916300319*2^192,12645818426868545788 + 14302935237789772403*2^64 + 5131065863955081550*2^128 + 1100031450*2^192,2363647634261932648 + 7827534191495835123*2^64 + 16680509930457553948*2^128 + 1328950918*2^192,16002238225518760628 + 9529949983671666385*2^64 + 14034066890863352148*2^128 + 395127844*2^192,9920486011132402480 + 11472942594104785817*2^64 + 3948110839617393360*2^128 + 1597370107*2^192;\
9645434777141240899 + 5343363822875936406*2^64 + 8062637548872235859*2^128 + 90328754*2^192,10639621265074504214 + 15265024883272909417*2^64 + 16375563334168437462*2^128 + 391853843*2^192,16883769986136384194 + 6718449121632250743*2^64 + 8367420823438386308*2^128 + 635308132*2^192,8887213242375444924 + 7779687677261703148*2^64 + 12605842405163453959*2^128 + 481786251*2^192,7097564742334144906 + 12156779249918189839*2^64 + 2111406452271911953*2^128 + 756873750*2^192,7758142286779787020 + 17289660596795960298*2^64 + 4819192198204519332*2^128 + 225097435*2^192,15642960350874758594 + 13129024891451141705*2^64 + 1148255780296596352*2^128 + 403130899*2^192,11152782202648794088 + 17932388727064775479*2^64 + 5456681311589432492*2^128 + 387025868*2^192;\
14184168314731587249 + 1069196162281625976*2^64 + 13508253630508881781*2^128 + 103476126*2^192,9124751335770979978 + 3772705268927711940*2^64 + 11235552885145460656*2^128 + 1425178716*2^192,6161972447563253918 + 12884875882519476763*2^64 + 4556225398054206119*2^128 + 1164431467*2^192,14415692425598934684 + 18192759462404339531*2^64 + 6515347639968398023*2^128 + 1667957953*2^192,9027909870503701914 + 11996989548526617820*2^64 + 13966346913828697640*2^128 + 1878386054*2^192,16304721666478815276 + 183434835299401188*2^64 + 14640075906440828873*2^128 + 695286933*2^192,14398606052157540966 + 6292043675222774283*2^64 + 8569311527348269236*2^128 + 1314628551*2^192,15788189606211574232 + 7042460834203928397*2^64 + 7579258147157627137*2^128 + 792077962*2^192;\
12444773498620018654 + 2488102791076443068*2^64 + 11940772854218398205*2^128 + 1001753982*2^192,8383062122753276988 + 18353691058280298515*2^64 + 11165296978188644759*2^128 + 641452124*2^192,2558166526721579748 + 12864946414763226145*2^64 + 1354421295088922238*2^128 + 34129454*2^192,4896142119700284488 + 6782540248278564487*2^64 + 18216560767172331723*2^128 + 942735666*2^192,13493927192948067780 + 893918059960707177*2^64 + 12303424344728663560*2^128 + 544926775*2^192,18198978760653916744 + 9009651286418397094*2^64 + 2344588983560162647*2^128 + 1062439985*2^192,2178910268434869132 + 1413983054843381596*2^64 + 12663679111473446113*2^128 + 402806166*2^192,5332165765338141224 + 183202072511444316*2^64 + 737768202291062221*2^128 + 95122931*2^192;\
10789193537329297382 + 15110183395609127258*2^64 + 16991339912677013004*2^128 + 742736855*2^192,17877943206173086632 + 1919250970285756926*2^64 + 12500808881477308382*2^128 + 939424657*2^192,5814130706558890872 + 13080539738652398054*2^64 + 9349622445322287615*2^128 + 2086661240*2^192,16102644080147365652 + 7254952529739874761*2^64 + 5109748606115176431*2^128 + 1913939678*2^192,8984506623473487996 + 9036349902988371540*2^64 + 16504539789046889874*2^128 + 1861068622*2^192,2817681666340148012 + 946245273325895434*2^64 + 11110254208438308016*2^128 + 1725007749*2^192,15447447837102412956 + 16117302780483127360*2^64 + 14815897502675369307*2^128 + 1078072383*2^192,10135912338565661440 + 11673293218844149740*2^64 + 8845693231998909311*2^128 + 2101108171*2^192;\
12402704708302284158 + 3722025273142940879*2^64 + 8472662258450970080*2^128 + 10152128*2^192,16520209881773052020 + 8338630450398335063*2^64 + 8574827645082122964*2^128 + 1380742522*2^192,10404030721437600856 + 638373457412075374*2^64 + 11882791373394657849*2^128 + 1498246728*2^192,14595484380558575260 + 15392187164540069606*2^64 + 17193091958791282827*2^128 + 224343363*2^192,1023402516211280792 + 15414164600941070472*2^64 + 17346210683856724357*2^128 + 386116809*2^192,16296764336306031168 + 9632034738634112643*2^64 + 12142204214423233218*2^128 + 547871355*2^192,14725402317573047840 + 14211943228776441457*2^64 + 7596687395022392280*2^128 + 1647083672*2^192,5264367674471151184 + 6229177228757980208*2^64 + 3895330254833943848*2^128 + 1397938397*2^192;\
472675614597790435 + 15073971779805515307*2^64 + 17200409958625092831*2^128 + 1583971894*2^192,11128235205841946822 + 8105115959912950755*2^64 + 2703235191090162602*2^128 + 519907614*2^192,3152415522441255266 + 3457034453880540677*2^64 + 1766339855918340204*2^128 + 882065126*2^192,12294245638536729800 + 4204883211205524506*2^64 + 5469118508149941833*2^128 + 227200015*2^192,11804795305407883854 + 3441857855055008275*2^64 + 8266655282251181931*2^128 + 283770668*2^192,10239310043221604976 + 14259119905550593223*2^64 + 12415296734333553394*2^128 + 1359108345*2^192,17747019014551463418 + 3693220630124285563*2^64 + 17199205333560267476*2^128 + 90343713*2^192,210084807143708192 + 6310814851155239501*2^64 + 6799290517363785441*2^128 + 1469747808*2^192;\
7826501534306386053 + 5668186256633787193*2^64 + 13085927357177955149*2^128 + 2020580433*2^192,17503510594653795450 + 12151604419698718976*2^64 + 333635563441954560*2^128 + 1516112781*2^192,14147457559575653658 + 3573190085040086109*2^64 + 4812278523968296861*2^128 + 1342068267*2^192,9332801688865974328 + 12439146950790575192*2^64 + 11504702679946710797*2^128 + 8658883*2^192,4603465386436168854 + 1048579119099769611*2^64 + 424662328177992448*2^128 + 821076445*2^192,17685646109482792288 + 1401841416001386146*2^64 + 1125115333884128253*2^128 + 112222880*2^192,4881859159700105978 + 11729173004430925873*2^64 + 18100507233786715218*2^128 + 1880072705*2^192,15108457630494188272 + 6991505048860312029*2^64 + 16389748198153888261*2^128 + 1800540543*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4374 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 36
