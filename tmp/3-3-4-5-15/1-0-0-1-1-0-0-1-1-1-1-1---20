/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 50
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[2, 2, 0, 0, 0]  	12	4 
[1, 0, 3, 0, 0]  	15	3 
[1, 2, 2, 0, 0]  	17	5 
[1, 0, 0, 3, 0]  	18	4 
[1, 4, 1, 0, 0]  	19	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	5 
[1, 1, 1, 2, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	7 
[1, 0, 2, 2, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[0, 6, 0, 1, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 3, 4, 0, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 3, 1, 0, 1]  	16	6 
[0, 4, 1, 0, 1]  	16	4 
[1, 3, 0, 1, 1]  	17	5 
[1, 5, 0, 0, 1]  	18	7 
[0, 5, 0, 1, 1]  	20	4 
[0, 3, 2, 1, 1]  	22	4 
[0, 1, 3, 2, 1]  	25	3 
[0, 1, 2, 3, 1]  	26	2 
[0, 0, 5, 1, 4]  	25	2 
[0, 0, 0, 5, 251]  	25	1 
[1, 0, 2, 1, 255]  	16	3 
[0, 2, 0, 2, 255]  	16	2 
[1, 0, 1, 2, 255]  	17	4 
[0, 6, 0, 0, 255]  	18	3 
[0, 0, 5, 0, 255]  	20	2 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 5 and 250.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 6.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[2768908018746586390 + 18321276277513919217*2^64 + 14216005788920241301*2^128 + 12480488856*2^192,10992786151840600544 + 12466664292808425831*2^64 + 10560412786826684778*2^128 + 8090129295*2^192,4269060926276620532 + 14070139017326560653*2^64 + 5376905960316788456*2^128 + 5510301581*2^192,10137046974729152340 + 2456464045957636334*2^64 + 116932655585776997*2^128 + 4300906345*2^192,14530987108630173272 + 14639035750080087033*2^64 + 5263879839937978295*2^128 + 28459431966*2^192,13229527296575534264 + 13696554942739406680*2^64 + 8267349805090024307*2^128 + 21997890566*2^192,12174272045351407540 + 3366774612108685332*2^64 + 4464157014927743596*2^128 + 1981238325*2^192,2856090056958873472 + 1785524589835701259*2^64 + 14085212574869529357*2^128 + 28780071525*2^192;\
16617454641065276877 + 14648570903624676274*2^64 + 13619596383788414390*2^128 + 33756543373*2^192,9757913536737828432 + 8233362703004842660*2^64 + 5446279083628910683*2^128 + 31431277929*2^192,7601633773187185558 + 6287079529303502164*2^64 + 2130951707328921252*2^128 + 23317053219*2^192,11784311285181648998 + 664380935632975244*2^64 + 875776323435885907*2^128 + 21110614245*2^192,15587571652240875956 + 2702634569544551511*2^64 + 14854070405881064553*2^128 + 8101160895*2^192,12090942003026411524 + 15478304114606047714*2^64 + 16064092055075105948*2^128 + 477983511*2^192,9629841517075352118 + 16648544022972075568*2^64 + 5969598354951466886*2^128 + 30675586621*2^192,1176198283360275264 + 15052876261054203203*2^64 + 6981422224565179726*2^128 + 7969526871*2^192;\
7507765270489425162 + 16767328570939251597*2^64 + 15362317391195856745*2^128 + 11604473371*2^192,17043086367144490272 + 6307790786765615235*2^64 + 8680275786330694446*2^128 + 1237200166*2^192,18131090363281109068 + 1337058311583381170*2^64 + 5686472058279494402*2^128 + 5334440699*2^192,13321735122706948332 + 6422811251242245448*2^64 + 18198591509312866327*2^128 + 32837952017*2^192,9400003110552925096 + 628752176074881537*2^64 + 2295416937422133040*2^128 + 2284843533*2^192,7968250101732547656 + 4836224403776343451*2^64 + 2508708020348373719*2^128 + 29546505995*2^192,13016205642032205580 + 17359425140858530943*2^64 + 5469653566316051832*2^128 + 13643186897*2^192,15984201439153215232 + 6138992546510353739*2^64 + 629353705421887037*2^128 + 30576563908*2^192;\
8827091934336270797 + 214139520767140416*2^64 + 14502017164774571601*2^128 + 28270097612*2^192,6734153835724842000 + 5345119428079970152*2^64 + 5081890741510614760*2^128 + 26476545503*2^192,6666082880873941334 + 3285449798932980233*2^64 + 7066753977390752944*2^128 + 27692773674*2^192,330120759108407974 + 13534619850217505814*2^64 + 742543250668204989*2^128 + 1012795653*2^192,8018925479401076020 + 15823368909919494043*2^64 + 13116289625591436666*2^128 + 28432340256*2^192,7559611931955389380 + 10913638465111455096*2^64 + 5783869139007627848*2^128 + 7926734131*2^192,8138719628252099446 + 15915656228851881473*2^64 + 11440189999238018719*2^128 + 1637648903*2^192,15857180992554966336 + 5067543225895380980*2^64 + 6706938600849691622*2^128 + 3328013476*2^192;\
14562685123063053807 + 5910969317515188153*2^64 + 15848109445219024820*2^128 + 8798098239*2^192,13687305419747158640 + 12137661406333612202*2^64 + 11493218144720392863*2^128 + 26665071601*2^192,3824163754919335218 + 11338108415025446584*2^64 + 11227587995949601307*2^128 + 31916257317*2^192,413983757102218786 + 6909428028760000708*2^64 + 4499889870412967480*2^128 + 13885717565*2^192,12193318476847341756 + 10532556969738802220*2^64 + 7782195394755170679*2^128 + 21121559995*2^192,11031473724361357292 + 988253687139188942*2^64 + 2523292982735600660*2^128 + 6106908659*2^192,13632667818283296658 + 2920670894880615394*2^64 + 3457709132730395401*2^128 + 33771741349*2^192,7831727816665109440 + 11897726801888509962*2^64 + 16164657633001248604*2^128 + 31146742451*2^192;\
3902660607747627526 + 13056575421709180940*2^64 + 1098991497375751066*2^128 + 5775886024*2^192,14741307964975242528 + 14820818606705599410*2^64 + 7730719231989817890*2^128 + 18038415241*2^192,3558316921592402708 + 2950161983640539071*2^64 + 9456900291486952546*2^128 + 14843707476*2^192,12006735755329134836 + 9097674533932925926*2^64 + 12830283623996011794*2^128 + 17770820815*2^192,8619774652908518744 + 7090655468308479143*2^64 + 16311833717174370746*2^128 + 32116587144*2^192,11921237881643430456 + 1695553034394771204*2^64 + 11780993216053733245*2^128 + 11082060745*2^192,4677071281425577940 + 8464583068242767721*2^64 + 12438802399513283068*2^128 + 3042068097*2^192,858013364394452224 + 60301720860825282*2^64 + 5470054934787951493*2^128 + 24601971909*2^192;\
3622208730347981046 + 9384232687151935334*2^64 + 3532318472480871661*2^128 + 10614178612*2^192,8388727988012307232 + 15980283101447506395*2^64 + 7173672613119814887*2^128 + 30848822298*2^192,5471671386186732660 + 17447390293865473964*2^64 + 17585270587072429832*2^128 + 5789530658*2^192,4238196856405900628 + 3883432453925431611*2^64 + 307276753446185370*2^128 + 9459506781*2^192,1698671948190355800 + 14570699294671486463*2^64 + 17192747695082106479*2^128 + 22513028188*2^192,15588999092217392056 + 34275596911507882*2^64 + 9354097953286986996*2^128 + 7825704531*2^192,2613114170028498804 + 199541472415494560*2^64 + 18062653671909514536*2^128 + 174876652*2^192,5475983464320631680 + 16724139205310281270*2^64 + 16751351241772715919*2^128 + 26506745980*2^192;\
5713818648836237052 + 17315813495629682321*2^64 + 7265532107643379311*2^128 + 5866964158*2^192,9233407953409453056 + 10951492860590973164*2^64 + 2500684400484893202*2^128 + 12983390274*2^192,1334106152538630472 + 8713368858188470769*2^64 + 16046229461337160283*2^128 + 10084169167*2^192,8864181124914632 + 3961292517134664138*2^64 + 10056540060930944105*2^128 + 782175383*2^192,14644644430562142448 + 4356801048625476693*2^64 + 2290198377856201068*2^128 + 659321260*2^192,17256780235855576752 + 14256994171330687003*2^64 + 3473903957373272262*2^128 + 2201566628*2^192,2734260107512142408 + 4949428724309690014*2^64 + 5537153064398099251*2^128 + 20982098436*2^192,10834440209124243328 + 13655378594156297793*2^64 + 2087470904573541805*2^128 + 23634749861*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 5215 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 - 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 - 2*x + 4, 1; x^6 - 2*x^4 - 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 26
