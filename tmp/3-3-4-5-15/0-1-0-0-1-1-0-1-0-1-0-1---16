/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 55
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 4, 0, 0, 0]  	15	3 
[1, 0, 3, 0, 0]  	15	2 
[1, 0, 0, 3, 0]  	18	3 
[1, 1, 2, 1, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[0, 5, 0, 1, 0]  	20	5 
[1, 0, 2, 2, 0]  	21	6 
[0, 4, 0, 2, 0]  	22	5 
[1, 2, 1, 2, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 4, 3, 0, 0]  	24	6 
[0, 4, 2, 1, 0]  	25	2 
[0, 3, 4, 0, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 2, 2, 0, 1]  	17	6 
[1, 2, 0, 2, 1]  	19	5 
[1, 1, 1, 2, 1]  	20	6 
[0, 4, 2, 0, 1]  	20	5 
[1, 3, 1, 1, 1]  	21	7 
[0, 7, 0, 0, 1]  	21	6 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	4 
[1, 3, 1, 0, 2]  	16	6 
[1, 1, 0, 2, 2]  	16	6 
[1, 3, 0, 1, 2]  	17	6 
[0, 1, 2, 3, 2]  	26	2 
[0, 2, 1, 2, 3]  	20	4 
[0, 3, 0, 3, 3]  	24	5 
[0, 3, 2, 1, 5]  	22	4 
[0, 2, 4, 0, 250]  	22	3 
[0, 1, 3, 1, 251]  	20	3 
[1, 0, 2, 1, 254]  	16	4 
[0, 4, 1, 0, 254]  	16	2 
[0, 4, 0, 1, 254]  	17	2 
[0, 0, 4, 2, 254]  	26	1 
[1, 0, 1, 1, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	2 
[0, 2, 2, 1, 255]  	19	1 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 6 and 249.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[15674917368586554840 + 4770133387901738464*2^64 + 8961396130839539925*2^128 + 2649712224*2^192,15936965687773685936 + 11442662507532539371*2^64 + 14077919776924827504*2^128 + 1194304908*2^192,11167336566264693672 + 5512604856390084290*2^64 + 17648783280892969540*2^128 + 3181842672*2^192,4620579260540844848 + 1745983655665385745*2^64 + 6254226850522345468*2^128 + 619124640*2^192,13741716531861824024 + 5963827110861983815*2^64 + 4688653212651027641*2^128 + 3998738880*2^192,8202313457335178560 + 14207765920429090405*2^64 + 16059323595218876060*2^128 + 4161369366*2^192,5891358157661229016 + 8745504419808469675*2^64 + 4656745263126130415*2^128 + 1028782352*2^192,4777461722389846736 + 18229525067185347747*2^64 + 6002864801372675672*2^128 + 2185051627*2^192;\
2350400684153276928 + 8343313936644369645*2^64 + 8280445284096811167*2^128 + 869498086*2^192,10695636924993224464 + 10706669195302753392*2^64 + 6122733738449831541*2^128 + 362179719*2^192,5420661005437218384 + 3956541502619872413*2^64 + 18388424816740283956*2^128 + 1352705577*2^192,7103087142773115488 + 1050584225984837010*2^64 + 13520989109876725990*2^128 + 606104961*2^192,4841974967778526728 + 2934384721285970686*2^64 + 14462157862242593333*2^128 + 78953426*2^192,11328005291174854784 + 9955645985452081866*2^64 + 15665103954977441554*2^128 + 1747427541*2^192,3293347768856739032 + 12107602327917771117*2^64 + 2628155360653551181*2^128 + 593810435*2^192,15680098293270700960 + 3151835642451555693*2^64 + 4869269842712424721*2^128 + 581552195*2^192;\
6414160305106787458 + 803405663582541465*2^64 + 14717603454786333023*2^128 + 1086114794*2^192,17903916335383500636 + 6373251700664352883*2^64 + 16706909504532835933*2^128 + 1858841786*2^192,15376280670586721738 + 7168839922912183289*2^64 + 670443926026155540*2^128 + 1794600748*2^192,12926185678680177720 + 15485839360211305420*2^64 + 7740448511992711857*2^128 + 364931516*2^192,10995763140812380806 + 8703098124645874712*2^64 + 3724154693082788513*2^128 + 348683071*2^192,7969569132310299092 + 14107757392995222576*2^64 + 11879103463531724879*2^128 + 3390857780*2^192,13137647397234289790 + 3619553003983132704*2^64 + 5201445687376529477*2^128 + 482376227*2^192,13798424793357667684 + 12175662101973494946*2^64 + 12247940157512942226*2^128 + 311786678*2^192;\
3583684158149019621 + 14904409771050795944*2^64 + 939903502160896459*2^128 + 1562309135*2^192,10176293587319397094 + 9639860957632635461*2^64 + 16281508958509950625*2^128 + 118088626*2^192,1087127038437095537 + 5174510928670474404*2^64 + 2953042802144319858*2^128 + 573599711*2^192,8612397900949730564 + 519110251734017837*2^64 + 2669810209340319119*2^128 + 4118219253*2^192,11963667014838618791 + 99963496907976085*2^64 + 18125037515683909771*2^128 + 450570227*2^192,17995267354929413226 + 10653090548448151211*2^64 + 10089237323444726717*2^128 + 3849582223*2^192,11943673525228815611 + 449008807637966273*2^64 + 12134213908964573456*2^128 + 1919169814*2^192,17105152026952394610 + 12396200867851434336*2^64 + 12815571532947205870*2^128 + 1077928522*2^192;\
11833656311891457016 + 4955004424219074931*2^64 + 10644654767401100810*2^128 + 279389166*2^192,1911344778936237568 + 16375023933540012890*2^64 + 6091080410844652835*2^128 + 2493938495*2^192,16556210724737551388 + 5725638493113629101*2^64 + 17734271727475832522*2^128 + 3378421415*2^192,1647691972446204736 + 10654049322718774992*2^64 + 12512785127179361675*2^128 + 3883130442*2^192,17769421253155858972 + 10874466358371479349*2^64 + 11012394306218810008*2^128 + 1054242024*2^192,4435089827883653608 + 9449033533043016933*2^64 + 3063220001816809161*2^128 + 2226629432*2^192,198043427985397740 + 16770313575278595181*2^64 + 11954809301819613810*2^128 + 3823732753*2^192,2983783463243817480 + 3269363802964663924*2^64 + 13162109398874828810*2^128 + 1736832543*2^192;\
3583684158149019621 + 14904409771050795944*2^64 + 939903502160896459*2^128 + 1713304079*2^192,10176293587319397094 + 9639860957632635461*2^64 + 16281508958509950625*2^128 + 1409934258*2^192,1087127038437095537 + 5174510928670474404*2^64 + 2953042802144319858*2^128 + 254832607*2^192,16808440836075140348 + 13728292387855491024*2^64 + 6047107270518091808*2^128 + 4290368790*2^192,11963667014838618791 + 99963496907976085*2^64 + 18125037515683909771*2^128 + 4242221043*2^192,9799224419804003442 + 15890652486036229640*2^64 + 6711940262266954027*2^128 + 4012977006*2^192,11943673525228815611 + 449008807637966273*2^64 + 12134213908964573456*2^128 + 1063531798*2^192,17105152026952394610 + 12396200867851434336*2^64 + 12815571532947205870*2^128 + 1195369034*2^192;\
1481392393490519364 + 9008581121460342387*2^64 + 172618922648392952*2^128 + 2280876831*2^192,2034423281779306872 + 2316698115015445383*2^64 + 6023599124755917974*2^128 + 1383073251*2^192,16380276564010172652 + 16234158728151633672*2^64 + 3102824478923306864*2^128 + 364639917*2^192,18428300576197790536 + 8127638020368197024*2^64 + 13925484282513384813*2^128 + 50821395*2^192,10486504302339466300 + 624600197133464248*2^64 + 14399619890698418740*2^128 + 2387367092*2^192,14864092962161909760 + 17468215162146790713*2^64 + 6107669137841413611*2^128 + 2790677370*2^192,6426615179224134276 + 15689974639897561340*2^64 + 11097469298003945644*2^128 + 3891802160*2^192,6413350596540560952 + 16610025373982620069*2^64 + 18416288230708424187*2^128 + 912015287*2^192;\
15728251896065227848 + 5411460885380198352*2^64 + 10703972708833422798*2^128 + 2779907310*2^192,15792619158179038504 + 7698016165694140738*2^64 + 5789521817494090544*2^128 + 4067786484*2^192,9025750538112840228 + 4672070075319796723*2^64 + 12920316099178924873*2^128 + 3270644283*2^192,11320220570970705536 + 9587193125578536025*2^64 + 10150732670361847517*2^128 + 1178622994*2^192,195133098804132140 + 2295436407937980880*2^64 + 4274906151833564621*2^128 + 2132857008*2^192,6425026724705527768 + 7179178692280607209*2^64 + 15015261280300189311*2^128 + 3510628591*2^192,10426040863484949356 + 6237457757376137814*2^64 + 356404245794606845*2^128 + 3290121031*2^192,13363900923326648120 + 12976444108967855388*2^64 + 15529635739921860769*2^128 + 1875536314*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4571 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + 4*x^5 - 16*x^3 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 + 4*x^4 + 4*x^3 + 16*x^2 + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 32

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
