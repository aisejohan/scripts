/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 51
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[1, 0, 4, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	5 
[1, 0, 3, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[1, 6, 0, 0, 0]  	21	7 
[1, 0, 1, 3, 0]  	22	5 
[0, 6, 1, 0, 0]  	22	5 
[1, 0, 0, 4, 0]  	23	4 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 1, 0, 2, 1]  	16	6 
[1, 2, 2, 0, 1]  	17	6 
[1, 5, 0, 0, 1]  	18	7 
[3, 1, 0, 0, 2]  	12	7 
[1, 0, 2, 2, 2]  	21	6 
[0, 5, 2, 0, 2]  	23	3 
[0, 0, 5, 1, 2]  	25	2 
[0, 4, 0, 3, 2]  	27	3 
[0, 4, 2, 0, 4]  	20	4 
[0, 4, 0, 2, 4]  	22	4 
[0, 3, 0, 3, 4]  	24	4 
[0, 2, 1, 2, 252]  	20	2 
[0, 3, 2, 1, 252]  	22	2 
[0, 7, 0, 0, 253]  	21	5 
[2, 2, 0, 0, 254]  	12	5 
[0, 1, 0, 4, 254]  	23	2 
[0, 0, 0, 5, 254]  	25	1 
[1, 0, 2, 1, 255]  	16	4 
[1, 0, 1, 2, 255]  	17	4 
[0, 6, 0, 0, 255]  	18	3 
------
The gap is between 5 and 251.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8054858976512824862 + 16566267270911955789*2^64 + 5026203281743419371*2^128 + 4159941496*2^192,2648441564088255956 + 14327061985310909390*2^64 + 17635789729516952152*2^128 + 440422099*2^192,12282207810380453424 + 277278413371137272*2^64 + 12831281853893575945*2^128 + 2664355554*2^192,8197390245783268016 + 11232722758701236536*2^64 + 17341177305072935001*2^128 + 605129253*2^192,12615944678566960988 + 536400287510863834*2^64 + 11692389279364932444*2^128 + 2128917535*2^192,4754944946040771004 + 15964904136934730830*2^64 + 13889214106509716952*2^128 + 1602319818*2^192,14512211590306280664 + 16042481272072678441*2^64 + 9165803080367904079*2^128 + 273269966*2^192,939907010447200896 + 3003756955791562966*2^64 + 11688941249651142319*2^128 + 3800304960*2^192;\
9206217146086386226 + 12888006379197837074*2^64 + 11753306474709131561*2^128 + 3537042163*2^192,2257683663819382380 + 3088404391178345683*2^64 + 18242983788020225340*2^128 + 3221701417*2^192,1122360756410961576 + 3757141719334895126*2^64 + 17904683061781935406*2^128 + 2697900404*2^192,12605100799112099480 + 6044851646790022374*2^64 + 6525791469685738768*2^128 + 2647734686*2^192,15140807536393737252 + 6833998341637356025*2^64 + 10412250707567491829*2^128 + 2577644538*2^192,8074443763583642100 + 15775282827032084627*2^64 + 14623150327678765489*2^128 + 217009635*2^192,3109681718565241160 + 3059038160655614809*2^64 + 949181422352206960*2^128 + 2794294917*2^192,5965705909697991344 + 16844733377792977637*2^64 + 5251555203622854694*2^128 + 3855752013*2^192;\
7963952839904346667 + 11523609333885701430*2^64 + 16919305423266759913*2^128 + 1485869696*2^192,16134407663266642202 + 16180518992599931250*2^64 + 15222841197498698542*2^128 + 2250805868*2^192,5598492119225487072 + 14945430780399776272*2^64 + 10293533034370107007*2^128 + 1724974100*2^192,12365618932482650728 + 12135063694862165740*2^64 + 2091295438303176587*2^128 + 627605915*2^192,3415905733064144518 + 8905557076355500573*2^64 + 14455773253882752850*2^128 + 808886453*2^192,12471933716731267022 + 6676117799765878348*2^64 + 8270891396858103890*2^128 + 3843332815*2^192,3944597872515090548 + 16216786227025810267*2^64 + 6016367791959296837*2^128 + 4038702435*2^192,18050913803309772464 + 1724068901259260517*2^64 + 10564728637064338465*2^128 + 2692157145*2^192;\
6148169720729860419 + 6242826306549422247*2^64 + 2405681104300415042*2^128 + 1236834518*2^192,14943157525458587394 + 7595758794258744977*2^64 + 13532924264357742647*2^128 + 3132773742*2^192,9478107080559051568 + 9875505176402258088*2^64 + 14994276368970045366*2^128 + 1510827743*2^192,6597690730786490960 + 5500839917805309969*2^64 + 7087523579337537511*2^128 + 2708905999*2^192,15876459707766175534 + 17578675331928286887*2^64 + 6325676184892685533*2^128 + 2840935332*2^192,17981718064378267262 + 2315562700151623564*2^64 + 8717290168061362663*2^128 + 445838683*2^192,10708278102335431940 + 16464386857994665591*2^64 + 8430150243714934967*2^128 + 2385493634*2^192,13507639630689467248 + 1291865412825482805*2^64 + 11481622138135937869*2^128 + 859407347*2^192;\
8013362919219781677 + 8254247420166235830*2^64 + 18374520605437626813*2^128 + 3257048257*2^192,13460902576103761134 + 7850391712596757391*2^64 + 10351772909305413412*2^128 + 3577139315*2^192,9284382346289156912 + 12882117451338795078*2^64 + 8682551658104175378*2^128 + 1223732723*2^192,18400417978806160616 + 4853068397058675506*2^64 + 17327636815557912376*2^128 + 1642910207*2^192,16971276184451300138 + 14483096525828628215*2^64 + 12019372449074923267*2^128 + 115719320*2^192,14823309926547745370 + 14619424913357994781*2^64 + 9877336331970315482*2^128 + 2622714454*2^192,628634596544053004 + 15633492876765472542*2^64 + 8897651284109491016*2^128 + 925452987*2^192,14852529347401088480 + 8184073867659813330*2^64 + 5294662042714379444*2^128 + 420508218*2^192;\
9984635399793545474 + 7265471615040202114*2^64 + 17273507862807511440*2^128 + 2519186675*2^192,4607955710850196372 + 14513302166017357299*2^64 + 1901094550913540904*2^128 + 499804194*2^192,14276863342578055344 + 5873201283264961040*2^64 + 16853291093231812925*2^128 + 4153472053*2^192,879597699139233568 + 3440374854500125340*2^64 + 13611132859074940912*2^128 + 2163614673*2^192,7643639832936102628 + 6544267709385598952*2^64 + 1276136974115857593*2^128 + 3103432294*2^192,6744840430417322228 + 542179981826011276*2^64 + 8655760520277565547*2^128 + 746466529*2^192,18214779363859817960 + 8047771556229508070*2^64 + 10383842386876673636*2^128 + 3046975138*2^192,11724124205166849024 + 14309520140097108452*2^64 + 14317669959085251666*2^128 + 1691529960*2^192;\
13157231434693989479 + 9821532941604391403*2^64 + 3845872688793874275*2^128 + 179674855*2^192,1551330053699926874 + 6440095724887386183*2^64 + 5324601182218299360*2^128 + 1280225202*2^192,13918316322633867440 + 18375992554574350509*2^64 + 11395310190312109843*2^128 + 2896566784*2^192,3453492179077061744 + 836854407199398201*2^64 + 18183363272711236027*2^128 + 2903462336*2^192,1452518690275489750 + 5193737350162897025*2^64 + 13811438281736617419*2^128 + 2624272483*2^192,12601757560380064582 + 16425947636804354713*2^64 + 18129651140569683973*2^128 + 2957115830*2^192,1168613364069075684 + 11290134039972024930*2^64 + 17758722483729566381*2^128 + 244094248*2^192,10962441522970489136 + 4404282160018484316*2^64 + 10418131762574654625*2^128 + 3514176530*2^192;\
4357785698362180395 + 18204191532877080941*2^64 + 11087484281858846355*2^128 + 3556219299*2^192,16426510038915152986 + 8993683798894114566*2^64 + 9522084658550777807*2^128 + 1848405345*2^192,9032961346141137616 + 8246038237327593592*2^64 + 12330694583241356191*2^128 + 2665950407*2^192,13319567351803259064 + 4892141366561488523*2^64 + 11732543576112643955*2^128 + 64616151*2^192,12534339496916957398 + 4534783315146590256*2^64 + 2134526782456105798*2^128 + 4028176142*2^192,9337576864653769294 + 14199539041163572186*2^64 + 16615494308627219955*2^128 + 3791487095*2^192,7546261682927189556 + 3278267675013388373*2^64 + 5389594885871142075*2^128 + 1975685410*2^192,12138517486373489472 + 2215626340139424319*2^64 + 6416023048636366838*2^128 + 3225271936*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4687 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 - 2*x^6 + 4*x^5 + 24*x^4 + 16*x^3 - 32*x^2 + 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: Mat([x^8 + x^7 - 2*x^6 + 4*x^5 + 24*x^4 + 16*x^3 - 32*x^2 + 64*x + 256, 1])
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 26
