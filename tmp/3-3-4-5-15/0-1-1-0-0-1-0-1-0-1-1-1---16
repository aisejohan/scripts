/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	4 
[2, 3, 0, 0, 0]  	15	5 
[1, 0, 1, 2, 0]  	17	3 
[3, 0, 0, 2, 0]  	19	4 
[2, 1, 0, 2, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[2, 0, 0, 3, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 2, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 1, 3, 2, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 5, 0, 0, 1]  	18	5 
[0, 5, 0, 1, 1]  	20	4 
[1, 3, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[3, 1, 0, 0, 2]  	12	4 
[0, 1, 5, 0, 2]  	23	3 
[1, 1, 0, 3, 253]  	21	5 
[2, 2, 0, 0, 254]  	12	3 
[2, 0, 0, 2, 254]  	16	3 
[0, 1, 0, 4, 254]  	23	2 
[1, 0, 0, 3, 255]  	18	4 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[10983356755816749738 + 11278227672632623487*2^64 + 1481145525307207326*2^128 + 1407467350*2^192,7477173425046643136 + 2669636423947752465*2^64 + 15622589551383470516*2^128 + 335157246*2^192,14306354457778715448 + 16641706058590466474*2^64 + 12695230671528728131*2^128 + 599794935*2^192,8220100601128041772 + 2943511815599759555*2^64 + 12039598184101471920*2^128 + 1201008027*2^192,5792670410081217188 + 16074595311900356273*2^64 + 1462092991007925364*2^128 + 565839210*2^192,14509869510007800760 + 9919417711075610477*2^64 + 16241462858377837359*2^128 + 1289425422*2^192,17829405429426408612 + 6826798266422209676*2^64 + 12815324372781368305*2^128 + 989334131*2^192,10372541479783436672 + 12327168074228153803*2^64 + 14070512889844641437*2^128 + 533635836*2^192;\
12945092849990368161 + 18331584405757663287*2^64 + 13841269684896556006*2^128 + 800177321*2^192,12307863141797551020 + 9471770423856482686*2^64 + 15696447489109715563*2^128 + 950220564*2^192,8523569343767657372 + 16693312472864432750*2^64 + 2580356707392661786*2^128 + 439792987*2^192,11551045503427255418 + 7401739632943780790*2^64 + 16897941861143737392*2^128 + 395882498*2^192,17671662126965993690 + 2771699678006795307*2^64 + 9494224541124630458*2^128 + 75002404*2^192,2249737178735125428 + 4160493799158478824*2^64 + 3063930120480598935*2^128 + 803071330*2^192,10411972619714250458 + 1725577764369254038*2^64 + 4276269251630774825*2^128 + 510598650*2^192,7462011994138985128 + 11548594207903144798*2^64 + 8665970563817865724*2^128 + 645432066*2^192;\
17877305223952698937 + 18244453782405715053*2^64 + 6311944432298068377*2^128 + 1474932012*2^192,16567037674835810460 + 16590326626418190859*2^64 + 14694476127842437949*2^128 + 263258779*2^192,17114273153811077848 + 17385767767625410908*2^64 + 12362627963162979495*2^128 + 1067996340*2^192,11605640362290152362 + 16067616353353002484*2^64 + 12036860577009432426*2^128 + 1830487657*2^192,2227390280460904398 + 16499307898107790001*2^64 + 13366323496161781326*2^128 + 822876811*2^192,7732976619666522044 + 12689941306856428523*2^64 + 5127186929542550760*2^128 + 1982650896*2^192,3000847630121653322 + 9715226223679910260*2^64 + 5064864653484567653*2^128 + 852556098*2^192,15761923939122147840 + 2176403987214209418*2^64 + 16187412513350123471*2^128 + 629816660*2^192;\
17077012001770963108 + 1995619619457069689*2^64 + 5946393787456806660*2^128 + 952328958*2^192,7622817219646220672 + 8005247338355029663*2^64 + 16788860414328995711*2^128 + 508907899*2^192,1121597587997726976 + 5890514223413664146*2^64 + 1830167570777487557*2^128 + 586186788*2^192,3012781299746638888 + 6473707502913519427*2^64 + 10071043151572548645*2^128 + 919320712*2^192,11713245229723499752 + 10962436148211161495*2^64 + 4774341824206378036*2^128 + 773467126*2^192,11998112362965314944 + 3648107714547129920*2^64 + 12784703508170281861*2^128 + 665479685*2^192,12279469421773591808 + 1095976511193582912*2^64 + 3286151956781690264*2^128 + 89600885*2^192,12064725200784667928 + 12755822892714076706*2^64 + 5924057717263501304*2^128 + 847466052*2^192;\
7321524706045152955 + 2895828927743640931*2^64 + 10261670986911286810*2^128 + 141593805*2^192,4892111673523850360 + 3771864955504797820*2^64 + 13021353237105955738*2^128 + 99366954*2^192,16327603267871012140 + 5832973384961063169*2^64 + 17788803580835781642*2^128 + 1684398093*2^192,17204392177427960234 + 6927519205118308387*2^64 + 4838611149771853233*2^128 + 1992190041*2^192,9480446728178144602 + 6877422837111869374*2^64 + 17983626165920049077*2^128 + 1840051512*2^192,11660699865295838216 + 17762625323032842005*2^64 + 4473013816318838651*2^128 + 1514554871*2^192,16660389876729046830 + 10328239409025734640*2^64 + 7347501577586043366*2^128 + 1389247523*2^192,8074187875007356552 + 17726534764699640299*2^64 + 16482288436949216801*2^128 + 1303337024*2^192;\
12721298668809112490 + 13825259036281666949*2^64 + 15399214078420501703*2^128 + 1855955047*2^192,13683504342522010356 + 8843585698012281954*2^64 + 4541263591003649088*2^128 + 1333014253*2^192,9844719154879992920 + 677135956220150604*2^64 + 10414163856684835990*2^128 + 383130697*2^192,799543794463645892 + 10724086544387968868*2^64 + 18034883969463137728*2^128 + 1051877240*2^192,14638876548105077384 + 12518064714331475870*2^64 + 7814656248251703814*2^128 + 1366808991*2^192,1005136117045194872 + 3913144048155972801*2^64 + 17170525153574438738*2^128 + 70357154*2^192,2181320840142983640 + 12713061702793602762*2^64 + 9922063250104389084*2^128 + 531811309*2^192,12386744533423789368 + 11234718711632580366*2^64 + 13535451526721331823*2^128 + 53373104*2^192;\
11708381579435648222 + 11856945262370422709*2^64 + 14929737093447943616*2^128 + 1991238994*2^192,16713992529215190936 + 6936201234802911408*2^64 + 9453956411379151056*2^128 + 2110442364*2^192,2056442275632375036 + 13155875880842286000*2^64 + 3277183031403352345*2^128 + 2036473159*2^192,15826936593709469048 + 17345464443725142230*2^64 + 936271949327308696*2^128 + 1309978961*2^192,15288317905858554912 + 14248188632437775244*2^64 + 9697142144911047436*2^128 + 816932152*2^192,15681828906594368020 + 2353905566413808655*2^64 + 1287073950948169469*2^128 + 1222189398*2^192,13639938312630285660 + 12242539378161864187*2^64 + 16946683570078966420*2^128 + 907887331*2^192,6277857107446824192 + 14501760090690171555*2^64 + 8376404481104720919*2^128 + 2022406766*2^192;\
1851448451061188364 + 2370643906061091138*2^64 + 11034283602057759719*2^128 + 1201638815*2^192,7080057490288654108 + 2789834124258677708*2^64 + 6952309290856105496*2^128 + 686011948*2^192,1905157469223268884 + 4272638558976261923*2^64 + 10626243311942270791*2^128 + 1730353442*2^192,7713020458120938488 + 8966042271661411569*2^64 + 16692072046893366632*2^128 + 1933719624*2^192,5725887612957019680 + 5434886384279726619*2^64 + 1620492763986351419*2^128 + 255879996*2^192,14554225666458858348 + 14016866705282352074*2^64 + 261506211620215278*2^128 + 319912138*2^192,13974220705451397884 + 6204648575709646037*2^64 + 14240062578756682310*2^128 + 1782769821*2^192,9739633946893150072 + 13467867707407744762*2^64 + 13811759601256191138*2^128 + 692451*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4374 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 34
