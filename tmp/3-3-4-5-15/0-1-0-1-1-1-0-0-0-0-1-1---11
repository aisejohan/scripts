/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 54
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[0, 1, 3, 0, 0]  	15	2 
[1, 5, 0, 0, 0]  	18	5 
[1, 4, 1, 0, 0]  	19	3 
[1, 2, 0, 2, 0]  	19	6 
[0, 3, 0, 2, 0]  	19	3 
[1, 4, 0, 1, 0]  	20	3 
[1, 3, 2, 0, 0]  	20	6 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[1, 0, 3, 2, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[2, 3, 0, 0, 1]  	15	3 
[1, 3, 1, 0, 1]  	16	4 
[1, 3, 0, 1, 1]  	17	4 
[1, 1, 2, 1, 1]  	19	5 
[1, 1, 1, 2, 1]  	20	4 
[1, 0, 0, 4, 1]  	23	3 
[3, 1, 0, 0, 2]  	12	4 
[1, 0, 3, 1, 2]  	20	4 
[1, 1, 0, 3, 2]  	21	6 
[1, 0, 1, 3, 2]  	22	4 
[1, 1, 0, 2, 3]  	16	6 
[1, 2, 2, 0, 3]  	17	6 
[1, 0, 2, 2, 3]  	21	6 
[0, 7, 0, 0, 253]  	21	4 
[0, 2, 0, 2, 254]  	16	3 
[0, 3, 2, 0, 254]  	17	3 
[1, 3, 0, 0, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	1 
[1, 1, 1, 1, 255]  	15	2 
[1, 0, 2, 1, 255]  	16	5 
[1, 0, 1, 2, 255]  	17	5 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[10290734077965283172 + 12852423790152068113*2^64 + 7823528725470029835*2^128 + 1008484340*2^192,17334156263163483976 + 5718310610733024308*2^64 + 4875091729928284367*2^128 + 1827506096*2^192,12989658694993589324 + 14259996479287102411*2^64 + 2827212427005006352*2^128 + 1656829703*2^192,11760836446194437488 + 11682376838534471544*2^64 + 10968204255306631838*2^128 + 41676896*2^192,943992768354453400 + 16531116878020010116*2^64 + 15544211337321405083*2^128 + 1028233888*2^192,4765781091888063248 + 14476907978565228494*2^64 + 1633014818949568634*2^128 + 1529781680*2^192,16150682641024784964 + 3241367718016804114*2^64 + 8308852944782751492*2^128 + 686398227*2^192,18417221881208003936 + 17420339680568325846*2^64 + 4597822628768401326*2^128 + 1584157006*2^192;\
10544276763714772616 + 2981324519535342517*2^64 + 4237418708454188669*2^128 + 1096192735*2^192,4126568048001963682 + 13165863806258315691*2^64 + 8920227814578536434*2^128 + 1043092125*2^192,718405302572388679 + 12376647827831317347*2^64 + 744076419037631220*2^128 + 1483317714*2^192,1503020252650460808 + 5376391175985867377*2^64 + 4300334528259515343*2^128 + 559793979*2^192,11755063027717424798 + 15140554171450284705*2^64 + 1233329184834689017*2^128 + 1121510401*2^192,9835281374878099334 + 5017097695441341595*2^64 + 3391365704188632227*2^128 + 1679444132*2^192,3543775721276661627 + 15106289101704391016*2^64 + 6603641194368454486*2^128 + 67330008*2^192,9057504067952367336 + 15628915695552292542*2^64 + 9024249588418779792*2^128 + 1682039334*2^192;\
15582339635355181310 + 5293335942409444725*2^64 + 3102632198973958954*2^128 + 973972793*2^192,3706432515912183200 + 637153198352343184*2^64 + 11529548586160836433*2^128 + 381220835*2^192,11091585994584459534 + 12448358086434206226*2^64 + 7841761517869785883*2^128 + 580520964*2^192,1223761192607867106 + 4095589811707308717*2^64 + 15381803796629079892*2^128 + 243457041*2^192,17885920727577152004 + 1595883789101848802*2^64 + 2820771594078355167*2^128 + 1842705597*2^192,3429460399954756832 + 2227551380914617632*2^64 + 8871763728544336621*2^128 + 412031762*2^192,14932455586554878572 + 11565799369650378086*2^64 + 12833416363374199971*2^128 + 294153056*2^192,2792214618147355048 + 11897703772000100016*2^64 + 8473549478824767646*2^128 + 290158538*2^192;\
0 + 0*2^64 + 0*2^128 + 973078528*2^192,0 + 0*2^64 + 0*2^128 + 385875968*2^192,0 + 0*2^64 + 0*2^128 + 855638016*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 22977135*2^192,0 + 0*2^64 + 0*2^128 + 218103808*2^192,0 + 0*2^64 + 0*2^128 + 855638016*2^192,0 + 0*2^64 + 0*2^128 + 520093696*2^192,0 + 0*2^64 + 0*2^128 + 738197504*2^192;\
5282935076133303509 + 15801791301223228690*2^64 + 2117843515852604963*2^128 + 447739111*2^192,10371783155907545368 + 15689986192676393382*2^64 + 3901132564287187018*2^128 + 327534395*2^192,4693554821207935729 + 1761285470205090777*2^64 + 14801658179766099019*2^128 + 181737259*2^192,11098007451053431709 + 7945079102490459206*2^64 + 17575722415140472599*2^128 + 992385072*2^192,11138435372359450382 + 16999323898438217588*2^64 + 10120788336027982188*2^128 + 872383041*2^192,11240298008006255316 + 4535446505792210838*2^64 + 10584737021751829409*2^128 + 173692233*2^192,5040708423338039312 + 16345091702753706898*2^64 + 4876645025765493543*2^128 + 223518423*2^192,6549257530859516832 + 16231173462431790515*2^64 + 347857203515974809*2^128 + 473981074*2^192;\
13299281095608694342 + 2480389475239145698*2^64 + 10523967696392101764*2^128 + 1004708228*2^192,9467225359852062140 + 7296933655731058256*2^64 + 4878439950452768084*2^128 + 495549000*2^192,3703827289782259718 + 5303764565562007495*2^64 + 5825809311138334451*2^128 + 1804855884*2^192,2924167235968978588 + 3818644270763369120*2^64 + 5098356257170188148*2^128 + 174267586*2^192,17599897742370968012 + 12526175365676123416*2^64 + 2607926380905347813*2^128 + 463547774*2^192,17958285249824769324 + 5115304863469073258*2^64 + 13851913995677653629*2^128 + 537560604*2^192,647755037256677658 + 12863643790791177070*2^64 + 1204333260670139649*2^128 + 1167789392*2^192,4405349297969065736 + 6311372862341114844*2^64 + 12775249550930704378*2^128 + 84711681*2^192;\
4795282595792344502 + 14567007764987843995*2^64 + 8669046450482516091*2^128 + 781307270*2^192,13934549651426825604 + 16495450901754065233*2^64 + 16489414568850770900*2^128 + 29368923*2^192,17335468316228281330 + 628760846390492568*2^64 + 7327035131771685468*2^128 + 610265814*2^192,27549599529442864 + 2267089265039526377*2^64 + 12847868799700522616*2^128 + 1712851416*2^192,13166750876337623332 + 5593010515753545911*2^64 + 8610435353517717365*2^128 + 1025661293*2^192,8071905498197383800 + 1413919974692632242*2^64 + 17790790947607766502*2^128 + 793906786*2^192,7213429862165423138 + 9084255814194542079*2^64 + 4861545648393374612*2^128 + 1624925107*2^192,7724471795698022200 + 2478093774994697523*2^64 + 4226804360831148533*2^128 + 1665175312*2^192;\
14366137653832242282 + 10254105434307130606*2^64 + 3442363120481183346*2^128 + 981996946*2^192,11097152186934793274 + 2744431625946187933*2^64 + 18420256751030401675*2^128 + 1199388941*2^192,12268160795387849265 + 7230164549255632134*2^64 + 15256703886757351168*2^128 + 836674977*2^192,1983632824666564842 + 9394471221190164648*2^64 + 2540244562969233038*2^128 + 686618841*2^192,792217351572152010 + 1520959078430132594*2^64 + 16990200767404019012*2^128 + 1251015653*2^192,11174156327379497214 + 850109918701285116*2^64 + 3327027870856382412*2^128 + 942337742*2^192,7223022729040927899 + 12754378598155205472*2^64 + 3819207984961495624*2^128 + 717540741*2^192,10523301766067521680 + 3216643124079699967*2^64 + 14226599522401737305*2^128 + 1372569069*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4175 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 2*x^7 + 4*x^5 - 16*x^3 + 128*x - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 2*x^5 + 4*x^4 - 4*x^3 + 16*x^2 - 32*x + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 34

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
