/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 50
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 0, 3, 0, 0]  	15	3 
[1, 0, 2, 1, 0]  	16	5 
[1, 2, 2, 0, 0]  	17	6 
[2, 4, 0, 0, 0]  	18	6 
[1, 5, 0, 0, 0]  	18	6 
[1, 0, 0, 3, 0]  	18	4 
[1, 4, 1, 0, 0]  	19	5 
[1, 2, 0, 2, 0]  	19	5 
[0, 5, 1, 0, 0]  	19	5 
[1, 4, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[0, 4, 2, 0, 0]  	20	5 
[0, 7, 0, 0, 0]  	21	6  <--- 2
[0, 4, 0, 2, 0]  	22	5 
[0, 3, 1, 2, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 3, 4, 0, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	4 
[2, 3, 0, 0, 1]  	15	6 
[1, 1, 1, 2, 1]  	20	5 
[0, 3, 0, 3, 1]  	24	5 
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[1, 3, 1, 0, 2]  	16	4 
[1, 3, 0, 1, 2]  	17	6 
[0, 2, 1, 2, 2]  	20	4 
[0, 3, 2, 1, 3]  	22	4 
[0, 2, 4, 0, 253]  	22	3 
[0, 0, 5, 0, 254]  	20	2 
[0, 4, 1, 1, 254]  	21	5 
[0, 4, 0, 0, 255]  	12	2 
[1, 1, 0, 2, 255]  	16	3 
[1, 0, 1, 2, 255]  	17	4 
[0, 1, 3, 1, 255]  	20	3 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8502011859422886436 + 11050623113000933544*2^64 + 8893402314854883758*2^128 + 541839985*2^192,7872915398169480760 + 5390192641402444908*2^64 + 9380671742959967120*2^128 + 3421621084*2^192,1915539252812886536 + 7835190460915360569*2^64 + 9369453494992533370*2^128 + 3365298814*2^192,5672833221320867536 + 13670021332183728613*2^64 + 1735466388785676958*2^128 + 797032776*2^192,15945628367830166360 + 12531946396937823818*2^64 + 154012665611316493*2^128 + 2676386843*2^192,1078677227084523744 + 9655896016849601876*2^64 + 9842728812650234697*2^128 + 1355698872*2^192,394454134571039288 + 17555449872579044241*2^64 + 12989354158021397051*2^128 + 1542127265*2^192,6794821547644873920 + 5687461112178007771*2^64 + 18124510221053171323*2^128 + 639424350*2^192;\
14310137539540408841 + 3046980226890766449*2^64 + 18219840993792426052*2^128 + 3218315641*2^192,11954600314907344386 + 8605304327547766212*2^64 + 16834575445121247606*2^128 + 2490206563*2^192,13305901495804719110 + 1473572007176049963*2^64 + 1687296183238987788*2^128 + 2171369780*2^192,13573975947684988004 + 8413173112113777094*2^64 + 5450377263042828229*2^128 + 2198400270*2^192,12462041547561686394 + 17512957063939898937*2^64 + 1866384456744353065*2^128 + 4288812027*2^192,14283846974106663016 + 179574125825648777*2^64 + 9754045137269709503*2^128 + 318409744*2^192,14103036835039074322 + 7553950472589426910*2^64 + 604963791341591861*2^128 + 3451103079*2^192,11781500366286770824 + 4517532086278334673*2^64 + 7232899342820466969*2^128 + 806402536*2^192;\
2495563984993642384 + 3562398463687275752*2^64 + 4764418512446994149*2^128 + 1515596868*2^192,14341255407306965264 + 1617396356014724413*2^64 + 14201510816928341544*2^128 + 1022066469*2^192,6537808360957638144 + 7847721172476518797*2^64 + 841654609669138346*2^128 + 4119274566*2^192,15533201440465716048 + 4298381131538023437*2^64 + 4253052125811892598*2^128 + 1198185994*2^192,11332147142945607088 + 11095751974386033853*2^64 + 5855022166758243103*2^128 + 3344704186*2^192,4116313813861544704 + 6767138814580686741*2^64 + 11419651258569076065*2^128 + 2780515313*2^192,8314944875813272976 + 9175392441621767927*2^64 + 4111841062088176679*2^128 + 4290195908*2^192,1392359398316497360 + 14595134873513208111*2^64 + 9003131523980695834*2^128 + 2190936088*2^192;\
14193295298768383271 + 15796989671023205470*2^64 + 529102887543831364*2^128 + 3464192747*2^192,15017007482868741594 + 664951634854599921*2^64 + 560799710115435996*2^128 + 2656763282*2^192,4313419053148839210 + 13246088247384959439*2^64 + 6515683939566023298*2^128 + 3624859174*2^192,6149305026473391832 + 9428639131424855766*2^64 + 2634138890935866105*2^128 + 2849587961*2^192,6792066990792247498 + 3571580585571517856*2^64 + 891108098382257784*2^128 + 1343304503*2^192,4723087357570998172 + 12608289820869606802*2^64 + 11882142177700949545*2^128 + 47719289*2^192,8061003338505788638 + 673902553993344411*2^64 + 16387495568716713979*2^128 + 4288900754*2^192,2009998719867610944 + 6123983095176169442*2^64 + 1607066026695559128*2^128 + 3838232316*2^192;\
1612495045294950204 + 12815853190983361150*2^64 + 2518424484797195916*2^128 + 1792361348*2^192,3585957540011149168 + 6535711747347582953*2^64 + 16854518831337048390*2^128 + 485783847*2^192,9517236783941775336 + 15197907939196842456*2^64 + 4241914014501846527*2^128 + 300917275*2^192,13977972741247726808 + 9102599473232335448*2^64 + 2043292027982303483*2^128 + 1251019490*2^192,11389483819974173184 + 16402271558610742776*2^64 + 8248904000090220275*2^128 + 1041422027*2^192,11708059927101450616 + 7709086809832222642*2^64 + 14844509882963769687*2^128 + 1122854692*2^192,13755488134509230328 + 16572781783130558285*2^64 + 9308197900533367050*2^128 + 256118923*2^192,5881507493754274208 + 9239329407305067674*2^64 + 2523446989020952595*2^128 + 1878397018*2^192;\
17334415225670851934 + 5148048676375125535*2^64 + 13951071940026425952*2^128 + 3452638151*2^192,7306908722424689944 + 8419946136142591909*2^64 + 17135250770444445934*2^128 + 2709713197*2^192,1481501091084402260 + 16329880973656989385*2^64 + 13559590212788201597*2^128 + 3896473753*2^192,3850756425801228964 + 8113772017807907801*2^64 + 12874280982632152580*2^128 + 727894353*2^192,16647872017661857976 + 9370747769426438389*2^64 + 14063064624606896786*2^128 + 2239807120*2^192,14271936482617524484 + 7885167139119820761*2^64 + 16301731876822018242*2^128 + 2011800267*2^192,12806521159426191548 + 16116233686496478360*2^64 + 9658166388296908079*2^128 + 3028356799*2^192,11099330566421800152 + 2325134148324409236*2^64 + 1605143548660101601*2^128 + 2046342015*2^192;\
11259872587162090703 + 6941170994272215383*2^64 + 7893790869285785327*2^128 + 3498358974*2^192,7820637464502088798 + 11678133278058676497*2^64 + 8109406172590279742*2^128 + 1369363628*2^192,15270118427318115226 + 10645762722291051638*2^64 + 576618271574108676*2^128 + 692949373*2^192,6833159410509991556 + 3711872532114982199*2^64 + 3762144648357217003*2^128 + 3467326363*2^192,6932487830665180830 + 15381479715621147546*2^64 + 4360886139804886712*2^128 + 595674423*2^192,15104380154734610128 + 9303129944813638763*2^64 + 13799419657144145521*2^128 + 527731695*2^192,16677714604488646470 + 7415562983642080179*2^64 + 11879803273321881641*2^128 + 2580681824*2^192,2788569307761612584 + 7413500558986008104*2^64 + 5667093750727670589*2^128 + 3538058469*2^192;\
5075987137264547153 + 3587955127531911332*2^64 + 8180883459506717273*2^128 + 1673161351*2^192,18353076798940781662 + 14019712813526403044*2^64 + 1644339900164931444*2^128 + 902078682*2^192,7403217717176909278 + 7118928582224647656*2^64 + 14091128291597204315*2^128 + 1900503656*2^192,11914177164657562344 + 4878756828531495171*2^64 + 12100134642999654691*2^128 + 500635662*2^192,654920654860991294 + 15041272067107100801*2^64 + 7172810161103035915*2^128 + 1261450785*2^192,17256119878746386788 + 10185307659570657649*2^64 + 18384288958499468879*2^128 + 831239510*2^192,8039146414503710650 + 8760162188936741297*2^64 + 6679283521955247461*2^128 + 1469838170*2^192,13011860245974227136 + 17691240375393775566*2^64 + 5166378711846882034*2^128 + 285524510*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5244 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - 2*x^7 - 2*x^6 + 4*x^5 - 16*x^3 + 32*x^2 + 128*x - 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - 2*x^5 + 2*x^4 - 4*x^3 + 8*x^2 - 32*x + 64, 1]
The valuation of f-g is: 31
The valuation of subst(g,x,A) is: 32

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^5 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
