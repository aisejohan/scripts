/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 60
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[1, 4, 1, 0, 0]  	19	6 
[1, 1, 2, 1, 0]  	19	4 
[1, 4, 0, 1, 0]  	20	6 
[1, 1, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[0, 4, 2, 0, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	4 
[0, 4, 0, 2, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	4 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	3 
[0, 2, 0, 4, 0]  	26	2 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[1, 2, 0, 2, 1]  	19	5 
[1, 0, 4, 0, 1]  	19	5 
[1, 3, 2, 0, 1]  	20	4 
[1, 0, 3, 1, 1]  	20	4 
[1, 3, 1, 1, 1]  	21	6 
[1, 1, 0, 3, 1]  	21	6 
[1, 0, 2, 2, 1]  	21	6 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[0, 1, 2, 3, 1]  	26	2 
[1, 3, 1, 0, 2]  	16	6 
[1, 1, 0, 2, 2]  	16	5 
[1, 3, 0, 1, 2]  	17	6 
[1, 2, 2, 0, 2]  	17	5 
[1, 5, 0, 0, 6]  	18	5 
[1, 2, 1, 1, 251]  	18	4 
[1, 0, 2, 1, 254]  	16	5 
[1, 0, 1, 2, 254]  	17	5 
[0, 0, 4, 2, 254]  	26	1 
[2, 2, 0, 0, 255]  	12	3 
[0, 4, 1, 0, 255]  	16	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 4, 0, 1, 255]  	17	3 
[0, 1, 1, 2, 255]  	17	2 
[0, 6, 0, 0, 255]  	18	2 
[0, 0, 5, 0, 255]  	20	2 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 7 and 250.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[11411054570533489342 + 6081511920223457028*2^64 + 6068558075301896689*2^128 + 1970800336*2^192,6229783486684003628 + 5132862254360794889*2^64 + 15408243018730682877*2^128 + 1284912136*2^192,16014410664339498156 + 8032366572534895403*2^64 + 16280439470044979645*2^128 + 2079597654*2^192,5271059139089906652 + 10729553925168339319*2^64 + 1442743037977905430*2^128 + 943777143*2^192,8741590672552418040 + 8503859353826181539*2^64 + 2563960393961419680*2^128 + 1993204545*2^192,15842671185387209096 + 14109536907311431925*2^64 + 6370637985616580434*2^128 + 736270661*2^192,1606771977896500012 + 12312323034956726149*2^64 + 571546325514619376*2^128 + 459704135*2^192,6589337856598607664 + 4954226934890153974*2^64 + 15085307219523347500*2^128 + 1970172829*2^192;\
286708423858307328 + 6456126897753053458*2^64 + 15588585485815115274*2^128 + 281572903*2^192,12070360898036731900 + 3842259905213524081*2^64 + 3088244438247711324*2^128 + 252500201*2^192,1711704254798502752 + 10826570133946512719*2^64 + 5849983069742000194*2^128 + 2090845735*2^192,7819025122508972212 + 1727613565372302941*2^64 + 9367800494521650070*2^128 + 1757105246*2^192,1070121447803496224 + 9630956908073672138*2^64 + 17298807940423200141*2^128 + 473399850*2^192,1182885298597988884 + 7842189709265657489*2^64 + 4786121169302379766*2^128 + 1064524238*2^192,13889384571453817220 + 5686068640462910373*2^64 + 17612000741457869372*2^128 + 1971561998*2^192,18137557234098047760 + 17008597834851461094*2^64 + 12154718911151439118*2^128 + 972015575*2^192;\
4949531483968974146 + 9356417935935819993*2^64 + 10573212420657326581*2^128 + 1394672881*2^192,9998127250740358940 + 2158795429216984732*2^64 + 4993537119486079143*2^128 + 158079259*2^192,10260495899522076220 + 4086479681975804691*2^64 + 13548584935987135655*2^128 + 407481815*2^192,6459020675898054036 + 16225429293494742000*2^64 + 12764629364518081248*2^128 + 1203164844*2^192,8439480670095217936 + 6659081806042580051*2^64 + 17366438515094901267*2^128 + 687638100*2^192,11905288857226467456 + 16553005088412028397*2^64 + 6952452982541167938*2^128 + 1133949562*2^192,3442721085089631332 + 5242795074957132655*2^64 + 12331440927424709031*2^128 + 1085595035*2^192,9032390110994332440 + 16948872758623571369*2^64 + 684732701598170207*2^128 + 1468008479*2^192;\
7431938173587249480 + 8940534203700289141*2^64 + 10074025346150124450*2^128 + 1251774924*2^192,747450607479921432 + 6744720691877579651*2^64 + 2508011711119905098*2^128 + 947554603*2^192,15958005543281672396 + 9329097530083818627*2^64 + 2386854786934481946*2^128 + 1051750658*2^192,3149706717838665108 + 16347325213451939418*2^64 + 5528347344664802743*2^128 + 1192232675*2^192,17800108109386730588 + 3582850541274570563*2^64 + 978100058971425895*2^128 + 61931490*2^192,6035184260446528292 + 1011108793436638394*2^64 + 12867348235513234073*2^128 + 156451662*2^192,5390996087987124216 + 8948522891803271333*2^64 + 10689526018008395414*2^128 + 1193611156*2^192,2650553687355406560 + 7878052780817002115*2^64 + 15154082936631709934*2^128 + 1954338643*2^192;\
16909148540093814265 + 14890753573304340960*2^64 + 15271621092747610414*2^128 + 1778380521*2^192,11598163642069402450 + 2396057158267042638*2^64 + 6408981128874930050*2^128 + 71028430*2^192,5398929303494718254 + 15531144782377382458*2^64 + 6678421951760922056*2^128 + 34363597*2^192,14701267016953829458 + 8432634005289443598*2^64 + 3698906793926851056*2^128 + 1495450060*2^192,720411303157690304 + 3773962943657637814*2^64 + 9476245194846490114*2^128 + 843824266*2^192,1137438091827453224 + 15554765921516358129*2^64 + 7228723264554946263*2^128 + 7776382*2^192,7933043916113535622 + 12477644415621332981*2^64 + 13669785783692992524*2^128 + 20400945*2^192,17564952716592351328 + 7964125236323231493*2^64 + 10921730555514800902*2^128 + 1254291193*2^192;\
13873166660323767113 + 492802666148483984*2^64 + 13376571045567404277*2^128 + 827440070*2^192,1200678212049258054 + 12756102247687859193*2^64 + 12902700290996024504*2^128 + 117077957*2^192,18417126987496907410 + 11914063240527979164*2^64 + 11116244928381781126*2^128 + 428523989*2^192,10148956156125144398 + 12534593004605187873*2^64 + 16318076383168808992*2^128 + 238428789*2^192,482217488498997836 + 15903046957667412798*2^64 + 15084848335990908409*2^128 + 842723993*2^192,18205350030740694880 + 16616418440352264071*2^64 + 3796217818708122458*2^128 + 764973605*2^192,3369495538386826850 + 5797059652022635128*2^64 + 1184690760753661748*2^128 + 916039178*2^192,4613189091749043928 + 15862680163231797460*2^64 + 954156927395135830*2^128 + 571583852*2^192;\
14013028637279917163 + 7658474044566334843*2^64 + 13293113833518408945*2^128 + 1536017979*2^192,3521809603864179434 + 14694305113378384227*2^64 + 5171944074986940248*2^128 + 1322067024*2^192,14468910112517067602 + 12419736135556403114*2^64 + 10058496357014451478*2^128 + 1794672269*2^192,4225036914169807550 + 15112120774584206202*2^64 + 9029130096212737965*2^128 + 893259623*2^192,3982404865950065500 + 15629283346213033480*2^64 + 17172484087668713963*2^128 + 2031826813*2^192,13740499880462589716 + 3495692772903056629*2^64 + 4282487942261282248*2^128 + 313451175*2^192,18221202424167163714 + 13444619163127673075*2^64 + 16872278131241758727*2^128 + 919048331*2^192,15564745149537062576 + 11575568459044033282*2^64 + 2206640189911458711*2^128 + 750216317*2^192;\
17673791935726129119 + 10748658168817008916*2^64 + 16052794996171768377*2^128 + 552147258*2^192,9651123203261716402 + 11020554250954030210*2^64 + 14442792862079008981*2^128 + 338289423*2^192,5057070734523113902 + 9752811999629353002*2^64 + 3527292569649103584*2^128 + 361247835*2^192,15065540981081771062 + 4889522309657772669*2^64 + 5385777398164693226*2^128 + 67931703*2^192,13893636679666924148 + 10896485694244037062*2^64 + 6771854224529371172*2^128 + 694841843*2^192,3693186861492319236 + 16823273869963638523*2^64 + 9697006195223548767*2^128 + 662245525*2^192,7118714938743478938 + 9049693818331540254*2^64 + 15067805144962737937*2^128 + 371801384*2^192,16794727475201897232 + 6004229876581343615*2^64 + 2093704932656205209*2^128 + 462187801*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4687 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 + 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 + 2*x + 4, 1; x^6 - 2*x^4 + 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 34
