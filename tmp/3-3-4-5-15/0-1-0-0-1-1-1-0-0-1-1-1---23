/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 53
[2, 0, 1, 0, 0]  	10	4 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[1, 4, 0, 0, 0]  	15	4 
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	7 
[1, 1, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[1, 2, 2, 1, 0]  	22	5 
[0, 6, 1, 0, 0]  	22	4 
[1, 0, 5, 0, 0]  	23	4 
[0, 5, 2, 0, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[1, 0, 3, 2, 0]  	25	3 
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	2 
[1, 0, 2, 3, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 1, 2, 1, 1]  	19	5 
[1, 0, 4, 0, 1]  	19	5 
[1, 0, 3, 1, 1]  	20	5 
[1, 0, 2, 2, 1]  	21	6 
[1, 0, 1, 3, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	3 
[0, 0, 5, 1, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	4 
[1, 1, 0, 2, 2]  	16	5 
[1, 2, 2, 0, 2]  	17	5 
[0, 4, 2, 0, 2]  	20	4 
[0, 4, 0, 2, 2]  	22	4 
[0, 3, 0, 3, 2]  	24	4 
[0, 2, 1, 2, 253]  	20	2 
[0, 3, 2, 1, 253]  	22	2 
[0, 7, 0, 0, 254]  	21	4 
[1, 0, 1, 1, 255]  	12	3 
[0, 4, 0, 0, 255]  	12	2 
[0, 3, 0, 2, 255]  	19	3 
[0, 1, 0, 4, 255]  	23	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[9384042701635924362 + 10543681956711167342*2^64 + 791545276534047183*2^128 + 2071289466*2^192,15801600766001503212 + 8208684587468586441*2^64 + 5142678217659501912*2^128 + 414901251*2^192,14978635590202507152 + 12063235293475608971*2^64 + 12543772899201474580*2^128 + 670757489*2^192,6049536475605041080 + 15250787318361527409*2^64 + 12415371840601667258*2^128 + 81977101*2^192,2451465994579695856 + 4459820333372265020*2^64 + 14358804508716412759*2^128 + 418314173*2^192,12296181541086808592 + 7682375492920699906*2^64 + 9062024546792613186*2^128 + 1004375974*2^192,4700515920939120564 + 1768007731975889757*2^64 + 11421474464529185483*2^128 + 1608840512*2^192,16536570747124801128 + 325271563404730462*2^64 + 739551478151523780*2^128 + 155522552*2^192;\
3035083606286620201 + 12860704908092560509*2^64 + 16819216090466242673*2^128 + 437308839*2^192,8837260535339702218 + 17643355243754725133*2^64 + 3984892054036102767*2^128 + 219859441*2^192,1745448170889342888 + 3448519228773108046*2^64 + 4263357593927500113*2^128 + 112885133*2^192,2107938479069031360 + 7848995380692700808*2^64 + 6651571629171875075*2^128 + 659226575*2^192,15841497388515009124 + 10521292292326799747*2^64 + 920170197130231568*2^128 + 953300267*2^192,7035125499778105660 + 17257624914499575100*2^64 + 5306902393169837926*2^128 + 525123920*2^192,685707097767501598 + 1467843057636345694*2^64 + 8046356905447617776*2^128 + 580032533*2^192,13699871300652519452 + 4819840564061510781*2^64 + 2239256603452762649*2^128 + 126429684*2^192;\
2370646532069651543 + 13759560592304683774*2^64 + 18370186743168733938*2^128 + 1297422993*2^192,14628933956310167168 + 17965915423819253577*2^64 + 1369916271364348322*2^128 + 1266922894*2^192,787909116058964746 + 9428762279906717387*2^64 + 4899708037487887896*2^128 + 581743235*2^192,5670405100382229810 + 15952175598865578257*2^64 + 18401556263198683513*2^128 + 1583950937*2^192,12063618840799608548 + 16139411544048205473*2^64 + 7447841014795459516*2^128 + 433614879*2^192,6908129099628741800 + 7531281855886852846*2^64 + 11575080531572016974*2^128 + 1079432603*2^192,16022289491520163990 + 6329256717193679214*2^64 + 2421935512847506747*2^128 + 398667239*2^192,14154634294215552384 + 5905601958737364173*2^64 + 11579785305624345114*2^128 + 478232118*2^192;\
0 + 0*2^64 + 0*2^128 + 234881024*2^192,0 + 0*2^64 + 0*2^128 + 838860800*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 610179695*2^192,0 + 0*2^64 + 0*2^128 + 33554432*2^192,0 + 0*2^64 + 0*2^128 + 939524096*2^192,0 + 0*2^64 + 0*2^128 + 83886080*2^192,0 + 0*2^64 + 0*2^128 + 905969664*2^192;\
17175313565729748492 + 5811981365771290288*2^64 + 17898034131908011387*2^128 + 357870074*2^192,9266377632300359455 + 17633196311695257967*2^64 + 15503225757849463586*2^128 + 151309860*2^192,7279951279195006711 + 9533171578971991320*2^64 + 17651153244174082157*2^128 + 340889877*2^192,12554248942410339391 + 11019171416063767397*2^64 + 9951581699466622737*2^128 + 812618355*2^192,16230553583561158248 + 845984367572099579*2^64 + 14882051130081440764*2^128 + 747534924*2^192,18236840097846295610 + 13615201331923079690*2^64 + 2431957669811579253*2^128 + 151568514*2^192,3437748716988961102 + 8134177810085692086*2^64 + 18277010009621755126*2^128 + 89326311*2^192,2797161140393100114 + 5953726705450611664*2^64 + 10291740857759207595*2^128 + 179309236*2^192;\
5090531949635721754 + 9484519077422951481*2^64 + 11999481384501233933*2^128 + 401099468*2^192,8618024334946470363 + 17818849374401218712*2^64 + 10985184844094131288*2^128 + 1899255421*2^192,4250135459512923807 + 5490999023305468350*2^64 + 4639636223440674748*2^128 + 2124352884*2^192,18116622297083324639 + 16935385446861724097*2^64 + 5547296222283938230*2^128 + 2126106254*2^192,9170348199117456536 + 6128919613934257112*2^64 + 6597547880470876828*2^128 + 1001617825*2^192,17457172898939956362 + 1179910219545682291*2^64 + 9280851445181455036*2^128 + 346499467*2^192,18061755397468615958 + 9927240487330543622*2^64 + 4673043655667903535*2^128 + 932874500*2^192,2090012165972764122 + 3429180094710376193*2^64 + 1703365394568373274*2^128 + 1962201710*2^192;\
14902316006709679935 + 10543200523368847231*2^64 + 6622234704836170447*2^128 + 420004561*2^192,4673552615080625434 + 18195196918427838091*2^64 + 9014181650131107714*2^128 + 636955400*2^192,15984372469914488980 + 13822073607283881544*2^64 + 13954307894800307686*2^128 + 401793232*2^192,5424799114002299472 + 9426670032648937733*2^64 + 14742296427721654410*2^128 + 1126294578*2^192,15298193251586012992 + 13874621324913378517*2^64 + 2692786113808714337*2^128 + 291539114*2^192,9144834009387616680 + 11803193818730087812*2^64 + 17073818938341380736*2^128 + 77357224*2^192,138474669196640830 + 16085393849495597608*2^64 + 11357047541321748927*2^128 + 1441289048*2^192,6274872729781009364 + 12135986679259065902*2^64 + 844745019890332553*2^128 + 522285639*2^192;\
15078896867229052929 + 16742408908745227500*2^64 + 7152059836308043941*2^128 + 1054920226*2^192,1755748688354975686 + 13292695634638576437*2^64 + 3703030493030725535*2^128 + 1493584070*2^192,6281005068185383092 + 9230325981610206495*2^64 + 3660051052111360777*2^128 + 25248387*2^192,8650562455707293396 + 9246493088107775004*2^64 + 4765753757679638326*2^128 + 539211554*2^192,10379871744236199052 + 3411816209710359218*2^64 + 174217319644006900*2^128 + 1828690037*2^192,10321716462725921388 + 9522070720867885258*2^64 + 10058908413078503234*2^128 + 1276901006*2^192,12272579554227673230 + 2103451374237253952*2^64 + 17389147886038961799*2^128 + 2080995375*2^192,9672169362606081644 + 2528887573982369286*2^64 + 10531773448083754706*2^128 + 2020946572*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4116 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + x^7 - 8*x^5 + 32*x^3 - 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^2 - 3*x + 4, 1; x^2 + 2*x + 4, 2]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 28

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
