/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 60
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[1, 4, 1, 0, 0]  	19	7 
[1, 1, 2, 1, 0]  	19	6 
[1, 4, 0, 1, 0]  	20	7 
[1, 1, 1, 2, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	5 
[1, 6, 0, 0, 0]  	21	7 
[0, 6, 1, 0, 0]  	22	5 
[1, 0, 5, 0, 0]  	23	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 4, 2, 1, 0]  	25	3 
[0, 2, 1, 3, 0]  	25	2 
[1, 1, 0, 4, 0]  	26	3 
[0, 4, 1, 2, 0]  	26	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[1, 3, 0, 3, 0]  	27	3 
[1, 0, 0, 5, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	5 
[1, 3, 1, 0, 1]  	16	5 
[1, 1, 0, 2, 1]  	16	6 
[1, 3, 0, 1, 1]  	17	5 
[1, 2, 2, 0, 1]  	17	6 
[1, 5, 0, 0, 1]  	18	6 
[1, 0, 3, 1, 1]  	20	5 
[0, 4, 2, 0, 1]  	20	4 
[1, 0, 1, 3, 1]  	22	5 
[0, 4, 0, 2, 1]  	22	4 
[1, 0, 0, 4, 1]  	23	4 
[0, 3, 1, 2, 1]  	23	3 
[0, 3, 0, 3, 1]  	24	4 
[1, 0, 4, 0, 2]  	19	5 
[1, 0, 2, 2, 2]  	21	6 
[0, 0, 5, 1, 2]  	25	2 
[0, 1, 0, 4, 253]  	23	2 
[0, 0, 0, 5, 253]  	25	1 
[0, 2, 2, 1, 254]  	19	2 
[0, 2, 1, 2, 254]  	20	2 
[0, 7, 0, 0, 254]  	21	2 
[2, 2, 0, 0, 255]  	12	3 
[0, 4, 1, 0, 255]  	16	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 4, 0, 1, 255]  	17	3 
[0, 1, 1, 2, 255]  	17	2 
[0, 6, 0, 0, 255]  	18	2 
[0, 0, 5, 0, 255]  	20	2 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[2793728581941014986 + 15559646630002582472*2^64 + 2500746042936783509*2^128 + 3014446574*2^192,5259635885537166860 + 3695639112021020197*2^64 + 1471862618373276196*2^128 + 2206854920*2^192,2835746846036437620 + 8038939367601984245*2^64 + 14255341901640259908*2^128 + 7216128923*2^192,8548741717060476972 + 8389673449672442878*2^64 + 8407085215198224937*2^128 + 5765981227*2^192,7376501682876432760 + 16256475307809520286*2^64 + 8316678222366512491*2^128 + 1399489833*2^192,14190909568913161200 + 17765761438582604193*2^64 + 17131022172652543350*2^128 + 7019575562*2^192,4608658099517438220 + 12805397354961779690*2^64 + 8716330511747637043*2^128 + 1351596506*2^192,12053872192980914400 + 16232649396409497712*2^64 + 566455426231521007*2^128 + 6475551037*2^192;\
2870278612124489690 + 9136698144567125594*2^64 + 7899291671304692671*2^128 + 6439870643*2^192,8381186830802021020 + 8255173999773443956*2^64 + 9146143270029010696*2^128 + 2582451716*2^192,11722442473190761780 + 2668151639623390646*2^64 + 2859598379557902620*2^128 + 7341714018*2^192,4103490849491760316 + 10091484305578329231*2^64 + 2280289695245700977*2^128 + 2697839225*2^192,2700100021985178936 + 7052629893283924409*2^64 + 16685515899828399094*2^128 + 3265868229*2^192,8256379817714464000 + 12591130069061618764*2^64 + 4010039714374392893*2^128 + 6279802356*2^192,9915236745234626684 + 1624663356623447571*2^64 + 3246054845418903635*2^128 + 2650769822*2^192,17126374247847077312 + 14200742405580320681*2^64 + 4277383923018397713*2^128 + 5736861230*2^192;\
5189732667441178976 + 3136630550007647025*2^64 + 8276186162982789472*2^128 + 3725326698*2^192,6905810794322629952 + 8646563684694583984*2^64 + 4052357785272640371*2^128 + 3145825097*2^192,7406060745381630272 + 5049552633024035830*2^64 + 7321510654717557753*2^128 + 4310742591*2^192,16726376857417916224 + 12553844159544327604*2^64 + 3553197657015593495*2^128 + 604291694*2^192,16796533203723640704 + 7654280829855769253*2^64 + 6802942295898344920*2^128 + 4536797297*2^192,8254891894236859904 + 15506051591889748055*2^64 + 855407127986464665*2^128 + 5855314595*2^192,9661485954191250528 + 5162813811209478841*2^64 + 16650379508346993348*2^128 + 3859653112*2^192,16588396657006596192 + 4698497418601863601*2^64 + 13979891324635941425*2^128 + 1834732018*2^192;\
13169709398717526074 + 15480806264006285036*2^64 + 13201810186112937745*2^128 + 91479209*2^192,783820952432269036 + 11745054409614794078*2^64 + 9507791477927473155*2^128 + 5628096795*2^192,11607488358403983588 + 14975863756572631470*2^64 + 7484671785627819701*2^128 + 465442521*2^192,9399996461920840956 + 15115575349223023332*2^64 + 2901530537464952126*2^128 + 3172107254*2^192,4686802580803583944 + 8950131154895031181*2^64 + 11356744333835627385*2^128 + 1804374123*2^192,7940450534657497056 + 14398046383472811206*2^64 + 13391437411445024065*2^128 + 7063290942*2^192,617457041491692364 + 17278433418743835377*2^64 + 11200022104914152308*2^128 + 4823328606*2^192,99088846323126816 + 13214826865320089140*2^64 + 14979842887538824135*2^128 + 8215557212*2^192;\
13416092285252031339 + 9835006848756019513*2^64 + 536028197037748809*2^128 + 2124413195*2^192,5924358878007335274 + 2694081091084609866*2^64 + 14161791012305408424*2^128 + 3006970902*2^192,16983643502800453030 + 2258564647595720090*2^64 + 3723884659804527457*2^128 + 7738539701*2^192,7023621767682826570 + 8346318606152649700*2^64 + 287147460238356050*2^128 + 3788776212*2^192,7604779323367709300 + 11607958440407919308*2^64 + 15140702466477934286*2^128 + 2853829756*2^192,5301438993797246584 + 12345654891586745762*2^64 + 18181814320378458215*2^128 + 1678813997*2^192,10097076218489519770 + 8433100719937220729*2^64 + 11467960709164117063*2^128 + 750578616*2^192,17995379892069458128 + 1906074065092811863*2^64 + 3542934828317856385*2^128 + 4044242386*2^192;\
9566143922948149211 + 16213362043289955901*2^64 + 12002066213906920617*2^128 + 1042108071*2^192,6206592232967520522 + 6801364865561124843*2^64 + 16332414284111643540*2^128 + 3662985713*2^192,10941055298088791862 + 17663761259731851254*2^64 + 16847324512481100987*2^128 + 1865532157*2^192,2015827936194940842 + 18221542617314997468*2^64 + 7557952088081760091*2^128 + 3074377527*2^192,2806611932036043300 + 18226889315891341966*2^64 + 3770338649378165842*2^128 + 319498331*2^192,8719874199137909544 + 1139854906814580679*2^64 + 4539904233515632147*2^128 + 2982023405*2^192,10784639058674251578 + 12952129365392846270*2^64 + 15252414932366989793*2^128 + 2972392685*2^192,7094687351338436272 + 12975373863205025702*2^64 + 15995484067871411652*2^128 + 3581332624*2^192;\
2577594019458257159 + 18178876335057032785*2^64 + 1070516246322560421*2^128 + 2938543966*2^192,4354381527520013170 + 18419077306733680542*2^64 + 776281755081731403*2^128 + 1212305649*2^192,6233988762982386926 + 12360134217298074679*2^64 + 8281245311043609367*2^128 + 3717409512*2^192,12058459670699474354 + 7795484326121337263*2^64 + 7174583165584562552*2^128 + 2458001307*2^192,16951216375725618404 + 15962408492906580402*2^64 + 14334857641682595995*2^128 + 7594937914*2^192,15988841846271702824 + 2071016267203499439*2^64 + 3031009788444989953*2^128 + 8060890392*2^192,14572087558015075314 + 6045410261583345829*2^64 + 41914985415026923*2^128 + 4428668876*2^192,831510752869424784 + 3274554032073170398*2^64 + 10114255140977684880*2^128 + 5951327427*2^192;\
14234667085151301955 + 8550297772522139463*2^64 + 10625128342182215861*2^128 + 3457868897*2^192,16709823340505128410 + 6628207433109735642*2^64 + 16079290567162491815*2^128 + 220793302*2^192,11747975233883088934 + 9594217232045725555*2^64 + 5262311579697198233*2^128 + 137498008*2^192,11376079309729500618 + 7314680015346246349*2^64 + 9525607957168946159*2^128 + 833207552*2^192,11516028889011183940 + 5177553866957640146*2^64 + 1146298662827832821*2^128 + 188906138*2^192,12561650875571853976 + 5262360664431716470*2^64 + 15402952429863245637*2^128 + 2191147802*2^192,7486977340371202618 + 2918332111185871959*2^64 + 7180924105955170746*2^128 + 4764420018*2^192,7483999953285155792 + 12052068437999256336*2^64 + 5235481083717189945*2^128 + 2144131518*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 4656 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 32
