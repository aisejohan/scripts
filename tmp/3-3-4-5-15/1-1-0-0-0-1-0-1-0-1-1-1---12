/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 43
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 0, 1, 2, 0]  	17	3 
[2, 4, 0, 0, 0]  	18	7 
[3, 2, 0, 1, 0]  	20	5 
[1, 4, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[2, 2, 0, 2, 0]  	22	4 
[1, 3, 0, 2, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	5 
[1, 7, 0, 0, 0]  	24	4 
[1, 2, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 6, 0, 0, 1]  	21	6 
[0, 1, 3, 2, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[2, 3, 0, 0, 2]  	15	4 
[3, 0, 0, 2, 2]  	19	5 
[2, 1, 0, 2, 2]  	19	4 
[0, 1, 5, 0, 2]  	23	3 
[0, 1, 2, 3, 2]  	26	2 
[2, 1, 1, 1, 3]  	18	6 
[2, 0, 0, 3, 3]  	21	6 
[0, 7, 0, 0, 252]  	21	3 
[1, 5, 0, 0, 253]  	18	3 
[0, 4, 0, 0, 254]  	12	2 
[0, 2, 0, 2, 254]  	16	2 
[0, 1, 0, 4, 254]  	23	2 
[0, 0, 4, 2, 254]  	26	1 
[0, 1, 3, 1, 255]  	20	2 
[0, 0, 0, 4, 255]  	20	1 
------
The gap is between 4 and 251.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[5155227704130069032 + 2033818999335052905*2^64 + 17864243399615704715*2^128 + 2075744717*2^192,10958062111113657880 + 14062954688123610571*2^64 + 13161381397166023524*2^128 + 3871923020*2^192,18041600393342586784 + 13478043508677564124*2^64 + 4548753431044049730*2^128 + 1698902233*2^192,5357237490885634960 + 16283465366375359705*2^64 + 5247413945042818481*2^128 + 1598545162*2^192,11716454584624308864 + 9487929008614241434*2^64 + 2746314041802388884*2^128 + 3534728575*2^192,6716083163363611464 + 13860603685791132131*2^64 + 17928314540328272498*2^128 + 2248034905*2^192,8545559096898818192 + 8245001518853094914*2^64 + 11320850659922620928*2^128 + 57723835*2^192,227890951002513280 + 17181910480912882401*2^64 + 5476971182967637326*2^128 + 477614772*2^192;\
2034248993047147320 + 1335896857124373640*2^64 + 3609327685409966031*2^128 + 68653785*2^192,190792769143249728 + 1960030779687976228*2^64 + 2924804732578564797*2^128 + 403237504*2^192,2293682095191365120 + 10390064252067411641*2^64 + 5156514178286690376*2^128 + 21450524*2^192,13971697146786634264 + 14690587747641710859*2^64 + 14759323107970463938*2^128 + 87720229*2^192,2420966971435154768 + 11071290692860698800*2^64 + 2410898191807105553*2^128 + 2074201186*2^192,2216609411709003456 + 18302532738583379400*2^64 + 14326756760377287209*2^128 + 1456020966*2^192,16849702651354590864 + 13462843112022106695*2^64 + 15522514913574467385*2^128 + 1667222322*2^192,15507042183019037520 + 15427062122292115962*2^64 + 10861995444180619362*2^128 + 2021219398*2^192;\
11295524825764328623 + 17495962623316397197*2^64 + 12208210689313981507*2^128 + 1381055506*2^192,2050190277288492758 + 14809918137527676665*2^64 + 329555920914458355*2^128 + 3991050888*2^192,13287450531966723816 + 5917360847132484099*2^64 + 5689851937381450360*2^128 + 182544165*2^192,5586044656147278248 + 5520044893125903408*2^64 + 5038527857044495074*2^128 + 280385581*2^192,13217804154194580168 + 1164785245135941164*2^64 + 1943144858278092979*2^128 + 2572549650*2^192,16291239100862179174 + 8807598627545619470*2^64 + 2542534007066944584*2^128 + 2079213831*2^192,11573434692636575452 + 17587042536616146470*2^64 + 17722404591304841338*2^128 + 1988553176*2^192,11494694911585116760 + 10898019904867142168*2^64 + 11614692827069429930*2^128 + 2179731854*2^192;\
16667326019408713082 + 17685749664986639566*2^64 + 1609940500560693997*2^128 + 863528452*2^192,6274671542194508452 + 6258023679332951471*2^64 + 1709499426415633042*2^128 + 596367457*2^192,1823046125002609408 + 4903989524174488170*2^64 + 8459432270546376942*2^128 + 1366549303*2^192,6027140273125965472 + 14089996501428871912*2^64 + 8637619716457684578*2^128 + 56260725*2^192,10040995087068570560 + 2604892120052610195*2^64 + 13990449000190512124*2^128 + 4272862848*2^192,4927129638817012004 + 8076743197803831827*2^64 + 6431690463356837845*2^128 + 3804076048*2^192,5394136916658658808 + 14699269508681033586*2^64 + 10957647308333065931*2^128 + 1125705840*2^192,3857239567949912960 + 10436489087365907685*2^64 + 4545192623288932521*2^128 + 1420408438*2^192;\
8555122220588055665 + 17922841036067360910*2^64 + 17734336145498559862*2^128 + 4009794342*2^192,5214544077626146838 + 16600950944100768418*2^64 + 7013280637279788186*2^128 + 1381110537*2^192,7913629550218438220 + 1236455450578781278*2^64 + 3606473735185755897*2^128 + 1582750296*2^192,12134481064498520790 + 8279915866889813332*2^64 + 15862691899338906922*2^128 + 1546387677*2^192,15957401079309615616 + 10672772321502428046*2^64 + 638251150443406996*2^128 + 1006897208*2^192,13423301274324363670 + 9186000031083405780*2^64 + 30549707315219693*2^128 + 482505137*2^192,672176197040699356 + 3267974155864865328*2^64 + 8584064197118408600*2^128 + 4221582551*2^192,9072618180820962064 + 1581746797738667083*2^64 + 937088811088970935*2^128 + 1868553635*2^192;\
7606231680321641780 + 18091825430681929744*2^64 + 635704721039595505*2^128 + 2997778069*2^192,15837531067957583512 + 401445245577133463*2^64 + 5014159470294320359*2^128 + 1020438909*2^192,1053884476187248016 + 15959083088329934969*2^64 + 5839327986875897215*2^128 + 273990098*2^192,17799090851671298216 + 4920292639665395221*2^64 + 2206545058946706959*2^128 + 1286150044*2^192,18002117665860862688 + 13776118450600814136*2^64 + 9671771882415035437*2^128 + 4224201382*2^192,11567129327451591712 + 9068335747776701907*2^64 + 11630799558498974577*2^128 + 981502196*2^192,18027644481402647600 + 8921458748391329209*2^64 + 7462088739705662658*2^128 + 1491737158*2^192,10508236324115921024 + 7903556490118196442*2^64 + 6690944592378068346*2^128 + 1308286005*2^192;\
10356697969465982666 + 3313824658270755726*2^64 + 16117890800840042768*2^128 + 2837806796*2^192,14443585779259579116 + 11977964689980544037*2^64 + 909758375940379504*2^128 + 387226648*2^192,15113448970623571848 + 6232466479263288764*2^64 + 743736867100764907*2^128 + 1367270130*2^192,17993266822577453028 + 1509322785716445712*2^64 + 9996395313167286636*2^128 + 4223387034*2^192,10360872332854921872 + 7436840566102459661*2^64 + 3833156293259866036*2^128 + 1632511847*2^192,8705721649024513300 + 13178579354940235862*2^64 + 12914247987236524248*2^128 + 2963104425*2^192,3056845238861676432 + 13703394557523784713*2^64 + 7948524527417256156*2^128 + 2007441738*2^192,2351340350862480032 + 5831601219293213058*2^64 + 9048949071248092760*2^128 + 452067774*2^192;\
4007981714634259524 + 14247730900905243657*2^64 + 15077682610508717076*2^128 + 4278994699*2^192,16781745760536565140 + 4708976160497208626*2^64 + 2642820620745140776*2^128 + 1320667724*2^192,17237598259418491756 + 16504481254668578156*2^64 + 4151717750414014549*2^128 + 925982186*2^192,17468737203165707938 + 46476688978483112*2^64 + 11149928377016946307*2^128 + 2241787065*2^192,197572674670263576 + 2850295662540365136*2^64 + 5982079152166683818*2^128 + 2747664378*2^192,8781157259349251700 + 10738898737550860225*2^64 + 18327819399108148371*2^128 + 1299155531*2^192,197694379421575640 + 3610005154147248865*2^64 + 12315492177990730122*2^128 + 2464756988*2^192,13529164328780842840 + 11997149419615114615*2^64 + 12456802004947509973*2^128 + 1208673750*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5174 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 4*x^5 + 16*x^4 + 16*x^3 + 128*x + 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x + 2, 2; x^6 - 2*x^5 + 4*x^4 - 4*x^3 + 16*x^2 - 32*x + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 32
