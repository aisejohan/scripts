/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 50
[2, 0, 1, 0, 0]  	10	4 
[2, 0, 0, 1, 0]  	11	4 
[4, 0, 0, 0, 0]  	12	7  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[1, 0, 4, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[1, 0, 3, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[1, 0, 1, 3, 0]  	22	4 
[0, 6, 1, 0, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 5, 2, 0, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 5, 0, 0, 1]  	18	6 
[0, 4, 2, 0, 1]  	20	4 
[1, 1, 0, 3, 1]  	21	6 
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 0, 5, 1, 1]  	25	2 
[3, 1, 0, 0, 2]  	12	5 
[1, 1, 0, 2, 3]  	16	6 
[1, 2, 2, 0, 3]  	17	6 
[1, 0, 2, 1, 253]  	16	5 
[1, 0, 1, 2, 253]  	17	5 
[2, 2, 0, 0, 254]  	12	4 
[0, 6, 0, 0, 255]  	18	1 
[0, 2, 1, 2, 255]  	20	2 
[0, 3, 2, 1, 255]  	22	2 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 252.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[1975013962487476310 + 8760399320893989149*2^64 + 3467936796192082783*2^128 + 936199523*2^192,10992568696233238516 + 8998153741592997978*2^64 + 16934462673338541952*2^128 + 762521981*2^192,15307920883177026808 + 7063072398240953860*2^64 + 90640686751615755*2^128 + 528340817*2^192,17686590017740977648 + 7084707751702488189*2^64 + 13734973756101714409*2^128 + 9437407*2^192,14319939672853843644 + 11235324512834315286*2^64 + 5363223107144287989*2^128 + 321838992*2^192,7851236209179956582 + 772234003461525789*2^64 + 15681354931518218405*2^128 + 456773353*2^192,12622871157422883682 + 8602356178961163057*2^64 + 8138573106835353509*2^128 + 1002844851*2^192,14231335524314496172 + 4472981055982678524*2^64 + 2877537917631840941*2^128 + 568810608*2^192;\
8549848682082692834 + 17869039079804800449*2^64 + 8662338789685374147*2^128 + 689193355*2^192,18100868795121663778 + 14580162025078438092*2^64 + 2745635761507284633*2^128 + 763096040*2^192,9431960649612707238 + 6415041730268709877*2^64 + 9900332924468161638*2^128 + 740359381*2^192,3732838657019163660 + 12148511422928665145*2^64 + 395483512199094378*2^128 + 646787787*2^192,4676751325810554142 + 17897232789805909789*2^64 + 11094366829543406724*2^128 + 552367454*2^192,8132127809781219735 + 12012230278220110634*2^64 + 17856332321167916652*2^128 + 127313342*2^192,1154485737135497759 + 17849271187822435344*2^64 + 3359592077066379450*2^128 + 664196571*2^192,14007172054623492842 + 9228219500680683201*2^64 + 16759889812447804726*2^128 + 446207202*2^192;\
2121962154735241464 + 2336140131596123602*2^64 + 2295051124408526208*2^128 + 95130685*2^192,13296775814992003584 + 11202535820612901899*2^64 + 14129760916277081637*2^128 + 115317671*2^192,13120466731298154940 + 2166171235253256532*2^64 + 4531449950384600222*2^128 + 526661656*2^192,11311927244736561704 + 183445365015361446*2^64 + 995019495821676996*2^128 + 690832722*2^192,15467544634385249400 + 163585661297044926*2^64 + 14901608686389769124*2^128 + 603830560*2^192,7480618487298377530 + 10654581172282604105*2^64 + 235587274353363666*2^128 + 125295128*2^192,17317359740847601364 + 16566707285477019723*2^64 + 14153053206358615854*2^128 + 1072610298*2^192,13941405564610409648 + 16467924501482002326*2^64 + 14398136493835710414*2^128 + 808805015*2^192;\
0 + 0*2^64 + 0*2^128 + 50331648*2^192,0 + 0*2^64 + 0*2^128 + 264241152*2^192,0 + 0*2^64 + 0*2^128 + 226492416*2^192,2562675284646035458 + 10532762521251795415*2^64 + 12990733789987720539*2^128 + 233786679*2^192,0 + 0*2^64 + 0*2^128 + 297795584*2^192,0 + 0*2^64 + 0*2^128 + 515899392*2^192,0 + 0*2^64 + 0*2^128 + 201326592*2^192,0 + 0*2^64 + 0*2^128 + 213909504*2^192;\
13456726701374912969 + 6337117534008181776*2^64 + 4630690515906109587*2^128 + 998791910*2^192,7128419462656471834 + 17163715145601981383*2^64 + 2089508154475734327*2^128 + 942030473*2^192,2193301678295249610 + 10565814810127009948*2^64 + 12403054570348485989*2^128 + 284067080*2^192,7243925839632387348 + 15626457106352738039*2^64 + 13732546307754701488*2^128 + 488154178*2^192,7862874264624122660 + 8088950693732361982*2^64 + 8117633966635809400*2^128 + 902199586*2^192,2845444220627096215 + 17909460909244214536*2^64 + 2554391677643859349*2^128 + 977083197*2^192,5118791504919827601 + 13506694710812408787*2^64 + 8457707699086251879*2^128 + 528770263*2^192,9219891528668545126 + 11385699888771773072*2^64 + 14328328823635662876*2^128 + 39016893*2^192;\
1996789517152492349 + 3532691485291934245*2^64 + 6057604415769567343*2^128 + 90710503*2^192,14649302214747677786 + 3985476331059707572*2^64 + 6227983620498142929*2^128 + 332075807*2^192,589562544928516980 + 10353276315484417909*2^64 + 14612728060287105290*2^128 + 99514306*2^192,18141443100021312604 + 9214632448568895721*2^64 + 180220886231635486*2^128 + 896510817*2^192,9367815384152058180 + 3657738359899948095*2^64 + 13479494162261998982*2^128 + 722294715*2^192,462708812216329526 + 17242361722432787516*2^64 + 17464667773289992745*2^128 + 434928492*2^192,979886222972411408 + 13322295596818789046*2^64 + 4922714685354518913*2^128 + 917462310*2^192,14043852945934025960 + 4582730795411904892*2^64 + 16687522229943066872*2^128 + 590867918*2^192;\
13253565300974940656 + 2844327662584952468*2^64 + 3808506572928621502*2^128 + 748957503*2^192,2561598898200277710 + 7291464570506627614*2^64 + 8006830469486749757*2^128 + 970042701*2^192,3357369094671860272 + 17909004559641731672*2^64 + 6142657168479640015*2^128 + 273790394*2^192,14758996064788145980 + 9007403769656648954*2^64 + 4905732223448066782*2^128 + 472970127*2^192,3786805426415201550 + 14656045271139176853*2^64 + 1793603945784237082*2^128 + 116634216*2^192,12979644532653031607 + 12737059665241542668*2^64 + 1505560488611698311*2^128 + 580482971*2^192,9372140241431966449 + 3108403236032662279*2^64 + 15652509782068149881*2^128 + 85799715*2^192,6777586501046877314 + 4002874648605886118*2^64 + 13803475465757067961*2^128 + 696189389*2^192;\
14828437280653830850 + 13699362358842268491*2^64 + 2315849234690169793*2^128 + 758118654*2^192,6831827472549231632 + 17202886177929280360*2^64 + 10280269124588237130*2^128 + 880379901*2^192,7730990100727904176 + 17564696938660610936*2^64 + 18273797869447422906*2^128 + 239835283*2^192,8413030049085932572 + 6416758916651746094*2^64 + 4649065977521926087*2^128 + 35053248*2^192,4604314622158134564 + 6592607896917486347*2^64 + 12345564805916724958*2^128 + 781941087*2^192,3367379635647868992 + 3545374865675536715*2^64 + 1452246314281045828*2^128 + 1068887445*2^192,11492359623991816650 + 18202219704761661216*2^64 + 11236845883471669380*2^128 + 676080142*2^192,1958652362531767168 + 1714297217237433648*2^64 + 10534218807557729769*2^128 + 425844356*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 4233 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 4*x^6 + 16*x^4 - 64*x^2 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + x^3 - 2*x^2 + 4*x + 16, 1]
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 29

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^2*z^1*w^1 + 1*x^1*y^1*z^1*w^1 + 1*y^5 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
