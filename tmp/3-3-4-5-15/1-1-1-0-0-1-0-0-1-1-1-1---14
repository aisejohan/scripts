/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 40
[0, 2, 1, 0, 0]  	10	2 
[0, 2, 0, 1, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	6 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[0, 1, 0, 3, 0]  	18	2 
[3, 0, 0, 2, 0]  	19	4 
[2, 1, 0, 2, 0]  	19	4 
[3, 1, 2, 0, 0]  	20	4 
[2, 0, 1, 2, 0]  	20	4 
[0, 0, 5, 0, 0]  	20	2  <--- 3
[3, 0, 3, 0, 0]  	21	6 
[2, 0, 0, 3, 0]  	21	5 
[2, 1, 2, 1, 0]  	22	3 
[2, 0, 4, 0, 0]  	22	3 
[2, 0, 3, 1, 0]  	23	3 
[1, 7, 0, 0, 0]  	24	5 
[1, 0, 0, 5, 0]  	28	1 
[0, 0, 2, 4, 0]  	28	1 
[1, 0, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 11, 0, 0, 0]  	33	1  <--- 2
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[2, 1, 1, 1, 1]  	18	6 
[1, 1, 2, 2, 1]  	24	4 
[1, 0, 1, 4, 1]  	27	3 
[1, 0, 3, 3, 1]  	30	3 
[0, 10, 0, 0, 4]  	30	2 
[1, 0, 3, 2, 5]  	25	2 
[1, 0, 2, 3, 5]  	26	2 
[0, 0, 0, 5, 251]  	25	1 
[0, 0, 4, 2, 251]  	26	1 
[2, 2, 0, 0, 255]  	12	2 
[2, 0, 0, 2, 255]  	16	2 
[2, 1, 2, 0, 255]  	17	2 
[2, 0, 3, 0, 255]  	18	3 
[0, 7, 0, 0, 255]  	21	3 
------
The gap is between 6 and 250.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 6.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[5171700199088157814 + 17966989461438629579*2^64 + 16804680073428082785*2^128 + 5134500263*2^192,5146734761154432704 + 2646035215627539229*2^64 + 12271081080158255283*2^128 + 16871043655*2^192,17374408150627566332 + 551430843954874922*2^64 + 8925097088723010600*2^128 + 8139940375*2^192,16553986324230385260 + 16574705968489910590*2^64 + 682282707138894789*2^128 + 12616393375*2^192,9607103692270906784 + 8771695824906405974*2^64 + 10638813391213961858*2^128 + 18039354288*2^192,12453517646043376944 + 6427610221268989424*2^64 + 11698633298071437095*2^128 + 180629021*2^192,1378858078040755108 + 1044235078436920262*2^64 + 8915897169613916706*2^128 + 3391501705*2^192,11304422027240600480 + 9149569693949185856*2^64 + 689679364904056728*2^128 + 3078639341*2^192;\
6457475730816651301 + 13562748160120098365*2^64 + 2912161545075738616*2^128 + 16363206848*2^192,11292679384821042848 + 13401331873118481395*2^64 + 2327778120893849276*2^128 + 7234334844*2^192,2396230810545067202 + 1954874884241507651*2^64 + 9171709831882122485*2^128 + 16946943632*2^192,16582959372819591050 + 16886849688019840593*2^64 + 10302648565007597134*2^128 + 14264209951*2^192,3189655424276719664 + 5695636939781510770*2^64 + 9420020467561091983*2^128 + 730860964*2^192,10297469032965554088 + 14103038092336590264*2^64 + 16155520767751912678*2^128 + 14747579377*2^192,17858433851299652014 + 15693106641758044582*2^64 + 2611193488602053960*2^128 + 1711853840*2^192,12309409015788805552 + 17902128218374868983*2^64 + 16132474251058138061*2^128 + 2314555411*2^192;\
152543895360294758 + 5147845702065331816*2^64 + 18221760645310441434*2^128 + 11099045401*2^192,15826446740212562752 + 15276257001452429183*2^64 + 17775559267503096988*2^128 + 18424034736*2^192,6958919673591166172 + 6601904843252166816*2^64 + 10287550122026899400*2^128 + 8337986589*2^192,11237478097704616588 + 11758377914311282026*2^64 + 10987500996506495662*2^128 + 31246140177*2^192,7930628202429228512 + 15117776736531772325*2^64 + 17788693039723115768*2^128 + 20696999436*2^192,15576072403371501680 + 3927110866727037368*2^64 + 7491819100290137244*2^128 + 27130837040*2^192,8570603876935218564 + 4211163052720289952*2^64 + 15750384780012329367*2^128 + 1389209726*2^192,16143545827244963616 + 13667735257875825712*2^64 + 4178906765934552061*2^128 + 17250040632*2^192;\
3037359527298900174 + 3631072504109410576*2^64 + 15238840206427411971*2^128 + 3752975523*2^192,12013155353722820928 + 7250737975729362424*2^64 + 2590637598933602173*2^128 + 30117708791*2^192,13846838927984202092 + 13621464038576039374*2^64 + 2866695794654803050*2^128 + 34297029832*2^192,9928748400174338844 + 11661367689236080655*2^64 + 14183687443387094672*2^128 + 30499846648*2^192,4321815596829104800 + 14106147954638972862*2^64 + 11907303105943663757*2^128 + 10927157044*2^192,2883622504488636528 + 239344507397822701*2^64 + 5169829101894727979*2^128 + 563267555*2^192,6880784764105352884 + 8488016923016437749*2^64 + 2998990054218968007*2^128 + 11068481280*2^192,10378350764823448480 + 15449793719922259056*2^64 + 9458441278301748646*2^128 + 27588914014*2^192;\
9920708368212907302 + 9570985111157833515*2^64 + 2716611963504962867*2^128 + 30068577623*2^192,15020424200917578240 + 18384372069701178688*2^64 + 17407975004351658332*2^128 + 4155691880*2^192,8207037572420327836 + 5990226792574633504*2^64 + 12669849675128358998*2^128 + 15345880237*2^192,8790327052673974476 + 4126723698687956985*2^64 + 16393717860636764902*2^128 + 3202740946*2^192,6667969180240936480 + 5989098379887421715*2^64 + 11364322484090087357*2^128 + 15698766702*2^192,15254697539717667120 + 9695783366862775787*2^64 + 17672825722365211393*2^128 + 4126930536*2^192,9090144215066929284 + 359896957861950140*2^64 + 15269873432708291404*2^128 + 4406619045*2^192,3037741457108545056 + 4484034571902193558*2^64 + 2953969597777963354*2^128 + 32945420649*2^192;\
2771270131316995275 + 15693639723626509305*2^64 + 8417126181365487727*2^128 + 30360498480*2^192,1737662085458570976 + 17974580214772878748*2^64 + 16849111525399275828*2^128 + 33966989239*2^192,5608971954277472350 + 4233172271893977326*2^64 + 5647881037397742326*2^128 + 12958332654*2^192,17157403818500296150 + 9344494643971089872*2^64 + 14820246725417613769*2^128 + 27389004266*2^192,11046625961724633360 + 17603984063870759552*2^64 + 9609026819794730350*2^128 + 23284174206*2^192,13439251078512370008 + 11657249802603576078*2^64 + 15120567339403940018*2^128 + 26646410672*2^192,1488457286759053938 + 8399336968343433320*2^64 + 16788039266492763154*2^128 + 6326345761*2^192,13064858731611167440 + 5555834489695596061*2^64 + 2665092173811871875*2^128 + 320415951*2^192;\
2249769568845065855 + 8651882224407297476*2^64 + 11651599696321884098*2^128 + 8402138722*2^192,7845361459821650912 + 2602506918920474607*2^64 + 10479636799421799070*2^128 + 11109929416*2^192,9060031584102378086 + 8539187981284076567*2^64 + 1780837590297613124*2^128 + 7379437446*2^192,17051775812233751422 + 11076854189758081648*2^64 + 11776878433670345073*2^128 + 34028653078*2^192,6774311415380873680 + 6697725273131104714*2^64 + 4200449723965443336*2^128 + 18768836805*2^192,10888083876080375928 + 189670625081434607*2^64 + 10349845508556603114*2^128 + 20679622173*2^192,14695022779875078378 + 2130330486957402617*2^64 + 16948110964752476008*2^128 + 9343295654*2^192,5986210901745472400 + 10248012496740488278*2^64 + 16001185206135432029*2^128 + 28002847976*2^192;\
9247316874159802203 + 9416820132245349785*2^64 + 13190142718968388210*2^128 + 26193970952*2^192,313522986022174048 + 16248271116390130727*2^64 + 10595639473466554782*2^128 + 20644676053*2^192,1296115525193242430 + 17570045860203219787*2^64 + 14343500267509952147*2^128 + 22226252327*2^192,14746232213337225718 + 3910555111825882219*2^64 + 15235279783474373725*2^128 + 27522635848*2^192,13028238319490138256 + 5865354344469022887*2^64 + 13931183511121934397*2^128 + 29603228414*2^192,12853318375280798808 + 3589305569460937765*2^64 + 12040202652621191808*2^128 + 30272397057*2^192,12350606901993525330 + 7334092087566692400*2^64 + 5231811020167494516*2^128 + 12666367431*2^192,5486306958399300816 + 17653559620048018929*2^64 + 17939586059090163742*2^128 + 32834040302*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 4149 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^7 + 2*x^6 - 8*x^4 + 32*x^2 - 128*x + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: [x^2 - 2*x + 4, 1; x^6 - 2*x^4 - 4*x^3 - 8*x^2 + 64, 1]
The valuation of f-g is: 27
The valuation of subst(g,x,A) is: 25
