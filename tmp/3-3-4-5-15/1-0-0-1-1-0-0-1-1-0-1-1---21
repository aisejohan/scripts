/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 47
[2, 0, 1, 0, 0]  	10	2 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[2, 2, 0, 0, 0]  	12	3 
[1, 0, 3, 0, 0]  	15	3 
[0, 4, 1, 0, 0]  	16	3 
[1, 2, 2, 0, 0]  	17	4 
[1, 0, 0, 3, 0]  	18	4 
[1, 1, 2, 1, 0]  	19	4 
[1, 4, 0, 1, 0]  	20	5 
[1, 1, 1, 2, 0]  	20	4 
[0, 2, 1, 2, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[0, 4, 0, 2, 0]  	22	4 
[0, 3, 2, 1, 0]  	22	4 
[0, 6, 0, 1, 0]  	23	3 
[0, 2, 3, 1, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 4, 0, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 3, 1, 0, 1]  	16	4 
[1, 3, 0, 1, 1]  	17	4 
[1, 5, 0, 0, 1]  	18	5 
[1, 2, 0, 2, 1]  	19	5 
[0, 5, 0, 1, 1]  	20	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	3 
[0, 1, 2, 3, 1]  	26	2 
[0, 0, 5, 1, 2]  	25	2 
[0, 0, 0, 5, 253]  	25	1 
[1, 0, 2, 1, 255]  	16	3 
[1, 0, 1, 2, 255]  	17	3 
[0, 6, 0, 0, 255]  	18	2 
[0, 2, 2, 1, 255]  	19	1 
[0, 0, 5, 0, 255]  	20	2 
[0, 2, 4, 0, 255]  	22	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 252.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[15158185288612232818 + 6247355853743810659*2^64 + 3761306105770978250*2^128 + 6523131189*2^192,1887940355426425832 + 7534842444215531927*2^64 + 12357682948167437298*2^128 + 4970376550*2^192,370931899447207832 + 5004840323718653688*2^64 + 16154011011455303364*2^128 + 1756295747*2^192,4045491616349694212 + 5531087385180799145*2^64 + 5445738145037637874*2^128 + 2063335753*2^192,15843075174283404700 + 7120475424221146858*2^64 + 342357737006548784*2^128 + 1617438228*2^192,892266784667213992 + 8148491575500490703*2^64 + 633424213346228120*2^128 + 934052182*2^192,17534670017204294044 + 15262930166570993445*2^64 + 16366233327441261067*2^128 + 313731169*2^192,17640704642596305280 + 12916971112111687534*2^64 + 8372693886985688694*2^128 + 6088346452*2^192;\
8495406191106317043 + 7595839498150263011*2^64 + 5668471118599871116*2^128 + 7099362829*2^192,14077959829615157804 + 17893893798157976794*2^64 + 1863178028302195484*2^128 + 5695463367*2^192,8389066558448982500 + 5765093990420761565*2^64 + 6175950791652641192*2^128 + 6709936741*2^192,7873148374394736774 + 6871852256254444776*2^64 + 5055673625738493258*2^128 + 4055328302*2^192,17136772231542781642 + 6731497367792329729*2^64 + 3775654423724039943*2^128 + 3912001987*2^192,9565766353420164140 + 2489364008647898578*2^64 + 1698527280303992922*2^128 + 1232328438*2^192,9406466142284893770 + 4280748774891097963*2^64 + 17865592335207010954*2^128 + 5912161454*2^192,10883560594023103776 + 12157657684842193722*2^64 + 6525007048417408519*2^128 + 548369706*2^192;\
8447865144367963096 + 1602104230619691669*2^64 + 13143336895851956402*2^128 + 2414108425*2^192,14265960344646085440 + 15848121203067787043*2^64 + 9700261141395467840*2^128 + 2118823484*2^192,7119564118061635968 + 13979840089143617939*2^64 + 235671919367219821*2^128 + 551817398*2^192,922416128302511600 + 17941602186385863609*2^64 + 6076045104712013009*2^128 + 928211296*2^192,7935051295302210416 + 6085426116002503396*2^64 + 14491048984675603652*2^128 + 3499597585*2^192,17082694315429267136 + 1447519330434322034*2^64 + 17896869665766224054*2^128 + 4263677559*2^192,5467670600471615792 + 16578663580942688264*2^64 + 121805307078776468*2^128 + 4061508867*2^192,3049190604485472928 + 12024777914064126850*2^64 + 17670699205293119770*2^128 + 521040739*2^192;\
12065028318483596573 + 950724926977577545*2^64 + 4831315066693102462*2^128 + 391255907*2^192,10308848690023451668 + 3143849813644453647*2^64 + 5272581674537490121*2^128 + 4864068316*2^192,4798023829993819596 + 11844293031828110768*2^64 + 9337341418128766215*2^128 + 1452308137*2^192,276292049581274602 + 3302496734529748779*2^64 + 13696605038952873190*2^128 + 8101867341*2^192,2300460620156663702 + 3518364974217726631*2^64 + 17468297905528643622*2^128 + 3821657539*2^192,2603845362234964788 + 9675393002217608358*2^64 + 16425602567148363153*2^128 + 8003228826*2^192,17808135436576901734 + 11511052654001311049*2^64 + 11505291271482676267*2^128 + 6683115004*2^192,6055679702594620896 + 4429461527872799209*2^64 + 12720593879199715707*2^128 + 1572784402*2^192;\
9420108202889988153 + 12106276337699577355*2^64 + 8334641574852932988*2^128 + 1060287405*2^192,5518711568227066468 + 9490400565723924843*2^64 + 14925558149006477520*2^128 + 2158542583*2^192,8675928441331888268 + 13785521143916074768*2^64 + 16986201602429358599*2^128 + 357277812*2^192,14904368808787234258 + 5965589190499012286*2^64 + 10922321676182045892*2^128 + 317311461*2^192,15375996696879317294 + 16816257351486758396*2^64 + 8173619574348722580*2^128 + 1434839255*2^192,4613713141490840452 + 9585699600137994053*2^64 + 16625267458400577541*2^128 + 929958873*2^192,6657027105892128526 + 619355313472863718*2^64 + 8488164448694406486*2^128 + 245304482*2^192,4101476977363168928 + 11959631499350209938*2^64 + 2864394224500551181*2^128 + 2916311161*2^192;\
14171379284850284666 + 11533333448226059359*2^64 + 12996138256060241844*2^128 + 2758634385*2^192,11764092245824067768 + 3727585472392434314*2^64 + 14871588050749846644*2^128 + 3463312916*2^192,6351961993741686328 + 13485118589340217116*2^64 + 17328229139019355451*2^128 + 6377234459*2^192,7099600638983014724 + 10538058512078977127*2^64 + 15909879813543540226*2^128 + 3206124260*2^192,168973382078071964 + 13047462343557688586*2^64 + 14465029992743321900*2^128 + 3387449661*2^192,293036868310529848 + 11189600342884937178*2^64 + 16926293874458100126*2^128 + 909841041*2^192,819167400193543644 + 3828713068941941772*2^64 + 7005313690095059779*2^128 + 6580925281*2^192,14861064442871989216 + 2634880846482884878*2^64 + 8525917295551999188*2^128 + 5921888063*2^192;\
3073315009632230519 + 9810657507049114203*2^64 + 12882007773447872229*2^128 + 7430147665*2^192,11410602981672979244 + 5918666325694062823*2^64 + 7783081648491878669*2^128 + 7697711755*2^192,8633650512295016692 + 18101234832132729579*2^64 + 18124956317782623528*2^128 + 6908071585*2^192,13138566503362433006 + 8467778462942887353*2^64 + 3825412360498211200*2^128 + 6963823273*2^192,14693467528712548738 + 9324713714328206091*2^64 + 2460311518732716550*2^128 + 3812702324*2^192,17347969234408235516 + 7480784873006098083*2^64 + 14185387671304339855*2^128 + 1049641903*2^192,189056341887373330 + 9337439081432434765*2^64 + 377620011905854247*2^128 + 5823990178*2^192,8811165545712688000 + 4766062755648299097*2^64 + 16113605504944688856*2^128 + 434765777*2^192;\
7185361440531803333 + 17436011365609741959*2^64 + 7070247829830087683*2^128 + 5918554682*2^192,11099420333940037828 + 2243968008278511811*2^64 + 2977319886492061488*2^128 + 8211919933*2^192,334911370810238284 + 6472904339743150809*2^64 + 14429717260739375929*2^128 + 1225995231*2^192,6703798536801218570 + 11851038099446448394*2^64 + 16696485692023953870*2^128 + 387048618*2^192,5876404561303016902 + 15153327750942680437*2^64 + 17281839062501114427*2^128 + 2994175172*2^192,18344923485884662772 + 4027044812344740386*2^64 + 8924972006695517186*2^128 + 2772411887*2^192,8637169796880564406 + 16685236334322852556*2^64 + 16342271726918104488*2^128 + 7796500561*2^192,3459326953083946880 + 10249789771310130967*2^64 + 14522858933440197047*2^128 + 1660803427*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 5212 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256
Its Newton polygon is: [3/2, 3/2, 1, 1, 1, 1, 1/2, 1/2]
Its factorization is: Mat([x^8 - 2*x^6 + 16*x^4 - 32*x^2 + 256, 1])
The valuation of f-g is: 29
The valuation of subst(g,x,A) is: 29
