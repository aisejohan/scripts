/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 54
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	5 
[1, 0, 4, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	5 
[1, 0, 3, 1, 0]  	20	4 
[3, 4, 0, 0, 0]  	21	7 
[2, 5, 0, 0, 0]  	21	6 
[1, 6, 0, 0, 0]  	21	7 
[1, 0, 2, 2, 0]  	21	6 
[1, 0, 1, 3, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	4 
[0, 6, 0, 1, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	5  <--- 2
[0, 7, 1, 0, 0]  	25	2 
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 4, 2, 0, 1]  	20	4 
[1, 1, 0, 3, 1]  	21	6 
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[0, 1, 2, 3, 1]  	26	2 
[1, 3, 0, 0, 2]  	12	4 
[0, 5, 0, 1, 2]  	20	4 
[0, 6, 1, 0, 2]  	22	4 
[1, 1, 0, 2, 3]  	16	6 
[1, 2, 2, 0, 3]  	17	6 
[1, 2, 1, 1, 250]  	18	5 
[1, 1, 1, 1, 252]  	15	4 
[1, 0, 2, 1, 253]  	16	4 
[1, 0, 1, 2, 253]  	17	4 
[1, 0, 1, 1, 254]  	12	3 
[0, 2, 1, 2, 254]  	20	3 
[0, 3, 2, 1, 254]  	22	3 
[0, 0, 4, 2, 254]  	26	1 
[0, 0, 5, 0, 255]  	20	1 
[0, 7, 0, 0, 255]  	21	2 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
[0, 0, 0, 5, 255]  	25	1 
------
The gap is between 4 and 249.
Lengths: 1 1 6 8 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 6.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[4798409921005593504 + 10376231156554175577*2^64 + 7625502933737622083*2^128 + 34025318825*2^192,8760642474855338880 + 3331151091547499837*2^64 + 561072735465051514*2^128 + 33104201305*2^192,12211737157594727104 + 15751545137662473706*2^64 + 11913113280818653278*2^128 + 26901970711*2^192,4441979001511714880 + 7055381036102697597*2^64 + 15623444436351137914*2^128 + 3320256188*2^192,8764532645292763264 + 7875817342224178415*2^64 + 3079885211270245173*2^128 + 5408993763*2^192,8793986989670959360 + 16538995534436086560*2^64 + 15101826284973744140*2^128 + 27215576507*2^192,564394947674729664 + 156386555989355360*2^64 + 8821603522174330897*2^128 + 12999252061*2^192,15738443311686572288 + 13650476379185589151*2^64 + 12285360845730624239*2^128 + 17978134819*2^192;\
17028282077163393088 + 15998846959477997273*2^64 + 14318142612000649336*2^128 + 9084892236*2^192,16714659759390427584 + 14785595059033679137*2^64 + 17282690471003466243*2^128 + 14452430035*2^192,13946952571489024832 + 1334404160636025274*2^64 + 17703201419317489395*2^128 + 12034407703*2^192,18158880302530118848 + 434118826096401000*2^64 + 4631582920551791581*2^128 + 10006643920*2^192,13056816218360946496 + 4657596457060610582*2^64 + 10597709827718572488*2^128 + 13759097824*2^192,2757734970213691200 + 16499039207143470253*2^64 + 820784030884927779*2^128 + 11432985716*2^192,3599931438637651200 + 298929883087768498*2^64 + 10417079793206952136*2^128 + 9663031287*2^192,11714359046538518656 + 5853404846001366434*2^64 + 16200402697657375441*2^128 + 16184143748*2^192;\
3284548313545253725 + 3524196484699606694*2^64 + 8175514687320024326*2^128 + 11727580849*2^192,10182152958503523968 + 12714738710588752479*2^64 + 8982871811193455001*2^128 + 814971471*2^192,75018453890059534 + 9527063329600743699*2^64 + 11037100861317521840*2^128 + 23309166366*2^192,222377721790316738 + 1953144148760615178*2^64 + 10774166982632356965*2^128 + 26827260865*2^192,2423082933655335636 + 7573262752409633812*2^64 + 6955315172089354412*2^128 + 27172839284*2^192,6526547271309486564 + 13534156042726576141*2^64 + 8425562703906116163*2^128 + 1493917413*2^192,982666045218754630 + 11748951624509231894*2^64 + 4369221720840001396*2^128 + 33068675823*2^192,9343919623544407856 + 14974832803607963199*2^64 + 10493783931868203214*2^128 + 3330383345*2^192;\
17478954006249310940 + 7964002648906413013*2^64 + 2495744428224851291*2^128 + 12443866703*2^192,8325205484124927296 + 10366718622694661558*2^64 + 3151044644308254085*2^128 + 1219796570*2^192,13134118432392880616 + 6276061032073546269*2^64 + 13712262327375220823*2^128 + 1492751480*2^192,7582558893457788824 + 9908344834155285758*2^64 + 8638407955999396191*2^128 + 3955570913*2^192,7271205668791914864 + 5322875981593197768*2^64 + 8269194625906423234*2^128 + 34159474962*2^192,4900921537202576560 + 15772831328446779133*2^64 + 1320789509683173788*2^128 + 33739147291*2^192,10017675572913266824 + 10491291692526920069*2^64 + 16057679159837071639*2^128 + 10209130277*2^192,9763238735967214656 + 15080959103087424767*2^64 + 7767171099776246082*2^128 + 12819474063*2^192;\
15402653244792834861 + 18228995660856015848*2^64 + 9799040228723595594*2^128 + 32722063775*2^192,10092039019227209280 + 1858604636072601311*2^64 + 15284586600615404824*2^128 + 6894244937*2^192,12061013111903315438 + 1766058055507005781*2^64 + 12974429417074065343*2^128 + 2578205173*2^192,650479208300760546 + 9266268955343831131*2^64 + 11129597961849259242*2^128 + 17054055141*2^192,1414871212622423060 + 9057388263076742434*2^64 + 3978129262334075607*2^128 + 31716032593*2^192,5653581187502362020 + 14969683717527708136*2^64 + 12509012964838740274*2^128 + 33988596117*2^192,10418097377320922406 + 578486140373124678*2^64 + 14466513473981483530*2^128 + 14909210902*2^192,2451721009300174512 + 13384029474672650029*2^64 + 9678676016606394982*2^128 + 31107505105*2^192;\
7821277193150573424 + 16094901455264037221*2^64 + 2237003962325037293*2^128 + 10403874971*2^192,14561098394172591360 + 14822166617588322734*2^64 + 6279414979280831117*2^128 + 14996179582*2^192,6839827450491540576 + 17929387399960690643*2^64 + 4788130254297834341*2^128 + 3816105193*2^192,535204034210894880 + 17065767185269368579*2^64 + 2212004902217670111*2^128 + 15179847975*2^192,2500648739228795840 + 9216034187758290681*2^64 + 17262088676568715318*2^128 + 8768911680*2^192,18445809068671134528 + 15557885837883591693*2^64 + 14628031989916016144*2^128 + 7560537344*2^192,5851827535627700960 + 3225458706318026778*2^64 + 8480471331328708011*2^128 + 7254420612*2^192,7691913983597470592 + 17153429410189808092*2^64 + 11001811392009046028*2^128 + 7204147286*2^192;\
8184920274632203813 + 15736685133280189753*2^64 + 18150515424364315544*2^128 + 16621940256*2^192,18432444280096079104 + 6543017134601114871*2^64 + 14706322791576735512*2^128 + 26747588246*2^192,8561599367752295422 + 10297292078501790660*2^64 + 9510090130812627905*2^128 + 15104820158*2^192,4024683882450785810 + 7871270056713294125*2^64 + 13001607059450961369*2^128 + 22410264045*2^192,2112662629043234740 + 16511297751029053270*2^64 + 4029482108886350497*2^128 + 30029124758*2^192,676920423846044804 + 4769379850603513386*2^64 + 7587703757040517652*2^128 + 33303192830*2^192,613297024098799414 + 15717965696831882515*2^64 + 6746611339152147187*2^128 + 9400305670*2^192,8760231385385964336 + 605709457623604223*2^64 + 2676359694695640673*2^128 + 17244454959*2^192;\
14900801457397052867 + 9524777443038863971*2^64 + 11613275827418442892*2^128 + 523468624*2^192,439358367478931968 + 11170484354559039073*2^64 + 2447921320506668882*2^128 + 8192524609*2^192,3423376053696535858 + 4203622382128050958*2^64 + 9582272272055898121*2^128 + 17756065586*2^192,6123548116440265854 + 13684826814401908560*2^64 + 10100444141963501753*2^128 + 12591341029*2^192,8371743568493856044 + 4702875033480888290*2^64 + 7521387560248074254*2^128 + 7496453433*2^192,16889827245240088348 + 12257786683778056211*2^64 + 15719360874162263899*2^128 + 9255488547*2^192,40490117506183930 + 14855773893783051186*2^64 + 9628117415787022551*2^128 + 7482047829*2^192,1274255214671796048 + 11671899450757812020*2^64 + 15839522321940647851*2^128 + 12957319410*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 4594 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 - 2*x^6 - 4*x^5 + 8*x^4 - 16*x^3 - 32*x^2 + 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: Mat([x^8 + x^7 - 2*x^6 - 4*x^5 + 8*x^4 - 16*x^3 - 32*x^2 + 64*x + 256, 1])
The valuation of f-g is: 25
The valuation of subst(g,x,A) is: 20
