/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
The final length of G is 50
[2, 0, 1, 0, 0]  	10	3 
[2, 0, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	5  <--- 1
[3, 2, 0, 0, 0]  	15	4 
[2, 3, 0, 0, 0]  	15	6 
[0, 1, 3, 0, 0]  	15	2 
[1, 3, 1, 0, 0]  	16	6 
[1, 3, 0, 1, 0]  	17	6 
[1, 2, 0, 2, 0]  	19	5 
[1, 1, 2, 1, 0]  	19	4 
[1, 0, 4, 0, 0]  	19	5 
[1, 1, 1, 2, 0]  	20	4 
[1, 0, 3, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 2, 2, 0]  	21	6 
[1, 0, 1, 3, 0]  	22	5 
[0, 6, 1, 0, 0]  	22	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 5, 2, 0, 0]  	23	3 
[0, 3, 1, 2, 0]  	23	3 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 4, 2, 1, 0]  	25	2 
[0, 2, 1, 3, 0]  	25	3 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 2, 3, 0]  	26	2 
[0, 4, 0, 3, 0]  	27	3 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 0, 6, 1, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[1, 5, 0, 0, 1]  	18	6 
[0, 4, 2, 0, 1]  	20	4 
[1, 1, 0, 3, 1]  	21	6 
[0, 4, 0, 2, 1]  	22	4 
[0, 3, 0, 3, 1]  	24	4 
[3, 1, 0, 0, 2]  	12	5 
[1, 1, 0, 2, 2]  	16	6 
[1, 2, 2, 0, 2]  	17	6 
[0, 0, 5, 1, 2]  	25	2 
[2, 2, 0, 0, 254]  	12	4 
[1, 0, 2, 1, 254]  	16	3 
[1, 0, 1, 2, 254]  	17	3 
[0, 0, 0, 5, 254]  	25	1 
[0, 6, 0, 0, 255]  	18	2 
[0, 2, 1, 2, 255]  	20	2 
[0, 3, 2, 1, 255]  	22	2 
------
The gap is between 3 and 253.
Lengths: 1 1 6 6 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[426822183379467426 + 1638081834414150090*2^64 + 11671086169604449063*2^128 + 4179461571*2^192,10638866861779848708 + 15684604315922792624*2^64 + 13894573074680274149*2^128 + 3011375486*2^192,10449103991863476632 + 7114570248309343490*2^64 + 14660557594916806357*2^128 + 3769739977*2^192,10486178581973185020 + 14951871621509032299*2^64 + 893529797353137222*2^128 + 1691279150*2^192,7289947325637873748 + 7520746116838193721*2^64 + 11467815235804974683*2^128 + 3040926627*2^192,7815287874816410188 + 5980893600262983163*2^64 + 1583485317882889524*2^128 + 1991775755*2^192,2469991620660842240 + 7881127685683744954*2^64 + 381805737920652157*2^128 + 3273254063*2^192,11413409171829961776 + 17626063997174992156*2^64 + 11206429606213361467*2^128 + 3461088384*2^192;\
9562903457415091223 + 5046660943899234844*2^64 + 2637464021235967293*2^128 + 506574614*2^192,6589631499050217782 + 692424802943826039*2^64 + 12008363991674652975*2^128 + 2314334706*2^192,9124250229592065076 + 4672916445202265308*2^64 + 10467945039436126293*2^128 + 2402110960*2^192,3774197889741332066 + 14310198151939763989*2^64 + 9194138075176941711*2^128 + 2249659232*2^192,13817223023803416838 + 1824778445525706631*2^64 + 9093429712990648723*2^128 + 3568612469*2^192,5904539688797077962 + 1402467615221112390*2^64 + 5281583124192556215*2^128 + 3977429879*2^192,869264801158730488 + 1819944639028992187*2^64 + 12807272322492815137*2^128 + 1466006214*2^192,11182453738547139240 + 2982521191842100736*2^64 + 10198234494728392400*2^128 + 138966596*2^192;\
1071602636925850490 + 3713515832978955307*2^64 + 2218782659622240291*2^128 + 252201139*2^192,14364734583630727700 + 425462296709739344*2^64 + 16198053107274416140*2^128 + 803366490*2^192,12714912888357768560 + 5293275474812241343*2^64 + 16310845636146778117*2^128 + 336175450*2^192,12491385798313377492 + 1466032609149793334*2^64 + 525790987648401566*2^128 + 4040686180*2^192,7727170989477982524 + 5865301063119553459*2^64 + 10449146184479971672*2^128 + 911477170*2^192,17962177303539662612 + 17072634078486139190*2^64 + 4336543662280291450*2^128 + 1511603962*2^192,12545962158752945264 + 11615410743006972108*2^64 + 12354540215433322562*2^128 + 126310010*2^192,16381645336101455408 + 7347641595881615837*2^64 + 5099584686090397818*2^128 + 2793104398*2^192;\
0 + 0*2^64 + 0*2^128 + 1694498816*2^192,0 + 0*2^64 + 0*2^128 + 687865856*2^192,0 + 0*2^64 + 0*2^128 + 1677721600*2^192,10250701138584141832 + 5237561937588078428*2^64 + 15069447012531778926*2^128 + 1270691038*2^192,0 + 0*2^64 + 0*2^128 + 234881024*2^192,0 + 0*2^64 + 0*2^128 + 1509949440*2^192,0 + 0*2^64 + 0*2^128 + 922746880*2^192,0 + 0*2^64 + 0*2^128 + 83886080*2^192;\
15751125551958363647 + 7584296607374076397*2^64 + 3738623357424463115*2^128 + 2595220840*2^192,1915242741515750190 + 7651683828689984953*2^64 + 2192675882965151016*2^128 + 2784492573*2^192,7042378590746569756 + 18227740459624481512*2^64 + 14634574980198704764*2^128 + 1446198150*2^192,13551149968829082954 + 1847763150690799153*2^64 + 12163574884379830424*2^128 + 839753002*2^192,17497968127604818550 + 7822212137585747146*2^64 + 7113110075197514107*2^128 + 1619891968*2^192,14223252519456445506 + 10371933086525004641*2^64 + 15475713591527784299*2^128 + 3681495382*2^192,2838556717537843048 + 2890079052536129136*2^64 + 9044553267887794674*2^128 + 2305371069*2^192,12054491946885553400 + 15680718996419663039*2^64 + 12852365562223361505*2^128 + 3145909756*2^192;\
16148599793426843709 + 4252664210943153172*2^64 + 2765218107354552587*2^128 + 2054928563*2^192,17859508062592309546 + 9645474514985850701*2^64 + 12918610271285753920*2^128 + 3041186107*2^192,6240229393151876236 + 6290760119662965525*2^64 + 15304782838015861210*2^128 + 1312759154*2^192,14195616600827607774 + 6224715530670305646*2^64 + 6127520044215585065*2^128 + 745472335*2^192,459945367681672066 + 15855449565513879671*2^64 + 15930358989228228064*2^128 + 2150015941*2^192,13896472461790312326 + 13206057588050489208*2^64 + 15518371401119531387*2^128 + 70306578*2^192,9686156541296377528 + 2318317265429036114*2^64 + 7878601842165868932*2^128 + 2599767892*2^192,5489587813809183352 + 7595430749567330098*2^64 + 3207865353482951178*2^128 + 1934148063*2^192;\
3742061557423046433 + 8077638616593350130*2^64 + 9971055964855399378*2^128 + 211162408*2^192,18417177841748728298 + 16671489005660363707*2^64 + 14152657940765981053*2^128 + 4021219597*2^192,15849091423030384724 + 9567818399494309203*2^64 + 1440765833757373254*2^128 + 3389073520*2^192,10675080789619699302 + 12876671287409301349*2^64 + 8735598259463463902*2^128 + 4096671680*2^192,5803517270196374186 + 7761679860044263706*2^64 + 17262812808201002395*2^128 + 1351204345*2^192,890106926858777590 + 3100207477778823429*2^64 + 2390527032201609251*2^128 + 2375098779*2^192,3332068016778323992 + 3980640698803084773*2^64 + 10704942801842635658*2^128 + 1960788455*2^192,9707421101684125320 + 8962865093581212528*2^64 + 12656642402972046450*2^128 + 3650494849*2^192;\
16857039919925015878 + 13022209095752975261*2^64 + 18101024458639690517*2^128 + 2719146665*2^192,4946230482404762076 + 9305060665597660914*2^64 + 17442022343567981807*2^128 + 3425064211*2^192,289545633212165856 + 11971302430134073998*2^64 + 8003727760194866797*2^128 + 1275880779*2^192,5639233617555516284 + 16199282852073090244*2^64 + 11747597240414638480*2^128 + 509878465*2^192,8114717094785164884 + 15649193220518155513*2^64 + 18256242499483059326*2^128 + 1794982114*2^192,14336268185985132172 + 8435782420258974232*2^64 + 6189021342256122091*2^128 + 3953618606*2^192,5698730720231233808 + 6043087168438826100*2^64 + 10628078762108172359*2^128 + 1543374140*2^192,16550747752966824608 + 13304726129682956618*2^64 + 2006817083500616186*2^128 + 499240288*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4233 lists. */
The sign is: -1
The characteristic polynomial is: x^8 - x^7 - 2*x^6 + 32*x^2 + 64*x - 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 - x^5 + 2*x^4 - 4*x^3 + 8*x^2 - 16*x + 64, 1]
The valuation of f-g is: 28
The valuation of subst(g,x,A) is: 26

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^3*y^2 + 1*x^2*z^1*w^1 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 
Look at the ideal generated by: 
1*y^1
1*w^1
