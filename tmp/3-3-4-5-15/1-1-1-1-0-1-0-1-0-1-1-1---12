/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 36
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[1, 4, 0, 0, 0]  	15	4 
[1, 0, 1, 2, 0]  	17	3 
[1, 2, 0, 2, 0]  	19	4 
[3, 2, 0, 1, 0]  	20	5 
[0, 5, 0, 1, 0]  	20	4 
[1, 0, 0, 4, 0]  	23	4 
[3, 0, 0, 3, 0]  	24	5 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	6 
[3, 0, 0, 2, 1]  	19	5 
[2, 3, 0, 1, 1]  	20	4 
[2, 1, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[0, 1, 5, 0, 2]  	23	3 
[2, 0, 0, 3, 4]  	21	6 
[1, 1, 0, 3, 254]  	21	4 
[0, 7, 0, 0, 254]  	21	1 
[0, 1, 0, 4, 254]  	23	2 
[0, 4, 0, 0, 255]  	12	1 
[0, 2, 0, 2, 255]  	16	1 
[0, 0, 0, 4, 255]  	20	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 5 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 1.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[416403945962501980 + 930469532604340589*2^64 + 16675943933526465096*2^128 + 332591900*2^192,4612176682143021744 + 10012104067945913955*2^64 + 4536346750448724294*2^128 + 557460381*2^192,7468632461052086356 + 2449034856708034991*2^64 + 13675013574151982083*2^128 + 503230665*2^192,652149166413799096 + 6673009668546946861*2^64 + 14913345414368161531*2^128 + 415397969*2^192,15229464396374731784 + 15765930909743844018*2^64 + 261544297060247244*2^128 + 598991530*2^192,6781713542047437988 + 4932785656056873588*2^64 + 3533201092793745014*2^128 + 298133411*2^192,17863439400651548032 + 7515827487318868332*2^64 + 9860003270092703708*2^128 + 1314259259*2^192,12661152234757812568 + 14955067616566989001*2^64 + 10352262686023147628*2^128 + 1669371449*2^192;\
3188950881893017046 + 17075082788406120356*2^64 + 11196305355272662884*2^128 + 130010327*2^192,10094818155779204344 + 9298694163823747022*2^64 + 239123206953226607*2^128 + 1718970004*2^192,13020812727311015364 + 418964199625650241*2^64 + 6392643592037846709*2^128 + 655199027*2^192,1144750470762538772 + 16898881488684836660*2^64 + 14620109075493973261*2^128 + 1545401734*2^192,9089168047691516080 + 7149891798179702536*2^64 + 7264658845890523720*2^128 + 482189837*2^192,17417247953597411296 + 16674985477416535018*2^64 + 12003622014043799024*2^128 + 493140994*2^192,3881010716650834420 + 602921761354083067*2^64 + 905237305838597708*2^128 + 1628257449*2^192,12386295642856086584 + 10237947620706861396*2^64 + 12268115945531802980*2^128 + 159080448*2^192;\
1476225511929848508 + 5342160463776992583*2^64 + 8753667110488823903*2^128 + 236087577*2^192,8046111436695766696 + 599843852919096592*2^64 + 10961533361236994536*2^128 + 865056462*2^192,18428458292789130016 + 12501649131432829441*2^64 + 7727212116999742693*2^128 + 179070785*2^192,17237048992209097860 + 10916460157104011582*2^64 + 6144635002465896327*2^128 + 42405630*2^192,1746513393149823160 + 5680146918318375862*2^64 + 7026652173182859595*2^128 + 309463502*2^192,1710548640513332652 + 18003073077903940708*2^64 + 13893140361809495961*2^128 + 800100102*2^192,15738393217614440760 + 5290142469918296336*2^64 + 7303630751561845288*2^128 + 511476415*2^192,4334848958686339616 + 4173584414348926586*2^64 + 6629818296228957910*2^128 + 1073417975*2^192;\
1505223601735865144 + 19531451671297422*2^64 + 10504581986355485171*2^128 + 1899742448*2^192,2542219386108591360 + 5561576599227300985*2^64 + 17153173925839973519*2^128 + 18342243*2^192,13950381592640474832 + 56028682368286752*2^64 + 16362701105711334686*2^128 + 1815156648*2^192,15431035005449580968 + 10557724921342981117*2^64 + 188943523320372344*2^128 + 963806443*2^192,346157996158896248 + 11706945739532142553*2^64 + 18173757962479431437*2^128 + 633563881*2^192,14150665190741224136 + 11581016928686407667*2^64 + 4352916933230783234*2^128 + 1487172101*2^192,18221983330671328392 + 2795479732296328520*2^64 + 263168463139144101*2^128 + 2015150295*2^192,1269172482418995352 + 17478217344742373630*2^64 + 1507686609372012779*2^128 + 911678411*2^192;\
3819760778355137605 + 9508648311812983641*2^64 + 6383095385379030985*2^128 + 215480959*2^192,17163185385024627780 + 15419679274618377638*2^64 + 7989902504059952314*2^128 + 704801408*2^192,6271387495841743454 + 6290648277794722803*2^64 + 4303463733264157061*2^128 + 1103629104*2^192,7957093943696632760 + 8821117044949872365*2^64 + 18424014787469089635*2^128 + 420710943*2^192,11577512722480195084 + 11913807636528369347*2^64 + 15319660926796868406*2^128 + 2100718787*2^192,17934779084695426782 + 11215174638971523139*2^64 + 2527720951074157265*2^128 + 1450094532*2^192,15163258138757038658 + 16854088900558233990*2^64 + 8316581800283830459*2^128 + 1325802023*2^192,18201832513673605760 + 15439443663747404557*2^64 + 17901380159980420431*2^128 + 1983132723*2^192;\
6604287373492601652 + 4767633281770180965*2^64 + 12374845638509868492*2^128 + 2085056679*2^192,10872997571820001864 + 14226906102516440113*2^64 + 10276223052145520877*2^128 + 1655009593*2^192,16674437503272449432 + 11767229454022820515*2^64 + 11158396957838479739*2^128 + 1746728424*2^192,5187201253238631000 + 5044962558942947449*2^64 + 285497879277862175*2^128 + 1291454806*2^192,10624602758220618200 + 4201050465572628227*2^64 + 5112562836064288228*2^128 + 1423168836*2^192,5672429344718694164 + 8762239829800546875*2^64 + 4952575454005242515*2^128 + 257652039*2^192,10326996657231239464 + 16823419050844607447*2^64 + 17414807462320304554*2^128 + 608873308*2^192,3431752307213091992 + 12915083542218442920*2^64 + 17123264561239062768*2^128 + 9963129*2^192;\
6629328013441135262 + 15507980676142256384*2^64 + 1057949604629448274*2^128 + 1162156519*2^192,1852021415669743260 + 14327847473595718738*2^64 + 15971476335534600595*2^128 + 683101531*2^192,6521368938092354736 + 11378809311214708555*2^64 + 10804342411538743362*2^128 + 388630456*2^192,13766569255178631664 + 3507566682649915228*2^64 + 7357940946250515871*2^128 + 1092800754*2^192,17947408697725821640 + 8959695124433153107*2^64 + 17354867985483819412*2^128 + 2060093720*2^192,8014215955620701164 + 3370713003426756626*2^64 + 14389034225452026424*2^128 + 1011342676*2^192,17853030201876410936 + 5533529379295494471*2^64 + 3413227715965301800*2^128 + 1193259062*2^192,3555199406378556240 + 2461395884268978285*2^64 + 14017175492955189967*2^128 + 412165082*2^192;\
7313131738119576721 + 1799591994697397635*2^64 + 8342361810662771620*2^128 + 1428585652*2^192,3120109146765780400 + 5526384269639782941*2^64 + 5388783059869639384*2^128 + 900223671*2^192,10822177529099472066 + 183422004578796641*2^64 + 15043024323151317604*2^128 + 2002372681*2^192,17783015319776771824 + 15009466690157426845*2^64 + 5446869908282905886*2^128 + 1242753930*2^192,9826978712472641308 + 6697898400798418464*2^64 + 17066852698162406239*2^128 + 2120810585*2^192,9206294212050605770 + 8804606963732909280*2^64 + 9423019288755946114*2^128 + 1285282333*2^192,13163054828220655970 + 343656869586146272*2^64 + 17149266358339490276*2^128 + 717239883*2^192,16097357786112294792 + 10113330350326543600*2^64 + 13328314437014833872*2^128 + 347434504*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4804 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + 2*x^7 + 4*x^5 + 16*x^4 + 16*x^3 + 128*x + 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x + 2, 2; x^6 - 2*x^5 + 4*x^4 - 4*x^3 + 16*x^2 - 32*x + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 35
