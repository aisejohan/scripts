/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 33
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	2 
[4, 0, 0, 0, 0]  	12	3  <--- 1
[1, 4, 0, 0, 0]  	15	2 
[1, 0, 1, 2, 0]  	17	2 
[1, 2, 0, 2, 0]  	19	2 
[3, 2, 0, 1, 0]  	20	2 
[0, 5, 0, 1, 0]  	20	2 
[1, 0, 0, 4, 0]  	23	2 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	2 
[0, 8, 0, 0, 0]  	24	3  <--- 2
[0, 3, 0, 3, 0]  	24	2 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[3, 1, 0, 0, 2]  	12	3 
[3, 0, 0, 2, 2]  	19	3 
[2, 3, 0, 1, 2]  	20	3 
[2, 0, 0, 3, 2]  	21	3 
[0, 4, 0, 0, 254]  	12	2 
[0, 2, 0, 2, 254]  	16	2 
[0, 0, 5, 0, 254]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[6164310707140419520 + 3416272563361802428*2^64 + 17045996444755728117*2^128 + 3244824916*2^192,3966984273554420368 + 3629257038297270766*2^64 + 11965515735194395024*2^128 + 1523565799*2^192,5878808006211887696 + 3559386206683115685*2^64 + 12234612542640910405*2^128 + 2598774810*2^192,17699046990463671448 + 2446518544998248482*2^64 + 5337317046562599417*2^128 + 3961050481*2^192,1422390500279550056 + 10036310786943840778*2^64 + 14749176710675089752*2^128 + 3090578598*2^192,6017076076579658200 + 7670838234611402861*2^64 + 1373256690860113640*2^128 + 840840448*2^192,2233262084064542072 + 208774886962081883*2^64 + 9973644360321675784*2^128 + 2722295576*2^192,8570423743993977024 + 7299465683662213321*2^64 + 5431789359106545227*2^128 + 3648288763*2^192;\
2791745784072251680 + 9789479414210552292*2^64 + 12839067938698811295*2^128 + 1243703209*2^192,2181556833520971264 + 7883809558002322144*2^64 + 14701420318643087873*2^128 + 1585450603*2^192,6420793223464824192 + 14667168921800808596*2^64 + 1759545342633359428*2^128 + 31301158*2^192,17442807694122812888 + 6642302851338774032*2^64 + 9851390549683385031*2^128 + 551167067*2^192,8182244021028996288 + 3803971160522781029*2^64 + 17501601922335415011*2^128 + 680506920*2^192,14384011639585843520 + 8064994136453515451*2^64 + 5630597533673292736*2^128 + 664232837*2^192,15580941212370674624 + 1557870640751909174*2^64 + 12327458944718353920*2^128 + 1958417561*2^192,9815497209085934464 + 8700842342031470517*2^64 + 11265321910128475814*2^128 + 428257609*2^192;\
5207941383672298512 + 4974849364478420135*2^64 + 12797825539613090825*2^128 + 1356959738*2^192,14884425607352736992 + 10842476026877201646*2^64 + 5741748427067689369*2^128 + 1286139227*2^192,12988099054561976272 + 15720352614543175824*2^64 + 13450339648443875218*2^128 + 136052775*2^192,526722684380049332 + 17076088509448668870*2^64 + 18115327678507167826*2^128 + 1959018781*2^192,10957611754060413196 + 5635338967268291974*2^64 + 11474705612542029002*2^128 + 191397514*2^192,15575447372620725204 + 276257760625323674*2^64 + 17393676832734435305*2^128 + 654023096*2^192,12600152788192102980 + 808265123167032573*2^64 + 4413275961502469769*2^128 + 900642744*2^192,4868313651248579312 + 12682320200615102122*2^64 + 2236452205330281030*2^128 + 1829432893*2^192;\
16449840861105714608 + 3960776880819682006*2^64 + 5200112355734493949*2^128 + 311494417*2^192,8593253050725329536 + 15359655393245683569*2^64 + 7198132361964199904*2^128 + 959328292*2^192,8316967593457454464 + 11217289195237673418*2^64 + 17681447672385039598*2^128 + 1337089217*2^192,8977876216524317088 + 4428867333793994164*2^64 + 2544261183172992743*2^128 + 707959531*2^192,1194009395772569792 + 18106718300637008573*2^64 + 4343289539789786808*2^128 + 43631422*2^192,14860117827236844864 + 9102042883161701087*2^64 + 11272206782104764618*2^128 + 893287631*2^192,8405985404041759504 + 3496763753768494616*2^64 + 17462366945504692379*2^128 + 813873163*2^192,17867836693736471600 + 14712539008599618076*2^64 + 18009240493431269967*2^128 + 1553984898*2^192;\
3045333691911095455 + 10285870108302602592*2^64 + 10488606116750860433*2^128 + 336022466*2^192,14934590851209738872 + 12111754320913591617*2^64 + 8412842826602470910*2^128 + 4028160031*2^192,5787482403635533856 + 13561757470111607543*2^64 + 26748279216329329*2^128 + 980639667*2^192,9663588862182057477 + 255323741107744798*2^64 + 8291917120926685853*2^128 + 239384468*2^192,18343369669641604051 + 13692208082855060240*2^64 + 1602028256848921399*2^128 + 333942220*2^192,13056513127616356525 + 15506535386385777771*2^64 + 17320067832106060546*2^128 + 4151383641*2^192,12251102432026182669 + 4248885709606423016*2^64 + 1651693104821885665*2^128 + 1474101402*2^192,10713050978745426836 + 6083624731490808203*2^64 + 14931460987664780327*2^128 + 132225237*2^192;\
3045333691911095455 + 10285870108302602592*2^64 + 10488606116750860433*2^128 + 755452866*2^192,14934590851209738872 + 12111754320913591617*2^64 + 8412842826602470910*2^128 + 4078491679*2^192,5787482403635533856 + 13561757470111607543*2^64 + 26748279216329329*2^128 + 1316183987*2^192,9663588862182057477 + 255323741107744798*2^64 + 8291917120926685853*2^128 + 725923732*2^192,8092668531057462219 + 8454646145266981812*2^64 + 4979325318026694089*2^128 + 489314541*2^192,4860470192490946741 + 2297353250264304584*2^64 + 13942770770928287857*2^128 + 2955823928*2^192,12251102432026182669 + 4248885709606423016*2^64 + 1651693104821885665*2^128 + 2329739418*2^192,10713050978745426836 + 6083624731490808203*2^64 + 14931460987664780327*2^128 + 3185678549*2^192;\
7542968985902916508 + 4992776330634406446*2^64 + 7987629836513880528*2^128 + 3406433269*2^192,15960038166750230488 + 5612430147962474583*2^64 + 2886101694722429288*2^128 + 2403434980*2^192,5931452550996504136 + 15843638867385852612*2^64 + 12604122880095501791*2^128 + 2918023255*2^192,6890890466233743288 + 16540187861317875862*2^64 + 10926486982099223528*2^128 + 197776350*2^192,15525838050232589384 + 3606810405607661609*2^64 + 17020118673689115243*2^128 + 1919471915*2^192,5042426508282876152 + 6350907131436150917*2^64 + 4239798473403081212*2^128 + 46299653*2^192,918530590855779624 + 10435766000642236297*2^64 + 8480745234235550327*2^128 + 218084748*2^192,12293589332546393376 + 14753148471867431395*2^64 + 3512683570880416176*2^128 + 3135730692*2^192;\
17886952838756976696 + 10578922073926944322*2^64 + 17243455893380814817*2^128 + 3233783125*2^192,1344360955653604312 + 8205833420578141802*2^64 + 6217703200538967961*2^128 + 1698780475*2^192,14801747603542846112 + 17136205438740608645*2^64 + 14172925119949611802*2^128 + 112780391*2^192,7135692589227794352 + 13140284942858188389*2^64 + 7097739213803939668*2^128 + 1285175203*2^192,10767691507645020880 + 6606871942034577839*2^64 + 12351543412372910962*2^128 + 2968884679*2^192,10871982754975762864 + 11827683843595829562*2^64 + 60499737893753946*2^128 + 2662210007*2^192,16978313583787237392 + 15382950181202551485*2^64 + 15652356501972799164*2^128 + 1011509569*2^192,6411873614878846752 + 9240493143838376985*2^64 + 6627394906080930430*2^128 + 2517483140*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 3850 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + 4*x^5 - 16*x^3 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 + 4*x^4 + 4*x^3 + 16*x^2 + 64, 1]
The valuation of f-g is: 32
The valuation of subst(g,x,A) is: 32

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*w^3
Total 493: 1 
Look at the ideal generated by: 
1*x^1
1*w^1
