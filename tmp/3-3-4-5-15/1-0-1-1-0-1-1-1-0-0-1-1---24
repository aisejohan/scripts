/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 53
[1, 1, 1, 0, 0]  	10	2 
[1, 1, 0, 1, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	6  <--- 1
[3, 2, 0, 0, 0]  	15	7 
[2, 3, 0, 0, 0]  	15	7 
[1, 0, 3, 0, 0]  	15	3 
[3, 0, 1, 1, 0]  	18	7 
[0, 2, 3, 0, 0]  	18	3 
[3, 0, 0, 2, 0]  	19	6 
[2, 0, 1, 2, 0]  	20	6 
[0, 2, 1, 2, 0]  	20	4 
[2, 0, 0, 3, 0]  	21	7 
[1, 6, 0, 0, 0]  	21	6 
[1, 0, 0, 4, 0]  	23	6 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 7, 1, 0, 0]  	25	4 
[0, 4, 2, 1, 0]  	25	3 
[0, 0, 5, 1, 0]  	25	2 
[1, 0, 2, 3, 0]  	26	3 
[0, 7, 0, 1, 0]  	26	4 
[0, 2, 0, 4, 0]  	26	2 
[0, 6, 0, 2, 0]  	28	1 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[3, 1, 0, 0, 1]  	12	5 
[2, 0, 0, 2, 1]  	16	5 
[3, 0, 2, 0, 1]  	17	5 
[2, 0, 2, 1, 1]  	19	5 
[0, 5, 1, 0, 1]  	19	5 
[0, 5, 0, 1, 1]  	20	4 
[0, 4, 2, 0, 1]  	20	4 
[1, 0, 2, 2, 1]  	21	6 
[1, 0, 1, 3, 1]  	22	4 
[0, 4, 0, 2, 1]  	22	4 
[0, 1, 5, 0, 1]  	23	3 
[0, 3, 0, 3, 1]  	24	4 
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[0, 1, 0, 4, 254]  	23	1 
[0, 0, 0, 5, 254]  	25	1 
[0, 0, 4, 2, 254]  	26	1 
[2, 2, 0, 0, 255]  	12	3 
[0, 1, 2, 1, 255]  	16	2 
[0, 1, 1, 2, 255]  	17	2 
[0, 1, 4, 0, 255]  	19	1 
[0, 0, 5, 0, 255]  	20	1 
[0, 0, 3, 2, 255]  	22	1 
[0, 0, 2, 3, 255]  	23	1 
------
The gap is between 2 and 253.
Lengths: 1 1 6 6 1 3.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[7222898752062878746 + 15740918299685682633*2^64 + 5386094548932030899*2^128 + 2213622503*2^192,9440348540187533968 + 1528581713258955494*2^64 + 5131260707958018833*2^128 + 3519788545*2^192,2955263116310370332 + 2679565253320411410*2^64 + 63575730319197769*2^128 + 2726886817*2^192,13634360733812179452 + 5054436541017979746*2^64 + 8233126957680484454*2^128 + 2150622531*2^192,9175158221614558624 + 8721195654363195458*2^64 + 6953730610678844167*2^128 + 1408791458*2^192,14567939653518081088 + 10262094301223060414*2^64 + 10849120102919512202*2^128 + 4251115533*2^192,6772723106101607492 + 15888111753903991504*2^64 + 17732713524007557941*2^128 + 111518738*2^192,5687644287670424376 + 13634240536204777679*2^64 + 85811822367659085*2^128 + 2368562739*2^192;\
8825612881469097660 + 16597738339153578832*2^64 + 6317120800763880316*2^128 + 527268730*2^192,14648785749309501792 + 8051436102300431725*2^64 + 7565473367907986018*2^128 + 1256636097*2^192,2117206602638132784 + 13099064088275764889*2^64 + 12719644168278950372*2^128 + 705533470*2^192,10539536462338794568 + 1595890896708337220*2^64 + 11537599248735779245*2^128 + 531618499*2^192,10079789474817330064 + 8418325127512538750*2^64 + 5226105211745879335*2^128 + 3352864360*2^192,11176902634458193760 + 403457934174917394*2^64 + 14187705058350565787*2^128 + 3873633753*2^192,2288530576459851424 + 666979169411134423*2^64 + 4079651839761389788*2^128 + 3230151936*2^192,11725049998434040416 + 6217667723456463595*2^64 + 13613142619103625850*2^128 + 24533418*2^192;\
12643361400059580536 + 2023926570440682851*2^64 + 6777450240043392191*2^128 + 4235542853*2^192,8158741482672698888 + 6303060635942231614*2^64 + 5019729462158376757*2^128 + 2886001542*2^192,1899385163371941856 + 12660255405708293935*2^64 + 14916816507690392773*2^128 + 1336061740*2^192,870462599355579592 + 6856287036476324650*2^64 + 501020533223587805*2^128 + 1792364096*2^192,8180395287463794168 + 8127452155704025644*2^64 + 4674776597387305100*2^128 + 16348578*2^192,15291094550633989056 + 12307136203130119708*2^64 + 10871855340772854828*2^128 + 2515416367*2^192,1024871407044850328 + 2279655800998050566*2^64 + 4275416396140239921*2^128 + 1921250625*2^192,7683720571251341072 + 9043382138042759781*2^64 + 14864629713923231167*2^128 + 805035665*2^192;\
4614513419692345311 + 11940308374694210736*2^64 + 1937901887994563758*2^128 + 2419899576*2^192,718284291399132160 + 4173981919156305612*2^64 + 12344031994427974758*2^128 + 2675766220*2^192,5070390415097781194 + 8196060914241384689*2^64 + 9738141231944118976*2^128 + 1133702332*2^192,12013201733693914266 + 8007760005818161628*2^64 + 8387894395704231096*2^128 + 1673396462*2^192,1884761867704142944 + 1477313013231565344*2^64 + 8994762917135820823*2^128 + 4040620868*2^192,14731541966165119568 + 14841898524351886791*2^64 + 16599589979292457393*2^128 + 1398068147*2^192,2542680304171670806 + 10600703415786699306*2^64 + 1666653468852235752*2^128 + 3888016212*2^192,13961495537163419604 + 14597866720898111642*2^64 + 13672225942216712785*2^128 + 2002442375*2^192;\
297150171757527147 + 12243549167762565374*2^64 + 10500405407410195168*2^128 + 2661901563*2^192,5131838870884447112 + 11742111688159699859*2^64 + 4780776194678318024*2^128 + 2843395602*2^192,7326882549291281098 + 17035464746087891895*2^64 + 5005238684042251112*2^128 + 2468887696*2^192,18135695511654980138 + 1202195938700416774*2^64 + 596471373735270885*2^128 + 2558587691*2^192,15080835615054251656 + 3155775579241394018*2^64 + 6411651878052736911*2^128 + 3846297157*2^192,16807192399433285552 + 17508137026983182954*2^64 + 8316207253126236736*2^128 + 503327126*2^192,7794155417326927174 + 10125496148153514615*2^64 + 2591152313435276732*2^128 + 4058153090*2^192,7595439662991768532 + 2415157275653783138*2^64 + 3605742284395846495*2^128 + 952286316*2^192;\
5659284219257375329 + 15491071545488207339*2^64 + 7067567161467971163*2^128 + 2905406453*2^192,1518028897416796616 + 2628646326411181067*2^64 + 17643787846076775815*2^128 + 2528542927*2^192,2669045109612185150 + 14212977058073673340*2^64 + 4248074027193485848*2^128 + 3537672962*2^192,8961817562401948262 + 4716131597092724253*2^64 + 2717931670389911790*2^128 + 1294642448*2^192,1438348786866819672 + 12569589340566868687*2^64 + 14823901107086088205*2^128 + 1066236082*2^192,2038188188415061624 + 16550797927044888753*2^64 + 11219857234634590605*2^128 + 3011580867*2^192,6943227820140420818 + 17521510309178734917*2^64 + 5368859647209659374*2^128 + 663437327*2^192,16630298944507598332 + 12714148757249943186*2^64 + 17871586580194184027*2^128 + 3592260743*2^192;\
4469244006303345436 + 16294310363309064916*2^64 + 8418756373441138696*2^128 + 780548799*2^192,11189060118417951440 + 3920205237189657668*2^64 + 6515735710449658900*2^128 + 2252998545*2^192,3173381630656708960 + 8628280154434418694*2^64 + 12853947379136016052*2^128 + 1581053125*2^192,12856807162644493272 + 14106499278342283205*2^64 + 1559149694379422824*2^128 + 362092460*2^192,6679552494132879864 + 18410863076503355961*2^64 + 2667142957335563679*2^128 + 2714426828*2^192,9882081214003274760 + 717846583798733793*2^64 + 12340740172884267090*2^128 + 628287721*2^192,16096450646239175048 + 4484375581022995308*2^64 + 13457582296956933932*2^128 + 3859311723*2^192,13343531758626373280 + 2327772411414121870*2^64 + 9105407418092809800*2^128 + 4178591138*2^192;\
4640922924515405234 + 3242286062634100253*2^64 + 13268158336636797961*2^128 + 1488206887*2^192,15258847326722086928 + 10648475552897507999*2^64 + 8315097327264174595*2^128 + 1387540172*2^192,10899552866488209628 + 18330383350413934074*2^64 + 6111851759303462877*2^128 + 1889634691*2^192,16101299527679861324 + 12533692341646209733*2^64 + 15188833144945879470*2^128 + 1755178138*2^192,18034704277839282256 + 18023674233296451941*2^64 + 12879035444366608102*2^128 + 1749849306*2^192,16128027065489097744 + 16954306458766181569*2^64 + 4837721450348885862*2^128 + 1307614712*2^192,17256188153206450276 + 12375884297054008893*2^64 + 11001065590118699224*2^128 + 1465945308*2^192,13984072195680958344 + 11283402524852309355*2^64 + 14179495154519850326*2^128 + 527237154*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 5176 lists. */
The sign is: 1
The characteristic polynomial is: x^8 - x^7 - 4*x^6 + 16*x^4 - 64*x^2 - 64*x + 256
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 1, 0]
Its factorization is: [x - 2, 2; x^2 + 2*x + 4, 1; x^4 + x^3 - 2*x^2 + 4*x + 16, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 31

Please input coefficients below.
The polynomial is: 1*x^5 + 1*x^3*y^2 + 1*x^2*y^3 + 1*x^1*y^4 + 1*x^1*y^1*z^1*w^1 + 1*x^1*z^3 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
