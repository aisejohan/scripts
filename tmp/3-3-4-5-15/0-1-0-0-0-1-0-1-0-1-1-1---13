/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^5                     = Coefficient of   x^4 * y^1               = Coefficient of   x^3 * y^2               = Coefficient of   x^2 * y^3               = Coefficient of   x^2 * z^1 * w^1         = Coefficient of   x^1 * y^4               = Coefficient of   x^1 * y^1 * z^1 * w^1   = Coefficient of   x^1 * z^3               = Coefficient of   y^5                     = Coefficient of   y^2 * z^1 * w^1         = Coefficient of   y^1 * z^3               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
The final length of G is 33
[0, 2, 1, 0, 0]  	10	2 
[1, 0, 2, 0, 0]  	11	3 
[4, 0, 0, 0, 0]  	12	4  <--- 1
[1, 4, 0, 0, 0]  	15	3 
[1, 0, 1, 2, 0]  	17	3 
[1, 2, 0, 2, 0]  	19	3 
[3, 2, 0, 1, 0]  	20	4 
[0, 5, 0, 1, 0]  	20	4 
[1, 0, 0, 4, 0]  	23	3 
[0, 1, 5, 0, 0]  	23	3 
[3, 0, 0, 3, 0]  	24	4 
[0, 8, 0, 0, 0]  	24	4  <--- 2
[0, 3, 0, 3, 0]  	24	4 
[0, 0, 5, 1, 0]  	25	2 
[0, 2, 0, 4, 0]  	26	2 
[0, 1, 0, 5, 0]  	28	1 
[0, 0, 7, 0, 0]  	28	1  <--- 3
[0, 0, 2, 4, 0]  	28	1 
[0, 1, 4, 2, 0]  	29	1 
[0, 0, 1, 5, 0]  	29	1 
[0, 0, 4, 3, 0]  	31	1 
[0, 0, 0, 7, 0]  	35	1  <--- 4
[0, 1, 3, 2, 1]  	25	2 
[0, 1, 2, 3, 1]  	26	2 
[3, 1, 0, 0, 2]  	12	3 
[3, 0, 0, 2, 2]  	19	3 
[2, 3, 0, 1, 2]  	20	4 
[2, 0, 0, 3, 2]  	21	5 
[0, 4, 0, 0, 254]  	12	2 
[0, 2, 0, 2, 254]  	16	2 
[0, 0, 5, 0, 254]  	20	2 
[0, 0, 0, 5, 255]  	25	1 
[0, 0, 4, 2, 255]  	26	1 
------
The gap is between 3 and 253.
Lengths: 1 1 6 7 1 2.
For 30 = 3*d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*w^6

For 15 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*w^3

For 0 = d-d1-d2-d3-d4 you get 1 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8565673369192574872 + 8845075014442747347*2^64 + 13088218313122038758*2^128 + 2435762155*2^192,6472150703284206456 + 15098309424794994841*2^64 + 1625452634883010882*2^128 + 2330978488*2^192,3343663363701187560 + 7737548255267574855*2^64 + 12511508989571329041*2^128 + 2787028650*2^192,1760263867746337312 + 13633369663292663757*2^64 + 17278555418289607315*2^128 + 1384405127*2^192,10657040338552417832 + 4812685378707189124*2^64 + 3713306409973166746*2^128 + 2032812220*2^192,1362999406290514904 + 13585649284689587464*2^64 + 5688414246747043988*2^128 + 1220518118*2^192,9222292275420703528 + 482130332661370028*2^64 + 12726115839133600227*2^128 + 523648400*2^192,5134584134246390912 + 895456642612904046*2^64 + 1991573926343581763*2^128 + 2618972050*2^192;\
12910947482006738080 + 2949140691466351057*2^64 + 11030648400838618928*2^128 + 1004827089*2^192,14340043531807230836 + 16372157230696208920*2^64 + 7825880131845708780*2^128 + 876799429*2^192,2732521649956871204 + 864749409254378793*2^64 + 2540547138998806385*2^128 + 2087230084*2^192,13381602487277550224 + 12606267793282365741*2^64 + 14286304271313657895*2^128 + 782673774*2^192,116826781249386676 + 18040759764344757611*2^64 + 13867053501102837248*2^128 + 195089626*2^192,15605814637763799148 + 17898075456948210362*2^64 + 15786878116559908493*2^128 + 1757362071*2^192,6494007635837577548 + 333047487259876944*2^64 + 1623776509156071804*2^128 + 795421568*2^192,10350758584609726896 + 15627316333676191948*2^64 + 4533968153342663804*2^128 + 1593836001*2^192;\
16202832922578726100 + 17897350550549177492*2^64 + 6494767728298196863*2^128 + 406638481*2^192,6482562755155358612 + 11517647837457528065*2^64 + 316731733796696551*2^128 + 1463166478*2^192,10596213399435813604 + 15275828086794241778*2^64 + 6085167402259780873*2^128 + 549213967*2^192,7315935231411329304 + 2350793954844693388*2^64 + 9719852020640271399*2^128 + 463617280*2^192,3241783318083238756 + 324143545274213887*2^64 + 17305452419988876540*2^128 + 519961565*2^192,1941278060175757788 + 3778575515998477039*2^64 + 8282439142932386147*2^128 + 108946258*2^192,4290553714933523388 + 13231388969214952367*2^64 + 17563023820649552938*2^128 + 1559857403*2^192,7341447334847374992 + 16661041162717964569*2^64 + 16324793145880660132*2^128 + 932828156*2^192;\
16542509355153724280 + 18078445983824380477*2^64 + 16139045997771387672*2^128 + 835698413*2^192,668014958870199240 + 9717025358105966423*2^64 + 14056314442912978816*2^128 + 1572126517*2^192,16229809603429217256 + 7577309593685378392*2^64 + 3540762748796029981*2^128 + 1231421658*2^192,15751492170788567376 + 3023147728415928368*2^64 + 1287390881174241715*2^128 + 1753985847*2^192,2350611514956402408 + 164384185434686550*2^64 + 10360575053189072430*2^128 + 1685324310*2^192,4508781607943864600 + 7087801877292031858*2^64 + 2300114891757163599*2^128 + 1363119367*2^192,9076776481215499624 + 3895114272953612021*2^64 + 5918566357157794444*2^128 + 1034401077*2^192,12133519208866697040 + 17123849704327878747*2^64 + 9668985297947380458*2^128 + 1008520659*2^192;\
5583275982768540462 + 448082536030793475*2^64 + 15924196494277133422*2^128 + 4122035947*2^192,16545416411617424665 + 15404438365672186351*2^64 + 58171325837209981*2^128 + 2009100592*2^192,16057216125335054173 + 18206405201146292892*2^64 + 16506194920004223631*2^128 + 1090675042*2^192,1359403869742536854 + 15848644618595162238*2^64 + 5102792393274238997*2^128 + 267575046*2^192,16787726102618373969 + 6906372743557445203*2^64 + 12969118246767175284*2^128 + 1003172676*2^192,17899333305023603063 + 8858204911331785523*2^64 + 831530373933869001*2^128 + 279262252*2^192,3542493884295357191 + 5174270907788571*2^64 + 5861248403418481027*2^128 + 3994511270*2^192,15406557977518272876 + 13240710905639908027*2^64 + 2308153716064455632*2^128 + 79738788*2^192;\
10043937471345636710 + 8953780624175161145*2^64 + 2208900789011358092*2^128 + 4057207674*2^192,6053990671023297833 + 17106039362899140107*2^64 + 12414344465132598697*2^128 + 733935900*2^192,2403952448498138837 + 2100818753908103216*2^64 + 6390700668685275520*2^128 + 2785931042*2^192,8373829065909008798 + 3810006116018944837*2^64 + 4695865855384714527*2^128 + 2384731251*2^192,12566507314242164737 + 10382731134657125833*2^64 + 16504077708412487767*2^128 + 3658175311*2^192,11747568604645320551 + 4206113413367244472*2^64 + 12512882247811161192*2^128 + 4059011136*2^192,17231805685234116239 + 13130846942310670728*2^64 + 4735163546908914167*2^128 + 3619009359*2^192,1488139026333852748 + 6078442903808828265*2^64 + 6773810726273584440*2^128 + 991155580*2^192;\
14059071983556068608 + 17592580774413425099*2^64 + 7003204597929763447*2^128 + 1347699322*2^192,2141925669253106112 + 558618088220760538*2^64 + 11465758249942105960*2^128 + 3887956199*2^192,3172076944856848208 + 631490136200189386*2^64 + 15312330145367710499*2^128 + 3021681552*2^192,9214422097395822048 + 15505606595556427399*2^64 + 2006675423292722573*2^128 + 2531590365*2^192,7497761865717539784 + 11271187409076170525*2^64 + 9548214379105810829*2^128 + 3580992260*2^192,7362795716173359928 + 14254822053569051793*2^64 + 1092988880611347225*2^128 + 456133942*2^192,3822599721930682632 + 2230482270643394497*2^64 + 9623455888907560540*2^128 + 509232349*2^192,2614327501338275744 + 13679588189261528642*2^64 + 3293045995246381211*2^128 + 1603739634*2^192;\
4567560058498021852 + 12097040073368137834*2^64 + 12129272613688031251*2^128 + 3656316653*2^192,14591842067083271392 + 12296768483444099526*2^64 + 14957378887295129515*2^128 + 2746844162*2^192,4152923718278516696 + 16508940017418004508*2^64 + 13035866412353965667*2^128 + 3998943439*2^192,13228443037296545712 + 15315428117037095689*2^64 + 12801187576154056401*2^128 + 1465802914*2^192,3844294139653283640 + 16249142424228065617*2^64 + 6826873713081495744*2^128 + 718249552*2^192,3252669829486199240 + 12276385591409980022*2^64 + 15965977412014170481*2^128 + 292518957*2^192,4107859371064744728 + 8912146960031147664*2^64 + 1218489749196858772*2^128 + 2156566888*2^192,4613094615811608832 + 3275107599545851433*2^64 + 17496107605842531578*2^128 + 3317390373*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4201 lists. */
The sign is: -1
The characteristic polynomial is: x^8 + 4*x^5 - 16*x^3 - 256
Its Newton polygon is: [4/3, 4/3, 4/3, 1, 1, 2/3, 2/3, 2/3]
Its factorization is: [x - 2, 1; x + 2, 1; x^6 + 4*x^4 + 4*x^3 + 16*x^2 + 64, 1]
The valuation of f-g is: 33
The valuation of subst(g,x,A) is: 35

Please input coefficients below.
The polynomial is: 1*x^4*y^1 + 1*x^1*y^4 + 1*x^1*z^3 + 1*y^2*z^1*w^1 + 1*y^1*z^3 + 1*w^3
Total 493: 1 2 3 
Look at the ideal generated by: 
1*x^1 + 1*y^1
1*w^1
