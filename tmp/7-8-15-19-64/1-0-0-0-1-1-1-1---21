/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   x^1 * w^3               = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
The final length of G is 108
[1, 1, 2, 0, 0]  	45	3 
[8, 0, 0, 0, 0]  	56	3  <--- 1
[1, 0, 0, 3, 0]  	64	3 
[0, 1, 4, 1, 0]  	87	2 
[7, 0, 3, 0, 0]  	94	3 
[7, 0, 2, 1, 0]  	98	2 
[7, 0, 1, 2, 0]  	102	3 
[0, 9, 2, 0, 0]  	102	3 
[1, 0, 4, 2, 0]  	105	2 
[6, 8, 0, 0, 0]  	106	2 
[6, 0, 3, 1, 0]  	106	2 
[4, 0, 4, 1, 0]  	107	3 
[6, 0, 2, 2, 0]  	110	3 
[0, 8, 2, 1, 0]  	113	3 
[5, 8, 1, 0, 0]  	114	2 
[0, 1, 2, 4, 0]  	114	2 
[3, 7, 0, 2, 0]  	115	6 
[3, 0, 5, 1, 0]  	115	3 
[1, 0, 6, 1, 0]  	116	3 
[6, 0, 5, 0, 0]  	117	2 
[5, 8, 0, 1, 0]  	118	4 
[5, 0, 3, 2, 0]  	118	4 
[2, 7, 1, 2, 0]  	123	4 
[0, 13, 0, 1, 0]  	123	4 
[0, 8, 4, 0, 0]  	124	3 
[5, 0, 6, 0, 0]  	125	2 
[4, 8, 1, 1, 0]  	126	3 
[2, 14, 0, 0, 0]  	126	2 
[1, 13, 1, 0, 0]  	126	2 
[0, 11, 0, 2, 0]  	126	2 
[0, 3, 3, 3, 0]  	126	2 
[1, 15, 0, 0, 0]  	127	4 
[0, 12, 1, 1, 0]  	130	3 
[0, 7, 5, 0, 0]  	131	2 
[0, 6, 3, 2, 0]  	131	2 
[4, 0, 7, 0, 0]  	133	1 
[0, 10, 1, 2, 0]  	133	1 
[0, 0, 0, 7, 0]  	133	1  <--- 4
[0, 15, 1, 0, 0]  	135	3 
[0, 6, 2, 3, 0]  	135	3 
[0, 10, 0, 3, 0]  	137	3 
[0, 6, 6, 0, 0]  	138	1 
[0, 3, 0, 6, 0]  	138	1 
[0, 8, 0, 4, 0]  	140	1 
[0, 0, 3, 5, 0]  	140	1 
[3, 0, 8, 0, 0]  	141	1 
[0, 18, 0, 0, 0]  	144	3  <--- 2
[0, 9, 1, 3, 0]  	144	3 
[0, 5, 7, 0, 0]  	145	1 
[0, 2, 1, 6, 0]  	145	1 
[0, 7, 1, 4, 0]  	147	1 
[0, 0, 6, 3, 0]  	147	1 
[2, 0, 9, 0, 0]  	149	1 
[0, 5, 1, 5, 0]  	150	2 
[0, 7, 0, 5, 0]  	151	3 
[0, 4, 8, 0, 0]  	152	1 
[0, 0, 9, 1, 0]  	154	1 
[1, 0, 10, 0, 0]  	157	1 
[0, 3, 9, 0, 0]  	159	1 
[0, 0, 11, 0, 0]  	165	1  <--- 3
[0, 2, 10, 0, 0]  	166	1 
[1, 1, 1, 1, 1]  	49	2 
[0, 8, 0, 0, 1]  	64	2 
[5, 0, 3, 1, 1]  	99	3 
[1, 7, 0, 2, 1]  	101	3 
[4, 0, 3, 2, 1]  	111	4 
[0, 7, 0, 3, 1]  	113	2 
[0, 7, 2, 2, 1]  	124	2 
[6, 0, 2, 1, 2]  	91	3 
[5, 0, 2, 2, 2]  	103	4 
[0, 6, 5, 0, 2]  	123	3 
[7, 1, 0, 0, 3]  	57	3 
[7, 0, 0, 2, 3]  	87	3 
[6, 0, 1, 2, 3]  	95	4 
[5, 0, 5, 0, 3]  	110	3 
[4, 0, 6, 0, 3]  	118	3 
[2, 0, 7, 0, 3]  	119	4 
[0, 5, 6, 0, 3]  	130	2 
[1, 0, 9, 0, 3]  	142	2 
[0, 6, 0, 5, 3]  	143	3 
[1, 0, 8, 0, 4]  	127	4 
[0, 4, 7, 0, 4]  	137	2 
[0, 6, 1, 4, 4]  	139	2 
[0, 3, 8, 0, 5]  	144	2 
[0, 2, 9, 0, 6]  	151	2 
[0, 1, 10, 0, 7]  	158	2 
[0, 0, 8, 1, 249]  	139	1 
[0, 0, 7, 1, 250]  	124	1 
[0, 0, 5, 3, 250]  	132	1 
[0, 0, 6, 1, 251]  	109	1 
[0, 0, 4, 3, 251]  	117	1 
[0, 4, 2, 3, 251]  	119	1 
[0, 0, 2, 5, 251]  	125	1 
[0, 0, 5, 1, 252]  	94	1 
[0, 0, 3, 3, 252]  	102	1 
[0, 6, 3, 1, 252]  	112	1 
[0, 7, 4, 0, 252]  	116	2 
[0, 0, 1, 6, 252]  	129	1 
[0, 1, 2, 1, 253]  	57	2 
[0, 0, 4, 1, 253]  	79	1 
[0, 0, 2, 3, 253]  	87	1 
[0, 0, 0, 5, 253]  	95	1 
[0, 6, 0, 3, 253]  	105	1 
[0, 5, 1, 3, 253]  	112	1 
[0, 0, 3, 1, 254]  	64	1 
[0, 0, 1, 3, 254]  	72	1 
[0, 0, 2, 1, 255]  	49	1 
[0, 0, 0, 3, 255]  	57	1 
------
The gap is between 8 and 248.
Lengths: 2 2 3 6 2 6.
For 143 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 79 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 15 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 6.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[14808922094502718408 + 1305300351136509579*2^64 + 9662299479953743504*2^128 + 1853502376*2^192,11990573505617451520 + 543960048607956073*2^64 + 11787927736462612310*2^128 + 2944179569*2^192,8175579537772619008 + 10767797738456633962*2^64 + 6615934802980256305*2^128 + 5116688909*2^192,15063092577863196800 + 15451639217450470339*2^64 + 18264937370114645989*2^128 + 650644743*2^192,4157701557669802752 + 403928014031491862*2^64 + 13563920270797683031*2^128 + 8362202651*2^192,7936524535987422720 + 11581746494751132423*2^64 + 16756304640582222232*2^128 + 4759049558*2^192,4080636727130070784 + 1079198967838723858*2^64 + 8187425187651025983*2^128 + 4778423411*2^192;\
343834976194116613 + 8126044030957191842*2^64 + 11931541406441011775*2^128 + 5876325209*2^192,9302798323590893282 + 1797575916829984529*2^64 + 7037568605644664339*2^128 + 1274459532*2^192,8680705263463328608 + 17868991630765651090*2^64 + 15833592144307323444*2^128 + 5413806332*2^192,16191650669826105354 + 1401583575422592359*2^64 + 1701899267566890608*2^128 + 1013310480*2^192,14138977548585154976 + 15815515662859110600*2^64 + 15396070651151834011*2^128 + 1156062890*2^192,3350981736386920070 + 4228087255595099143*2^64 + 17687502057552075705*2^128 + 1851111551*2^192,5119423387420143320 + 14346061083755138692*2^64 + 9399640543833793601*2^128 + 8118980531*2^192;\
0 + 0*2^64 + 0*2^128 + 2818572288*2^192,0 + 0*2^64 + 0*2^128 + 2684354560*2^192,2054658203458732048 + 10475123875176156857*2^64 + 11692149951354006236*2^128 + 2574936509*2^192,0 + 0*2^64 + 0*2^128 + 2550136832*2^192,0 + 0*2^64 + 0*2^128 + 3221225472*2^192,0 + 0*2^64 + 0*2^128 + 3489660928*2^192,0 + 0*2^64 + 0*2^128 + 3489660928*2^192;\
7270314534287959592 + 16310450018811244872*2^64 + 15365032242227056651*2^128 + 1148817123*2^192,15164271069955754288 + 15383812405859100389*2^64 + 5209543678578200402*2^128 + 2397247590*2^192,15045928707702416448 + 5318722839709512201*2^64 + 14299303584975828675*2^128 + 405146182*2^192,4997694966260972752 + 3192929038461005921*2^64 + 11937629921112570037*2^128 + 1748382789*2^192,16410968073511139776 + 8122864423570875462*2^64 + 14148081251717141476*2^128 + 3901883433*2^192,14228287014751171664 + 12850001804671008594*2^64 + 11537437286626264791*2^128 + 2377748889*2^192,3117353888533551424 + 16124328265661920874*2^64 + 1005851331161223991*2^128 + 1901071175*2^192;\
1779889130326642367 + 7787867076221982520*2^64 + 7641660172106043665*2^128 + 1790447648*2^192,15917969003246337874 + 16357787088736999831*2^64 + 12805065315916665776*2^128 + 5556604072*2^192,4370348740814790760 + 6367456029000465655*2^64 + 13569972554354170379*2^128 + 3355513985*2^192,6861475999346617986 + 16312184819649048346*2^64 + 2211675783306099828*2^128 + 6650460257*2^192,16785846320847756392 + 13729162514207108778*2^64 + 11968161216224829758*2^128 + 8247728613*2^192,13477816347670670934 + 17316408801170540814*2^64 + 5129632662242340639*2^128 + 676874254*2^192,637369470304899808 + 2664908103776880850*2^64 + 1523425054765675924*2^128 + 4015661886*2^192;\
4061510924875715085 + 7972275516481839642*2^64 + 14711287444130492984*2^128 + 7283181222*2^192,5857662506384866970 + 16812663015900652471*2^64 + 4253992292234706943*2^128 + 6257972659*2^192,13018087453440237968 + 1556802761487957794*2^64 + 13305811328685624163*2^128 + 5275172841*2^192,17765493082948320098 + 17702423603324557161*2^64 + 16387931103996139606*2^128 + 1209391076*2^192,6871118039069659632 + 4348291718585271835*2^64 + 16768190259688020903*2^128 + 5521467123*2^192,8296067102312729166 + 12011990443603030512*2^64 + 14763690738313763899*2^128 + 5457268160*2^192,16225960882409713832 + 17694390193121177928*2^64 + 10506002478825557196*2^128 + 3546223348*2^192;\
18107061045300728237 + 2235050441165846959*2^64 + 922417003575777396*2^128 + 7405079886*2^192,13715081403165387610 + 17791746965387617595*2^64 + 14193269151146948597*2^128 + 5554460765*2^192,13437453743855043216 + 8366863915542831047*2^64 + 6271827383404379061*2^128 + 1606242817*2^192,7947153193283040930 + 16279801757369843820*2^64 + 17545033052604441088*2^128 + 4620513355*2^192,15266145752817002736 + 4696336205920402835*2^64 + 14599021787693086448*2^128 + 1913231060*2^192,15952756881937501038 + 424829042960043203*2^64 + 7739261803865605659*2^128 + 938905481*2^192,6421287747288031688 + 3102780513262711389*2^64 + 12383164474258919435*2^128 + 2270978593*2^192]
/* 
This matrix times 2^(-3) should be the matrix of frobenius.
*/ 
B = 2^(-3) * A; 
/* Freed 2517 lists. */
