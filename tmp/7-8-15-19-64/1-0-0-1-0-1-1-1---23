/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   x^1 * w^3               = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
The final length of G is 100
[2, 2, 1, 0, 0]  	45	3 
[2, 2, 0, 1, 0]  	49	2 
[8, 0, 0, 0, 0]  	56	3  <--- 1
[1, 0, 0, 3, 0]  	64	2 
[0, 8, 0, 0, 0]  	64	2  <--- 2
[7, 0, 0, 2, 0]  	87	3 
[6, 0, 2, 1, 0]  	91	2 
[7, 0, 3, 0, 0]  	94	3 
[4, 0, 4, 1, 0]  	107	2 
[5, 0, 5, 0, 0]  	110	2 
[1, 4, 5, 0, 0]  	114	3 
[4, 0, 6, 0, 0]  	118	3 
[3, 0, 4, 2, 0]  	119	3 
[1, 2, 4, 2, 0]  	121	3 
[0, 4, 6, 0, 0]  	122	3 
[2, 0, 6, 1, 0]  	123	2 
[1, 6, 2, 2, 0]  	123	2 
[0, 6, 5, 0, 0]  	123	2 
[0, 2, 6, 1, 0]  	125	3 
[3, 0, 7, 0, 0]  	126	2 
[0, 4, 5, 1, 0]  	126	2 
[1, 2, 7, 0, 0]  	128	3 
[0, 4, 4, 2, 0]  	130	2 
[0, 7, 0, 4, 0]  	132	3 
[0, 2, 4, 3, 0]  	133	1 
[0, 1, 2, 5, 0]  	133	1 
[0, 0, 0, 7, 0]  	133	1  <--- 4
[0, 2, 3, 4, 0]  	137	2 
[0, 4, 2, 4, 0]  	138	1 
[0, 3, 0, 6, 0]  	138	1 
[0, 6, 1, 4, 0]  	139	2 
[0, 1, 5, 3, 0]  	140	1 
[0, 0, 3, 5, 0]  	140	1 
[1, 0, 9, 0, 0]  	142	3 
[0, 6, 0, 5, 0]  	143	3 
[0, 2, 1, 6, 0]  	145	1 
[1, 0, 8, 1, 0]  	146	1 
[0, 1, 8, 1, 0]  	147	1 
[0, 0, 6, 3, 0]  	147	1 
[0, 5, 1, 5, 0]  	150	2 
[0, 2, 9, 0, 0]  	151	3 
[0, 0, 9, 1, 0]  	154	1 
[0, 1, 10, 0, 0]  	158	2 
[0, 0, 11, 0, 0]  	165	1  <--- 3
[1, 2, 3, 1, 1]  	87	2 
[2, 0, 4, 1, 1]  	93	3 
[2, 0, 3, 2, 1]  	97	2 
[4, 0, 5, 0, 1]  	103	2 
[1, 7, 2, 1, 1]  	112	4 
[1, 7, 1, 2, 1]  	116	3 
[2, 0, 7, 0, 1]  	119	4 
[0, 2, 7, 0, 1]  	121	3 
[0, 7, 2, 2, 1]  	124	3 
[0, 3, 3, 3, 1]  	126	2 
[0, 6, 3, 2, 1]  	131	2 
[0, 7, 4, 1, 1]  	135	3 
[0, 6, 2, 3, 1]  	135	3 
[1, 6, 3, 0, 2]  	100	4 
[5, 0, 2, 2, 2]  	103	3 
[1, 4, 2, 2, 2]  	107	3 
[1, 1, 4, 2, 2]  	113	2 
[0, 2, 4, 2, 2]  	114	2 
[1, 0, 6, 1, 2]  	116	2 
[0, 3, 5, 1, 2]  	118	3 
[0, 5, 4, 1, 2]  	119	3 
[7, 1, 0, 0, 3]  	57	3 
[6, 0, 0, 2, 3]  	80	4 
[5, 0, 2, 1, 3]  	84	3 
[6, 1, 3, 0, 3]  	95	3 
[3, 0, 6, 0, 3]  	111	3 
[1, 1, 7, 0, 3]  	120	4 
[1, 0, 8, 0, 3]  	127	3 
[0, 1, 4, 3, 4]  	125	2 
[0, 3, 2, 4, 4]  	130	2 
[0, 1, 7, 1, 4]  	132	2 
[4, 0, 2, 2, 5]  	96	4 
[0, 0, 2, 5, 251]  	125	1 
[0, 2, 0, 6, 251]  	130	1 
[0, 4, 5, 0, 252]  	107	3 
[0, 0, 5, 3, 252]  	132	1 
[0, 2, 0, 5, 253]  	111	1 
[0, 4, 1, 4, 253]  	123	1 
[0, 6, 0, 4, 253]  	124	1 
[0, 0, 8, 1, 253]  	139	1 
[0, 1, 9, 0, 253]  	143	2 
[0, 0, 10, 0, 253]  	150	1 
[1, 2, 1, 1, 254]  	57	2 
[0, 0, 0, 5, 254]  	95	1 
[3, 0, 5, 0, 254]  	96	3 
[0, 4, 1, 3, 254]  	104	1 
[0, 6, 0, 3, 254]  	105	1 
[0, 6, 2, 2, 254]  	116	1 
[0, 2, 3, 3, 254]  	118	1 
[0, 0, 9, 0, 254]  	135	1 
[0, 0, 0, 3, 255]  	57	1 
[1, 6, 0, 2, 255]  	93	2 
[0, 2, 4, 1, 255]  	95	2 
[0, 6, 2, 1, 255]  	97	1 
[1, 0, 4, 2, 255]  	105	2 
[0, 6, 4, 0, 255]  	108	2 
------
The gap is between 6 and 250.
Lengths: 2 2 3 3 2 4.
For 143 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 79 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^3*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 15 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[15532743799175041506 + 5956004676957217553*2^64 + 4287865920976785238*2^128 + 3354634099*2^192,10037813134309927800 + 5067957340108156816*2^64 + 10831667230386897399*2^128 + 2582061356*2^192,1078331788404294892 + 16405771679015948733*2^64 + 4594030623385971257*2^128 + 1285319657*2^192,1306499872939911642 + 8951322931098093733*2^64 + 16598376753454526567*2^128 + 3391559630*2^192,6429739272997994344 + 11762621051471524393*2^64 + 5413326266882560083*2^128 + 315480448*2^192,7901009573086064976 + 16391971348177799738*2^64 + 17971093480660315915*2^128 + 1249131484*2^192,5046677194198133084 + 11846877325590503084*2^64 + 11534961040479864770*2^128 + 812582374*2^192;\
17767710661358835968 + 14713299771365605457*2^64 + 16807696569316625352*2^128 + 614824886*2^192,15033013499991708292 + 10169612194267160771*2^64 + 18049061773236235015*2^128 + 319042091*2^192,7431177298269544688 + 12719283624449307803*2^64 + 14336131050407285374*2^128 + 3353527574*2^192,16542202632683563976 + 9448002625380163612*2^64 + 10591106305065530050*2^128 + 2329284781*2^192,710613712066088944 + 1620959136175145964*2^64 + 3598116222557585992*2^128 + 1863704429*2^192,15975931659510744336 + 15214323841918369622*2^64 + 7669293966518142146*2^128 + 333502519*2^192,18438571065382557696 + 17825995939164028726*2^64 + 13297041479568341395*2^128 + 1219027165*2^192;\
0 + 0*2^64 + 0*2^128 + 2080374784*2^192,0 + 0*2^64 + 0*2^128 + 1744830464*2^192,10250701138584141832 + 5237561937588078428*2^64 + 15069447012531778926*2^128 + 1824339166*2^192,0 + 0*2^64 + 0*2^128 + 1946157056*2^192,0 + 0*2^64 + 0*2^128 + 1476395008*2^192,0 + 0*2^64 + 0*2^128 + 1342177280*2^192,0 + 0*2^64 + 0*2^128 + 1811939328*2^192;\
1060554264162355764 + 17226215669219785140*2^64 + 16601740786667514389*2^128 + 2609865971*2^192,8467703084144265136 + 3951431690695823568*2^64 + 3117963280850362459*2^128 + 653430107*2^192,439536436983996920 + 1026696936414217098*2^64 + 4094598418730253125*2^128 + 2860513828*2^192,11749090047490959148 + 2594425714825606992*2^64 + 9247109438721888277*2^128 + 2936047511*2^192,6474799734564367952 + 11985162159481287453*2^64 + 9957353976457272679*2^128 + 941708184*2^192,9700133938057701744 + 2994202070737236857*2^64 + 8062027378603545223*2^128 + 3760019336*2^192,17272237572957628344 + 964960508712128587*2^64 + 2032365486535951164*2^128 + 668877163*2^192;\
18070608457662002976 + 14760622345177986494*2^64 + 17191887815326086742*2^128 + 214440546*2^192,18343810300535900832 + 10390945031377731698*2^64 + 10389974724114105536*2^128 + 487932969*2^192,188188320540843296 + 10343040185661087248*2^64 + 8288471564321937350*2^128 + 3233640439*2^192,16062517898035928304 + 9394612853351537001*2^64 + 3931168101764931422*2^128 + 4104175455*2^192,1643952416669659448 + 7575890936760875583*2^64 + 13840200519492746289*2^128 + 3122629951*2^192,9628457471835194296 + 1670685802010772477*2^64 + 4204350568846649227*2^128 + 4248850605*2^192,16145577833650125536 + 17093267960664132784*2^64 + 2388955117648835693*2^128 + 3712037016*2^192;\
420154119535218200 + 12095072249126166464*2^64 + 17702707006930358192*2^128 + 1303802506*2^192,10058100106182342560 + 5582012803636100792*2^64 + 4159268100130870051*2^128 + 1708091590*2^192,10513171437405231888 + 17802226386293447715*2^64 + 10466684692989037849*2^128 + 1444493055*2^192,8284091316184114744 + 10476220080267322204*2^64 + 13138700584294326953*2^128 + 1118180777*2^192,4233491363712848864 + 6850568316628085759*2^64 + 8928660467286565127*2^128 + 380909665*2^192,1927640218395208720 + 11610619011547537494*2^64 + 12734431575431133322*2^128 + 1178211685*2^192,6286146451881273296 + 1007930891365140632*2^64 + 10043622050259700203*2^128 + 911769845*2^192;\
12218759384598842103 + 12137662180676276507*2^64 + 7258993365050012544*2^128 + 684636223*2^192,18256525290779254740 + 6934918057679960602*2^64 + 1727442082842506462*2^128 + 906008634*2^192,13885621341945580266 + 15393696110851276398*2^64 + 8031957051467235457*2^128 + 2656748084*2^192,957710694325743331 + 2259530654187167724*2^64 + 18208894424983589114*2^128 + 2651427922*2^192,5448234891260949732 + 11901570253038311991*2^64 + 1751060751070975935*2^128 + 489572278*2^192,12889687512406142232 + 14109958951270246175*2^64 + 9381212438286904660*2^128 + 1820233778*2^192,558132855845476130 + 10196616695277965611*2^64 + 10443776103328008235*2^128 + 2671720519*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 2582 lists. */
