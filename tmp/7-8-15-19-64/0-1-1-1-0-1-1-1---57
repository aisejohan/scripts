/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   x^1 * w^3               = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 139
[3, 3, 0, 0, 0]  	45	4 
[7, 0, 0, 0, 0]  	49	3  <--- 1
[3, 2, 0, 1, 0]  	56	3 
[6, 0, 1, 0, 0]  	57	4 
[2, 2, 1, 1, 0]  	64	3 
[1, 0, 0, 3, 0]  	64	2 
[5, 0, 0, 2, 0]  	73	6 
[1, 9, 0, 0, 0]  	79	4 
[5, 2, 2, 0, 0]  	81	6 
[4, 2, 3, 0, 0]  	89	8 
[4, 1, 1, 2, 0]  	89	8 
[4, 0, 3, 1, 0]  	92	8 
[3, 1, 3, 1, 0]  	93	5 
[2, 8, 1, 0, 0]  	93	5 
[5, 0, 4, 0, 0]  	95	5 
[3, 2, 4, 0, 0]  	97	7 
[3, 1, 2, 2, 0]  	97	7 
[2, 8, 0, 1, 0]  	97	7 
[3, 0, 4, 1, 0]  	100	7 
[2, 6, 0, 2, 0]  	100	6 
[2, 1, 4, 1, 0]  	101	4 
[1, 8, 2, 0, 0]  	101	4 
[1, 2, 4, 1, 0]  	102	4 
[0, 9, 2, 0, 0]  	102	4 
[1, 4, 3, 1, 0]  	103	5 
[2, 2, 5, 0, 0]  	105	6 
[2, 1, 3, 2, 0]  	105	6 
[1, 8, 1, 1, 0]  	105	6 
[2, 4, 4, 0, 0]  	106	7 
[1, 4, 2, 2, 0]  	107	5 
[2, 0, 5, 1, 0]  	108	6 
[1, 8, 0, 2, 0]  	109	4 
[3, 0, 6, 0, 0]  	111	4 
[2, 1, 6, 0, 0]  	112	5 
[2, 0, 4, 2, 0]  	112	5 
[1, 7, 2, 1, 0]  	112	5 
[1, 4, 5, 0, 0]  	114	5 
[1, 3, 3, 2, 0]  	114	4 
[0, 10, 1, 1, 0]  	114	4 
[1, 6, 4, 0, 0]  	115	4 
[0, 12, 0, 1, 0]  	115	4 
[1, 0, 6, 1, 0]  	116	4 
[0, 8, 1, 2, 0]  	117	3 
[0, 10, 0, 2, 0]  	118	3 
[0, 3, 5, 1, 0]  	118	3 
[2, 0, 7, 0, 0]  	119	5 
[1, 1, 7, 0, 0]  	120	5 
[1, 0, 5, 2, 0]  	120	4 
[0, 8, 0, 3, 0]  	121	4 
[0, 8, 4, 0, 0]  	124	3 
[0, 7, 2, 2, 0]  	124	3 
[0, 2, 6, 1, 0]  	125	2 
[0, 3, 3, 3, 0]  	126	2 
[1, 0, 8, 0, 0]  	127	5 
[0, 16, 0, 0, 0]  	128	4  <--- 2
[0, 8, 3, 1, 0]  	128	4 
[0, 3, 7, 0, 0]  	129	3 
[0, 2, 5, 2, 0]  	129	3 
[0, 4, 4, 2, 0]  	130	2 
[0, 3, 2, 4, 0]  	130	2 
[0, 7, 5, 0, 0]  	131	2 
[0, 6, 3, 2, 0]  	131	2 
[0, 7, 0, 4, 0]  	132	2 
[0, 2, 4, 3, 0]  	133	1 
[0, 1, 2, 5, 0]  	133	1 
[0, 0, 0, 7, 0]  	133	1  <--- 4
[0, 15, 1, 0, 0]  	135	5 
[0, 2, 8, 0, 0]  	136	3 
[0, 2, 3, 4, 0]  	137	2 
[0, 6, 6, 0, 0]  	138	1 
[0, 3, 0, 6, 0]  	138	1 
[0, 1, 5, 3, 0]  	140	1 
[0, 0, 3, 5, 0]  	140	1 
[0, 6, 0, 5, 0]  	143	3 
[0, 2, 1, 6, 0]  	145	1 
[0, 1, 8, 1, 0]  	147	1 
[0, 0, 6, 3, 0]  	147	1 
[0, 5, 1, 5, 0]  	150	2 
[0, 0, 9, 1, 0]  	154	1 
[0, 0, 11, 0, 0]  	165	1  <--- 3
[2, 1, 2, 1, 1]  	71	4 
[1, 1, 4, 1, 1]  	94	4 
[4, 1, 4, 0, 1]  	96	7 
[3, 1, 5, 0, 1]  	104	6 
[3, 0, 3, 2, 1]  	104	6 
[1, 2, 3, 2, 1]  	106	4 
[0, 9, 0, 2, 1]  	110	3 
[1, 2, 6, 0, 1]  	113	6 
[1, 7, 1, 2, 1]  	116	4 
[0, 13, 1, 0, 1]  	119	3 
[0, 3, 4, 2, 1]  	122	3 
[0, 1, 4, 3, 1]  	125	2 
[0, 5, 6, 0, 1]  	130	2 
[0, 6, 2, 3, 1]  	135	3 
[0, 6, 1, 4, 1]  	139	2 
[0, 1, 10, 0, 1]  	158	2 
[2, 7, 2, 0, 2]  	100	6 
[2, 6, 3, 0, 2]  	107	6 
[1, 5, 4, 0, 2]  	107	5 
[0, 1, 7, 1, 2]  	132	2 
[0, 7, 4, 1, 2]  	135	4 
[2, 5, 2, 0, 3]  	84	7 
[2, 3, 4, 0, 3]  	98	6 
[1, 4, 4, 0, 3]  	99	6 
[0, 11, 1, 0, 3]  	103	4 
[1, 3, 5, 0, 3]  	106	5 
[0, 3, 6, 0, 3]  	114	4 
[0, 5, 4, 1, 3]  	119	3 
[1, 2, 3, 1, 4]  	87	4 
[2, 4, 3, 0, 4]  	91	6 
[1, 7, 3, 0, 4]  	108	5 
[0, 6, 5, 0, 5]  	123	3 
[0, 5, 3, 2, 251]  	123	2 
[0, 9, 1, 1, 252]  	106	3 
[0, 2, 2, 4, 252]  	122	2 
[2, 4, 0, 2, 253]  	84	4 
[1, 2, 2, 2, 253]  	91	2 
[0, 10, 0, 1, 253]  	99	3 
[1, 6, 1, 2, 253]  	108	3 
[0, 2, 4, 2, 253]  	114	2 
[1, 1, 3, 2, 254]  	98	3 
[2, 0, 6, 0, 254]  	104	5 
[0, 8, 2, 1, 254]  	113	3 
[0, 4, 3, 2, 254]  	115	2 
[0, 0, 5, 3, 254]  	132	1 
[1, 8, 0, 0, 255]  	71	2 
[3, 0, 3, 1, 255]  	85	4 
[0, 9, 1, 0, 255]  	87	2 
[1, 3, 4, 0, 255]  	91	4 
[0, 3, 2, 2, 255]  	92	2 
[0, 8, 2, 0, 255]  	94	2 
[4, 0, 2, 2, 255]  	96	5 
[0, 8, 1, 1, 255]  	98	2 
[1, 5, 1, 2, 255]  	100	3 
[0, 2, 5, 1, 255]  	110	1 
[0, 2, 7, 0, 255]  	121	2 
[0, 0, 2, 5, 255]  	125	1 
[0, 2, 0, 6, 255]  	130	1 
[0, 0, 8, 1, 255]  	139	1 
------
The gap is between 6 and 250.
Lengths: 2 2 3 3 2 2.
For 143 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 79 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^3*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^8*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 15 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 0.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[3575831365908476038 + 16871924763629296777*2^64 + 8243507115576068336*2^128 + 1610620196*2^192,12563593519769991058 + 14116235458624264452*2^64 + 5744420230891762313*2^128 + 281993023*2^192,15551453657462001704 + 13235975297853271453*2^64 + 119938124316260903*2^128 + 1502199246*2^192,4400588559118350728 + 14569958471469808938*2^64 + 613489828084574240*2^128 + 2058367886*2^192,16076761428314623000 + 8497259792923440289*2^64 + 16803165567385172816*2^128 + 365620889*2^192,16152621844758454320 + 1385646951506825101*2^64 + 17483943051858540559*2^128 + 425341368*2^192,4128438536954372880 + 18165415582890673593*2^64 + 11598047175346018407*2^128 + 872274339*2^192;\
16993524277014474174 + 17327556638507462233*2^64 + 5377724043898703432*2^128 + 697400113*2^192,4451618747835952520 + 17330244185202895756*2^64 + 5546225477391153195*2^128 + 877132308*2^192,6670315755147851592 + 9357440215411486996*2^64 + 15066635112710608303*2^128 + 2094918278*2^192,8221756777346253632 + 5770461367838481093*2^64 + 7157272256559207687*2^128 + 735174100*2^192,12279070732634807216 + 14367443586977783082*2^64 + 2508131219568379790*2^128 + 1320012022*2^192,7214563759088087328 + 15487013706242304420*2^64 + 14772362442426694452*2^128 + 1438020822*2^192,15368711983617765136 + 17108099832772482440*2^64 + 7566676177618061302*2^128 + 2131959596*2^192;\
5289160977103332109 + 9728186850204379368*2^64 + 3022855337230741656*2^128 + 1118444256*2^192,6572254668554917865 + 9264362716586627837*2^64 + 15273188787728167109*2^128 + 1854596757*2^192,9378432024742242740 + 5574874597039723891*2^64 + 9809106023468201185*2^128 + 2092743132*2^192,7700388621572061456 + 5593146160781083693*2^64 + 1390607954351575729*2^128 + 600692215*2^192,16585896706673643472 + 3942040751520317916*2^64 + 416563455830426060*2^128 + 1303298800*2^192,141255781442752832 + 8539475272925423318*2^64 + 3768618160193876014*2^128 + 1382704489*2^192,12349121317018252496 + 8079125682292571355*2^64 + 156174016627987715*2^128 + 769284259*2^192;\
17843890093106149925 + 16026392084768562836*2^64 + 13715470073558926429*2^128 + 113880638*2^192,9266737609938010474 + 7035109603046634262*2^64 + 18351891897362557964*2^128 + 462342194*2^192,14024683304688204272 + 642085950809996863*2^64 + 2882032752791382668*2^128 + 1774312967*2^192,1640481377156845924 + 571011929541411088*2^64 + 2972001335581538957*2^128 + 2069799958*2^192,5403646751258855376 + 1372078426525372296*2^64 + 15334490921910210288*2^128 + 1438193919*2^192,9199886887399740368 + 6538619435459730413*2^64 + 13150160406630759275*2^128 + 963599077*2^192,15811637443293145000 + 12005664660185125879*2^64 + 1028746929679007844*2^128 + 420064620*2^192;\
7550343975111715891 + 2272974664611862677*2^64 + 11185721126845861094*2^128 + 761026038*2^192,10578954497443412963 + 1157012710210495146*2^64 + 14573870531231893571*2^128 + 434914824*2^192,2327779957978414916 + 5976882035031416121*2^64 + 1258857792073211631*2^128 + 39403439*2^192,14665199170181399780 + 947675612096898935*2^64 + 13200963980154909652*2^128 + 1671357313*2^192,18365477833084591328 + 8626103648206017918*2^64 + 13345733533650771208*2^128 + 778602822*2^192,15727110166782830824 + 3548560977531869788*2^64 + 16408192064379420572*2^128 + 1970448492*2^192,5398172943253886112 + 1245601699903190955*2^64 + 17208209392244441766*2^128 + 946911959*2^192;\
16560861515268316221 + 2572560243792737240*2^64 + 5394489619679020651*2^128 + 482793285*2^192,11187832784459331491 + 15400679853883673227*2^64 + 17710561531922104755*2^128 + 783193504*2^192,5907791824871874284 + 14292782315229485258*2^64 + 16377801114013292225*2^128 + 1441344195*2^192,14376700233872826968 + 7211578524507553494*2^64 + 4191633147926294894*2^128 + 853202186*2^192,17644680509441154624 + 946129369886629963*2^64 + 3432719112087534639*2^128 + 900918093*2^192,128947501414308240 + 3410877340313399377*2^64 + 864215487510671137*2^128 + 1284607102*2^192,2473871110238950664 + 4139073310886891052*2^64 + 11491443640273764491*2^128 + 80758427*2^192;\
2508639681366026525 + 974219853202692395*2^64 + 4116369299835634272*2^128 + 442894571*2^192,12374802143584049669 + 7347641477311441554*2^64 + 12798691439525866495*2^128 + 51209911*2^192,7104197373473450180 + 132509624101242070*2^64 + 15359536452965943300*2^128 + 760671847*2^192,12673666319122644784 + 2650069873507441522*2^64 + 13921653508569265639*2^128 + 2018225210*2^192,16889004673249328464 + 1957572532982133065*2^64 + 8367855317280544053*2^128 + 971413716*2^192,2942045137430266264 + 14425934099782298427*2^64 + 14709731999993460408*2^128 + 828053557*2^192,5969245038739255400 + 768288818483741566*2^64 + 12932872944498184073*2^128 + 1994244236*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 2809 lists. */
