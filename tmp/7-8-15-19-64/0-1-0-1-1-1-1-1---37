/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   x^1 * w^3               = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
The final length of G is 131
[2, 2, 1, 0, 0]  	45	4 
[7, 0, 0, 0, 0]  	49	4  <--- 1
[6, 0, 1, 0, 0]  	57	4 
[1, 1, 2, 1, 0]  	64	3 
[1, 0, 0, 3, 0]  	64	2 
[5, 1, 2, 0, 0]  	73	6 
[6, 0, 0, 2, 0]  	80	5 
[5, 1, 0, 2, 0]  	81	6 
[5, 0, 2, 1, 0]  	84	5 
[4, 8, 0, 0, 0]  	92	6 
[4, 0, 3, 1, 0]  	92	6 
[2, 0, 4, 1, 0]  	93	4 
[5, 0, 4, 0, 0]  	95	5 
[4, 0, 2, 2, 0]  	96	6 
[2, 6, 0, 2, 0]  	100	6 
[1, 8, 2, 0, 0]  	101	4 
[1, 10, 1, 0, 0]  	102	3 
[0, 9, 2, 0, 0]  	102	3 
[3, 8, 0, 1, 0]  	104	5 
[1, 7, 3, 0, 0]  	108	5 
[4, 1, 5, 0, 0]  	111	5 
[3, 0, 6, 0, 0]  	111	5 
[0, 2, 4, 2, 0]  	114	3 
[1, 7, 1, 2, 0]  	116	4 
[1, 0, 6, 1, 0]  	116	4 
[0, 3, 5, 1, 0]  	118	3 
[2, 0, 7, 0, 0]  	119	4 
[1, 14, 0, 0, 0]  	119	4 
[0, 13, 1, 0, 0]  	119	4 
[1, 0, 5, 2, 0]  	120	4 
[0, 15, 0, 0, 0]  	120	4  <--- 2
[1, 12, 0, 1, 0]  	122	5 
[0, 11, 1, 1, 0]  	122	4 
[0, 13, 0, 1, 0]  	123	4 
[0, 8, 4, 0, 0]  	124	3 
[0, 2, 6, 1, 0]  	125	2 
[0, 1, 4, 3, 0]  	125	2 
[0, 11, 0, 2, 0]  	126	2 
[0, 3, 3, 3, 0]  	126	2 
[1, 0, 8, 0, 0]  	127	4 
[0, 8, 3, 1, 0]  	128	3 
[0, 5, 6, 0, 0]  	130	2 
[0, 3, 2, 4, 0]  	130	2 
[0, 7, 5, 0, 0]  	131	2 
[0, 6, 3, 2, 0]  	131	2 
[0, 8, 2, 2, 0]  	132	2 
[0, 1, 7, 1, 0]  	132	2 
[0, 10, 1, 2, 0]  	133	1 
[0, 1, 2, 5, 0]  	133	1 
[0, 0, 0, 7, 0]  	133	1  <--- 4
[0, 7, 4, 1, 0]  	135	4 
[0, 8, 1, 3, 0]  	136	3 
[0, 10, 0, 3, 0]  	137	3 
[0, 2, 3, 4, 0]  	137	2 
[0, 3, 0, 6, 0]  	138	1 
[0, 8, 0, 4, 0]  	140	1 
[0, 0, 3, 5, 0]  	140	1 
[0, 7, 2, 3, 0]  	143	4 
[1, 4, 7, 0, 0]  	144	3 
[0, 2, 1, 6, 0]  	145	1 
[0, 7, 1, 4, 0]  	147	1 
[0, 0, 6, 3, 0]  	147	1 
[0, 5, 1, 5, 0]  	150	2 
[0, 4, 8, 0, 0]  	152	1 
[0, 0, 9, 1, 0]  	154	1 
[0, 3, 9, 0, 0]  	159	1 
[0, 0, 11, 0, 0]  	165	1  <--- 3
[0, 2, 10, 0, 0]  	166	1 
[2, 1, 1, 1, 1]  	56	3 
[1, 9, 0, 0, 1]  	79	3 
[0, 11, 0, 1, 1]  	107	4 
[2, 1, 6, 0, 1]  	112	5 
[0, 10, 1, 1, 1]  	114	3 
[0, 10, 0, 2, 1]  	118	3 
[1, 5, 5, 0, 1]  	122	4 
[0, 6, 5, 0, 1]  	123	3 
[1, 4, 6, 0, 1]  	129	5 
[0, 9, 0, 3, 1]  	129	4 
[0, 7, 0, 5, 1]  	151	3 
[1, 8, 0, 0, 2]  	71	3 
[3, 1, 5, 0, 2]  	104	5 
[0, 9, 1, 1, 2]  	106	3 
[0, 4, 7, 0, 2]  	137	2 
[0, 2, 9, 0, 2]  	151	2 
[5, 7, 0, 0, 3]  	91	4 
[0, 7, 0, 2, 3]  	94	2 
[4, 7, 0, 1, 3]  	103	5 
[4, 5, 0, 2, 3]  	106	6 
[1, 4, 5, 0, 3]  	114	4 
[1, 6, 4, 0, 3]  	115	5 
[0, 5, 4, 1, 3]  	119	3 
[1, 3, 6, 0, 3]  	121	4 
[0, 6, 2, 3, 3]  	135	3 
[0, 6, 1, 4, 3]  	139	2 
[0, 1, 10, 0, 3]  	158	2 
[0, 3, 7, 0, 4]  	129	3 
[0, 6, 0, 5, 4]  	143	3 
[0, 9, 1, 0, 5]  	87	3 
[0, 2, 8, 0, 5]  	136	3 
[3, 5, 0, 2, 6]  	99	5 
[0, 4, 6, 0, 7]  	122	3 
[0, 2, 2, 4, 249]  	122	2 
[0, 10, 0, 1, 251]  	99	3 
[0, 2, 5, 1, 251]  	110	3 
[0, 1, 6, 1, 251]  	117	1 
[1, 0, 5, 1, 252]  	101	2 
[0, 1, 5, 1, 252]  	102	2 
[0, 1, 4, 2, 252]  	106	2 
[0, 1, 2, 4, 252]  	114	2 
[0, 0, 2, 5, 252]  	125	1 
[1, 0, 4, 1, 253]  	86	1 
[0, 1, 4, 1, 253]  	87	1 
[0, 0, 5, 1, 253]  	94	1 
[0, 0, 4, 2, 253]  	98	1 
[4, 0, 5, 0, 253]  	103	4 
[0, 8, 3, 0, 253]  	109	1 
[0, 5, 5, 0, 253]  	115	3 
[0, 0, 3, 4, 253]  	121	1 
[1, 0, 3, 1, 254]  	71	1 
[0, 9, 0, 1, 254]  	91	3 
[0, 8, 2, 0, 254]  	94	1 
[0, 0, 2, 4, 254]  	106	1 
[0, 1, 3, 3, 254]  	110	2 
[0, 0, 1, 6, 254]  	129	1 
[1, 0, 2, 1, 255]  	56	1 
[0, 8, 1, 0, 255]  	79	2 
[0, 1, 3, 2, 255]  	91	2 
[1, 7, 2, 0, 255]  	93	3 
[0, 14, 0, 0, 255]  	112	2 
[0, 0, 0, 6, 255]  	114	1 
[0, 1, 9, 0, 255]  	143	2 
------
The gap is between 8 and 248.
Lengths: 2 2 3 4 2 3.
For 143 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 79 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^8*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 15 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[18131897102294249360 + 1588885663023862362*2^64 + 156303251714524051*2^128 + 441660625*2^192,1832916867930731392 + 9701574680586106039*2^64 + 7357171718387866932*2^128 + 12801014748*2^192,15364707955797620096 + 17730254740637215422*2^64 + 17571870847322062876*2^128 + 10901442879*2^192,14658255471100834176 + 1863597319997043360*2^64 + 2450242566593043791*2^128 + 12000710093*2^192,8868120106174614016 + 18351941925718690511*2^64 + 16616493790161958203*2^128 + 14052251591*2^192,15470591867954899072 + 12401487474178657583*2^64 + 16432411375700500806*2^128 + 7071373687*2^192,3778284932581820160 + 5900982416440655166*2^64 + 15854590789616248691*2^128 + 18225517432*2^192;\
10162374184237299606 + 9918881169039684435*2^64 + 18004086388056424330*2^128 + 12805276846*2^192,439066207403019728 + 11021031102196620402*2^64 + 15959460029369297021*2^128 + 19174939116*2^192,14127708180105947760 + 8796327221181925701*2^64 + 13473770785174846003*2^128 + 4107454540*2^192,15989452700746644848 + 14028678014840558670*2^64 + 9379596486172544102*2^128 + 1938166387*2^192,5435850660510873664 + 5998360489925750132*2^64 + 14119909750312523275*2^128 + 17586641499*2^192,151724028806691024 + 5176808405511378558*2^64 + 16448203079100603437*2^128 + 5484853701*2^192,18256304661192631648 + 17248392995091213798*2^64 + 9915943988530708419*2^128 + 31536248346*2^192;\
11961884441171962136 + 7795208522464067645*2^64 + 7199329525480250545*2^128 + 1302145064*2^192,338120278232022336 + 17579437020224295608*2^64 + 14030184324205540704*2^128 + 13441412701*2^192,1686385203419900032 + 1923762110121214913*2^64 + 7584763134424200746*2^128 + 7182995390*2^192,8139087485063285568 + 17043131123163668748*2^64 + 13463522140216539984*2^128 + 16417977494*2^192,5897610532973309696 + 16189667606277196177*2^64 + 7894433186527945974*2^128 + 17137092398*2^192,12685064210131247040 + 41638733534471149*2^64 + 7516578721466141818*2^128 + 14811351957*2^192,16983640037477096576 + 7669351857577157810*2^64 + 3113298193529667029*2^128 + 4492528872*2^192;\
4483323175755890308 + 14722351289596768179*2^64 + 9259433842330418364*2^128 + 15073578866*2^192,5566904244311565792 + 14390799262928850495*2^64 + 832243748193950285*2^128 + 921205435*2^192,8531378094342790144 + 2900481909384743584*2^64 + 1438623007155048283*2^128 + 9023195091*2^192,14502420055475109408 + 14758459827882259854*2^64 + 13246332019437394959*2^128 + 388409506*2^192,17949899288137286016 + 2327020442073750359*2^64 + 3841400415653146144*2^128 + 28474578003*2^192,1038951551949994528 + 10244089953913371664*2^64 + 4672102431981921084*2^128 + 26632960781*2^192,4271556786945750976 + 5711875434955585695*2^64 + 115961117227404826*2^128 + 30750704238*2^192;\
7834961808245868151 + 13013707163529252038*2^64 + 8727311848077460038*2^128 + 19035389250*2^192,34870545874718056 + 12023630232379925891*2^64 + 797698537061951852*2^128 + 17161770357*2^192,6998787908683807224 + 9769878512271142980*2^64 + 18177831728622059656*2^128 + 1831308185*2^192,7622256713485469912 + 1295380330762068458*2^64 + 16572216237317067439*2^128 + 1754873846*2^192,8348638956495970528 + 2522575972920926375*2^64 + 9054839734289833047*2^128 + 14544865131*2^192,7491616958611058248 + 15376817477024412305*2^64 + 6787033029531082600*2^128 + 9457463336*2^192,2522509244261953264 + 10585902404420149688*2^64 + 5580991182420246480*2^128 + 15818012735*2^192;\
2605093582810349408 + 15129220944822158804*2^64 + 17060171675067648701*2^128 + 3359308901*2^192,6909695097320769280 + 12585591970235931725*2^64 + 357862495304381531*2^128 + 2392294153*2^192,10532807020199027328 + 14609888475490503957*2^64 + 10566986999529723104*2^128 + 12620906610*2^192,893489838167250432 + 13729547373178609081*2^64 + 10669190220042084998*2^128 + 12077574094*2^192,11050317628731403264 + 9279475304204952177*2^64 + 7443723218010693805*2^128 + 5232456425*2^192,5294044441875055232 + 10348082839646659054*2^64 + 13805017342721271131*2^128 + 10827864890*2^192,9590913499960390656 + 2300690763671526865*2^64 + 12038597292842343497*2^128 + 16320693965*2^192;\
2219790650439677410 + 1134489347086591770*2^64 + 8652341175710642713*2^128 + 3704717559*2^192,4912862594775057968 + 11744866111916381047*2^64 + 16927989094860670202*2^128 + 19337552885*2^192,9866651744155224080 + 1014195960919119741*2^64 + 7246343966129801023*2^128 + 25552487470*2^192,9235671140078462416 + 7088706442246039327*2^64 + 17942089777002413799*2^128 + 21973626473*2^192,16385777735758785600 + 2839571501437815187*2^64 + 8371072823722916524*2^128 + 11533296104*2^192,17105420449132521584 + 16394481859827240427*2^64 + 8013505169906541731*2^128 + 17247074133*2^192,9898363464701622432 + 4673210184123561203*2^64 + 12499673540985519579*2^128 + 8871984956*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 2490 lists. */
