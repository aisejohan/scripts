/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^14                     = Coefficient of   x^6 * y^2 * z^1         = Coefficient of   x^5 * y^2 * w^1         = Coefficient of   x^3 * y^1 * z^3         = Coefficient of   x^2 * y^1 * z^2 * w^1   = Coefficient of   x^1 * y^5               = Coefficient of   x^1 * y^1 * z^1 * w^2   = Coefficient of   y^1 * w^3               = Coefficient of   z^5                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^14 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*y^2*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^5


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 186
[6, 2, 0, 0, 0]  	56	3 
[14, 0, 0, 0, 0]  	70	4  <--- 1
[1, 5, 0, 0, 0]  	70	4 
[5, 1, 0, 2, 0]  	76	4 
[4, 1, 0, 3, 0]  	90	4 
[8, 0, 1, 2, 0]  	92	7 
[8, 0, 4, 0, 0]  	96	7 
[0, 5, 0, 2, 0]  	103	3 
[3, 1, 0, 4, 0]  	104	4 
[3, 4, 3, 0, 0]  	109	7 
[5, 4, 1, 1, 0]  	110	7 
[4, 4, 0, 2, 0]  	110	6 
[4, 0, 4, 2, 0]  	114	6 
[6, 0, 2, 3, 0]  	115	6 
[5, 0, 1, 4, 0]  	115	6 
[2, 1, 0, 5, 0]  	118	4 
[4, 4, 2, 1, 0]  	119	7 
[3, 4, 1, 2, 0]  	119	7 
[2, 4, 0, 3, 0]  	119	6 
[13, 0, 0, 3, 0]  	122	3 
[2, 1, 3, 3, 0]  	122	6 
[2, 4, 3, 1, 0]  	123	5 
[1, 4, 2, 2, 0]  	123	5 
[5, 0, 3, 3, 0]  	124	8 
[4, 0, 2, 4, 0]  	124	7 
[3, 0, 1, 5, 0]  	124	7 
[4, 3, 2, 2, 0]  	125	6 
[3, 3, 1, 3, 0]  	125	6 
[3, 0, 8, 0, 0]  	127	5 
[2, 1, 2, 4, 0]  	127	4 
[1, 1, 1, 5, 0]  	127	4 
[3, 0, 4, 3, 0]  	128	3 
[2, 0, 3, 4, 0]  	128	3 
[1, 4, 1, 3, 0]  	128	3 
[1, 0, 2, 5, 0]  	128	3 
[0, 4, 0, 4, 0]  	128	3 
[4, 3, 5, 0, 0]  	129	6 
[3, 3, 4, 1, 0]  	129	6 
[1, 2, 3, 3, 0]  	130	5 
[2, 4, 5, 0, 0]  	132	6 
[1, 1, 0, 6, 0]  	132	3 
[2, 3, 6, 0, 0]  	133	4 
[1, 0, 1, 6, 0]  	133	3 
[3, 3, 3, 2, 0]  	134	5 
[2, 3, 2, 3, 0]  	134	5 
[12, 0, 0, 4, 0]  	136	5 
[2, 0, 9, 0, 0]  	136	5 
[1, 1, 3, 4, 0]  	136	4 
[2, 0, 5, 3, 0]  	137	4 
[1, 0, 4, 4, 0]  	137	4 
[0, 4, 2, 3, 0]  	137	3 
[2, 3, 5, 1, 0]  	138	4 
[1, 3, 4, 2, 0]  	138	4 
[5, 0, 0, 6, 0]  	139	7 
[2, 3, 1, 4, 0]  	139	3 
[1, 3, 0, 5, 0]  	139	3 
[2, 0, 8, 1, 0]  	141	3 
[1, 0, 7, 2, 0]  	141	3 
[0, 1, 1, 6, 0]  	141	2 
[1, 3, 7, 0, 0]  	142	3 
[2, 0, 0, 7, 0]  	143	2 
[1, 2, 8, 0, 0]  	143	2 
[0, 11, 0, 0, 0]  	143	2  <--- 2
[0, 3, 2, 4, 0]  	143	2 
[1, 1, 9, 0, 0]  	144	3 
[0, 2, 3, 4, 0]  	144	2 
[1, 0, 6, 3, 0]  	146	2 
[0, 1, 0, 7, 0]  	146	2 
[0, 7, 4, 0, 0]  	147	3 
[0, 6, 5, 0, 0]  	148	2 
[0, 3, 1, 5, 0]  	148	2 
[1, 1, 8, 1, 0]  	149	3 
[0, 2, 2, 5, 0]  	149	2 
[11, 0, 0, 5, 0]  	150	5 
[0, 4, 7, 0, 0]  	150	3 
[0, 8, 2, 1, 0]  	151	3 
[0, 7, 3, 1, 0]  	152	3 
[0, 3, 4, 3, 0]  	152	3 
[0, 6, 4, 1, 0]  	153	2 
[0, 3, 0, 6, 0]  	153	2 
[0, 2, 5, 3, 0]  	153	2 
[0, 3, 7, 1, 0]  	156	1 
[0, 0, 3, 6, 0]  	156	1 
[1, 0, 0, 8, 0]  	157	1 
[0, 2, 8, 1, 0]  	157	1 
[0, 10, 2, 0, 0]  	158	2 
[0, 1, 5, 4, 0]  	159	2 
[0, 3, 6, 2, 0]  	161	1 
[0, 0, 2, 7, 0]  	161	1 
[0, 2, 7, 2, 0]  	162	1 
[0, 1, 4, 5, 0]  	164	2 
[0, 2, 10, 0, 0]  	166	1 
[0, 0, 1, 8, 0]  	166	1 
[0, 1, 11, 0, 0]  	167	1 
[0, 1, 7, 3, 0]  	168	2 
[0, 0, 8, 3, 0]  	169	1 
[0, 0, 0, 9, 0]  	171	1  <--- 4
[0, 1, 10, 1, 0]  	172	1 
[1, 0, 12, 0, 0]  	173	2 
[0, 0, 7, 4, 0]  	174	1 
[0, 1, 9, 2, 0]  	177	1 
[0, 0, 6, 5, 0]  	179	1 
[0, 0, 13, 0, 0]  	182	1  <--- 3
[0, 0, 12, 1, 0]  	187	1 
[0, 0, 11, 2, 0]  	192	1 
[1, 1, 1, 1, 1]  	51	2 
[6, 1, 1, 0, 1]  	57	4 
[13, 0, 0, 0, 1]  	65	4 
[7, 0, 4, 0, 1]  	91	7 
[1, 0, 5, 1, 1]  	94	2 
[5, 0, 5, 0, 1]  	95	6 
[2, 0, 2, 3, 1]  	95	3 
[5, 4, 2, 0, 1]  	105	9 
[12, 0, 0, 3, 1]  	117	5 
[2, 0, 8, 0, 1]  	122	5 
[1, 1, 8, 0, 1]  	130	4 
[11, 0, 0, 4, 1]  	131	5 
[4, 0, 0, 6, 1]  	134	5 
[1, 0, 0, 7, 1]  	138	4 
[10, 0, 0, 5, 1]  	145	4 
[1, 0, 10, 0, 1]  	145	4 
[0, 10, 0, 1, 1]  	149	2 
[4, 0, 6, 0, 2]  	104	7 
[1, 0, 3, 4, 2]  	123	4 
[3, 0, 0, 6, 2]  	129	5 
[0, 9, 0, 1, 2]  	136	3 
[0, 8, 1, 1, 2]  	137	3 
[3, 2, 7, 0, 2]  	139	4 
[0, 5, 6, 1, 2]  	168	2 
[3, 3, 5, 0, 3]  	124	7 
[0, 4, 5, 1, 3]  	141	2 
[0, 4, 4, 2, 3]  	146	2 
[3, 2, 6, 0, 4]  	125	5 
[0, 4, 4, 1, 4]  	127	3 
[0, 7, 2, 1, 4]  	138	3 
[0, 3, 6, 1, 4]  	142	2 
[0, 3, 5, 2, 4]  	147	2 
[0, 3, 8, 0, 5]  	151	2 
[2, 2, 7, 0, 6]  	134	5 
[0, 2, 9, 0, 6]  	152	2 
[0, 0, 0, 8, 249]  	152	1 
[0, 3, 0, 5, 250]  	134	1 
[0, 0, 1, 7, 250]  	147	1 
[0, 0, 4, 5, 250]  	151	1 
[0, 1, 0, 6, 251]  	127	1 
[0, 3, 1, 4, 251]  	129	1 
[0, 3, 3, 3, 251]  	138	2 
[0, 0, 2, 6, 251]  	142	1 
[0, 0, 5, 4, 251]  	146	1 
[0, 1, 0, 5, 252]  	108	1 
[2, 3, 0, 4, 252]  	125	3 
[0, 0, 3, 5, 252]  	137	1 
[0, 0, 6, 3, 252]  	141	1 
[0, 1, 0, 4, 253]  	89	1 
[1, 4, 0, 3, 253]  	114	3 
[0, 8, 0, 1, 253]  	123	3 
[0, 4, 1, 3, 253]  	123	2 
[2, 0, 0, 6, 253]  	124	4 
[0, 3, 2, 3, 253]  	124	1 
[0, 0, 4, 4, 253]  	132	1 
[0, 6, 4, 0, 253]  	134	3 
[0, 1, 7, 2, 253]  	149	1 
[0, 0, 12, 0, 253]  	168	1 
[0, 1, 0, 3, 254]  	70	1 
[1, 4, 0, 2, 254]  	95	3 
[2, 4, 3, 0, 254]  	104	5 
[1, 0, 2, 4, 254]  	109	3 
[0, 0, 4, 3, 254]  	113	1 
[1, 0, 1, 5, 254]  	114	2 
[0, 4, 2, 2, 254]  	118	2 
[0, 3, 3, 2, 254]  	119	1 
[0, 10, 0, 0, 254]  	130	1 
[0, 6, 3, 1, 254]  	139	2 
[0, 1, 8, 1, 254]  	144	1 
[0, 1, 10, 0, 254]  	153	1 
[0, 1, 0, 2, 255]  	51	1 
[1, 4, 0, 0, 255]  	57	3 
[0, 5, 0, 0, 255]  	65	1 
[6, 0, 1, 2, 255]  	82	3 
[1, 0, 2, 3, 255]  	90	3 
[0, 0, 4, 2, 255]  	94	1 
[1, 0, 1, 4, 255]  	95	2 
[0, 3, 4, 0, 255]  	95	1 
[5, 0, 3, 2, 255]  	105	7 
[1, 0, 8, 0, 255]  	117	2 
[0, 1, 8, 0, 255]  	125	1 
------
The gap is between 7 and 248.
Lengths: 2 2 4 7 2 3.
For 159 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^9*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^10*w^1

For 89 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1*z^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^6
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^5*w^1

For 19 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^1

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8166300298146738972 + 1049899310061971217*2^64 + 1639041471222663008*2^128 + 1082565482*2^192,18150456635749063660 + 10941153102078994338*2^64 + 2597080089283782382*2^128 + 4114398352*2^192,532877480253258616 + 7091763809462230413*2^64 + 7197637843458670917*2^128 + 2758146545*2^192,17477592393947553744 + 13862245450295914162*2^64 + 6137667261050407588*2^128 + 3904434986*2^192,17996330755257068688 + 9994300349813686487*2^64 + 13211607559157838042*2^128 + 3204277605*2^192,9987532223674985752 + 3640259711647201199*2^64 + 5028741138837211855*2^128 + 1566775293*2^192,16268932490372187608 + 13515850460225704098*2^64 + 10019153306269771737*2^128 + 2058655077*2^192,4912079141315615136 + 9433125600224712584*2^64 + 14640054550809794288*2^128 + 3297504379*2^192;\
8386175405137973464 + 6942093872917079850*2^64 + 10567374785525956779*2^128 + 1387486023*2^192,6420240185422763248 + 17347069978880619767*2^64 + 11476269881991415081*2^128 + 1529397183*2^192,8315053683747988848 + 11781498615799817084*2^64 + 2231066856000842478*2^128 + 669459254*2^192,4024822685209813696 + 10106620643880063215*2^64 + 14522457877126842018*2^128 + 401576612*2^192,1351877734957225056 + 14726344330272705864*2^64 + 15521691761397048445*2^128 + 2102126373*2^192,6514038611439369280 + 2714833991183120798*2^64 + 16395993426555622634*2^128 + 3969460042*2^192,15052520367768474640 + 8619490647221234867*2^64 + 9111221970470515022*2^128 + 2060612858*2^192,17688884135585020544 + 7235989624204396272*2^64 + 10068950501309736811*2^128 + 133254328*2^192;\
4486380715077158836 + 10238901662814701634*2^64 + 293588882222352594*2^128 + 3981255458*2^192,5909898520208934222 + 4330737636412385466*2^64 + 10942621895405076875*2^128 + 2797915061*2^192,11576544781209815448 + 11864915417264550982*2^64 + 13871278434262883934*2^128 + 2198652284*2^192,13420444657822394864 + 3393606266678187992*2^64 + 1418646331764673316*2^128 + 1045705193*2^192,5359652099745235264 + 9057274537305099963*2^64 + 5727954376947682645*2^128 + 557987342*2^192,12947643667362228344 + 7803497054445205212*2^64 + 14907354670255882357*2^128 + 292129626*2^192,13256902484872074728 + 13579383667715190953*2^64 + 14384897124425946567*2^128 + 2084006477*2^192,205604723646767064 + 10456961866351551848*2^64 + 10858369982051485903*2^128 + 583378359*2^192;\
15002276439290522644 + 7955924873677559524*2^64 + 11054256916538155837*2^128 + 136592736*2^192,3658606912459495836 + 12928526805377020615*2^64 + 543895229448793848*2^128 + 895189273*2^192,7047427321299597776 + 17421051683253851835*2^64 + 2108524870984100678*2^128 + 591975376*2^192,3012286669283143048 + 1013855697203973386*2^64 + 7590522570812124463*2^128 + 3872076073*2^192,11027926754023927152 + 17226723761601644169*2^64 + 3679471606574299791*2^128 + 1085742545*2^192,15841770762951626024 + 5389017138804360316*2^64 + 15597613635364992757*2^128 + 3355933621*2^192,11931776254195224344 + 14453269007603484679*2^64 + 18159954439711664565*2^128 + 1916639203*2^192,5343453099426044112 + 9493720016420623310*2^64 + 6742886055452829995*2^128 + 119388289*2^192;\
7841460757077395901 + 6659190585427267720*2^64 + 9420647755721558495*2^128 + 841645755*2^192,10001376089113746757 + 1598754985198658734*2^64 + 13897849259062897347*2^128 + 181208923*2^192,4523088951446735692 + 11228662510098160667*2^64 + 13279810001405174377*2^128 + 1158905649*2^192,16572667166046473708 + 4459712985359822614*2^64 + 6116237946874619168*2^128 + 180710929*2^192,17010299441751753472 + 8857042780653744568*2^64 + 9998045805145696243*2^128 + 3723487810*2^192,14677828774524404042 + 9469706270894012624*2^64 + 14426871982867117676*2^128 + 2638033866*2^192,16113152862234042416 + 1053818316072964315*2^64 + 12097011025845823490*2^128 + 4239155097*2^192,17344398125063757120 + 17233681711117760343*2^64 + 11392062905562545480*2^128 + 1043723942*2^192;\
9924478799518472332 + 412295575778201336*2^64 + 1883188448022530581*2^128 + 2371725728*2^192,6135956904134801840 + 3698541662654717985*2^64 + 12233060431383876288*2^128 + 2605885428*2^192,130474998121297264 + 5838177325884537177*2^64 + 9057932145997504152*2^128 + 2681285273*2^192,13304062344979147016 + 27210125491568404*2^64 + 15818220384083259456*2^128 + 1706210279*2^192,3821344052321818256 + 9463038515117763008*2^64 + 7847167941831404398*2^128 + 1983988431*2^192,4834487588693891128 + 11520989109513794036*2^64 + 1659137981845732955*2^128 + 1652118916*2^192,4016111362578263176 + 17693240216694307716*2^64 + 9526058279676255974*2^128 + 3640250657*2^192,14981884499791734128 + 4705775239786981356*2^64 + 17351844722603921048*2^128 + 2660253731*2^192;\
9431870777127696386 + 2516357126765593434*2^64 + 15873398126858391265*2^128 + 1347456576*2^192,9285671350297722502 + 12803305388884733147*2^64 + 1466489283982204553*2^128 + 2055752131*2^192,18399704432882008224 + 14434713120656577303*2^64 + 8788616247744256358*2^128 + 1034666572*2^192,4369650706001138920 + 5020130899593868467*2^64 + 2356111520582177983*2^128 + 788211311*2^192,563692339314933152 + 4754156946511956340*2^64 + 4474659398256651166*2^128 + 2360020914*2^192,6546746713199638580 + 16849076682626723383*2^64 + 1492306822277035534*2^128 + 1061671556*2^192,901565362443783104 + 5811360614242149988*2^64 + 11527336676626236634*2^128 + 3222192861*2^192,11800301368478897168 + 2469988207704491591*2^64 + 5695716484640997127*2^128 + 3333871946*2^192;\
15640157595537978466 + 11546019688773557059*2^64 + 18133876451244788615*2^128 + 2255074921*2^192,8064167583430907878 + 13995969686637621948*2^64 + 16398605096706226007*2^128 + 2105893209*2^192,4921643290679269280 + 8998972921800622173*2^64 + 15322274966089920588*2^128 + 2744966124*2^192,9699489674098751880 + 13077843873147769939*2^64 + 7882742162555343745*2^128 + 2880988642*2^192,5829959457173541792 + 10581700221959735025*2^64 + 13131778033567989492*2^128 + 2420905527*2^192,3669137682178818996 + 10836769779071477295*2^64 + 8437776281462397114*2^128 + 1218842903*2^192,7184738855412433968 + 17103593357212636078*2^64 + 11553520687552304854*2^128 + 2689097473*2^192,14546817367700560352 + 15352856495028934293*2^64 + 17481146484740556456*2^128 + 265855420*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4294 lists. */
