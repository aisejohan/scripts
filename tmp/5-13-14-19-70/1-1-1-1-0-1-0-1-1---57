/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^14                     = Coefficient of   x^6 * y^2 * z^1         = Coefficient of   x^5 * y^2 * w^1         = Coefficient of   x^3 * y^1 * z^3         = Coefficient of   x^2 * y^1 * z^2 * w^1   = Coefficient of   x^1 * y^5               = Coefficient of   x^1 * y^1 * z^1 * w^2   = Coefficient of   y^1 * w^3               = Coefficient of   z^5                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^14 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*y^2*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^5*y^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^1*z^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^5


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 176
[5, 2, 0, 0, 0]  	51	2 
[3, 1, 2, 0, 0]  	56	3 
[14, 0, 0, 0, 0]  	70	4  <--- 1
[1, 5, 0, 0, 0]  	70	4 
[4, 0, 4, 0, 0]  	76	6 
[3, 2, 0, 2, 0]  	79	3 
[5, 1, 1, 2, 0]  	90	7 
[3, 0, 4, 1, 0]  	90	6 
[2, 0, 6, 0, 0]  	94	3 
[3, 0, 3, 2, 0]  	95	7 
[9, 1, 0, 2, 0]  	96	4 
[11, 0, 3, 0, 0]  	97	7 
[2, 1, 3, 2, 0]  	103	6 
[4, 1, 1, 3, 0]  	104	7 
[3, 1, 0, 4, 0]  	104	7 
[2, 1, 2, 3, 0]  	108	5 
[2, 4, 2, 1, 0]  	109	6 
[2, 0, 3, 3, 0]  	109	5 
[8, 1, 0, 3, 0]  	110	6 
[10, 0, 3, 1, 0]  	111	7 
[8, 0, 1, 3, 0]  	111	6 
[11, 0, 0, 3, 0]  	112	5 
[2, 2, 0, 4, 0]  	112	3 
[2, 1, 1, 4, 0]  	113	4 
[2, 4, 1, 2, 0]  	114	7 
[6, 0, 2, 3, 0]  	115	7 
[1, 0, 8, 0, 0]  	117	5 
[2, 1, 0, 5, 0]  	118	6 
[2, 0, 5, 2, 0]  	118	6 
[3, 0, 2, 4, 0]  	119	7 
[2, 4, 0, 3, 0]  	119	7 
[2, 3, 1, 3, 0]  	120	5 
[1, 1, 2, 4, 0]  	122	5 
[1, 0, 7, 1, 0]  	122	4 
[1, 4, 2, 2, 0]  	123	4 
[1, 0, 3, 4, 0]  	123	5 
[3, 0, 1, 5, 0]  	124	4 
[2, 3, 4, 1, 0]  	124	5 
[2, 0, 0, 6, 0]  	124	5 
[1, 4, 5, 0, 0]  	127	5 
[1, 0, 6, 2, 0]  	127	4 
[1, 3, 6, 0, 0]  	128	4 
[1, 0, 2, 5, 0]  	128	4 
[1, 2, 7, 0, 0]  	129	4 
[0, 10, 0, 0, 0]  	130	4  <--- 2
[1, 4, 4, 1, 0]  	132	5 
[1, 1, 0, 6, 0]  	132	4 
[1, 4, 0, 4, 0]  	133	5 
[1, 0, 1, 6, 0]  	133	4 
[1, 3, 1, 4, 0]  	134	4 
[1, 2, 6, 1, 0]  	134	4 
[0, 9, 0, 1, 0]  	136	4 
[0, 8, 1, 1, 0]  	137	3 
[0, 4, 2, 3, 0]  	137	3 
[1, 3, 4, 2, 0]  	138	3 
[1, 0, 0, 7, 0]  	138	3 
[0, 7, 2, 1, 0]  	138	3 
[1, 3, 0, 5, 0]  	139	4 
[1, 2, 5, 2, 0]  	139	4 
[1, 2, 1, 5, 0]  	140	5 
[0, 8, 0, 2, 0]  	142	2 
[0, 4, 1, 4, 0]  	142	2 
[0, 7, 1, 2, 0]  	143	3 
[1, 2, 4, 3, 0]  	144	3 
[0, 6, 2, 2, 0]  	144	3 
[0, 8, 3, 0, 0]  	146	4 
[0, 7, 4, 0, 0]  	147	2 
[0, 4, 0, 5, 0]  	147	3 
[0, 7, 0, 3, 0]  	148	3 
[0, 3, 1, 5, 0]  	148	2 
[0, 6, 1, 3, 0]  	149	4 
[0, 3, 8, 0, 0]  	151	2 
[0, 3, 4, 3, 0]  	152	2 
[0, 6, 4, 1, 0]  	153	3 
[0, 3, 0, 6, 0]  	153	3 
[0, 6, 0, 4, 0]  	154	4 
[0, 3, 7, 1, 0]  	156	1 
[0, 0, 3, 6, 0]  	156	1 
[0, 3, 3, 4, 0]  	157	1 
[0, 2, 8, 1, 0]  	157	1 
[0, 2, 4, 4, 0]  	158	2 
[0, 5, 4, 2, 0]  	159	3 
[0, 2, 0, 7, 0]  	159	3 
[0, 1, 1, 7, 0]  	160	2 
[0, 3, 6, 2, 0]  	161	1 
[0, 0, 2, 7, 0]  	161	1 
[0, 6, 6, 0, 0]  	162	1 
[0, 2, 7, 2, 0]  	162	1 
[0, 5, 7, 0, 0]  	163	2 
[0, 1, 0, 8, 0]  	165	2 
[0, 2, 10, 0, 0]  	166	1 
[0, 0, 1, 8, 0]  	166	1 
[0, 2, 6, 3, 0]  	167	1 
[0, 1, 11, 0, 0]  	167	1 
[0, 2, 2, 6, 0]  	168	2 
[0, 1, 7, 3, 0]  	168	2 
[0, 0, 8, 3, 0]  	169	1 
[0, 0, 0, 9, 0]  	171	1  <--- 4
[0, 1, 10, 1, 0]  	172	1 
[0, 1, 6, 4, 0]  	173	2 
[0, 0, 7, 4, 0]  	174	1 
[0, 1, 9, 2, 0]  	177	1 
[0, 0, 6, 5, 0]  	179	1 
[0, 0, 13, 0, 0]  	182	1  <--- 3
[0, 0, 12, 1, 0]  	187	1 
[0, 0, 11, 2, 0]  	192	1 
[6, 1, 1, 0, 1]  	57	5 
[13, 0, 0, 0, 1]  	65	5 
[5, 1, 1, 1, 1]  	71	5 
[4, 1, 1, 2, 1]  	85	6 
[8, 1, 0, 2, 1]  	91	5 
[12, 1, 0, 1, 1]  	92	7 
[3, 1, 1, 3, 1]  	99	6 
[2, 4, 3, 0, 1]  	104	7 
[7, 1, 0, 3, 1]  	105	7 
[9, 0, 3, 1, 1]  	106	8 
[10, 0, 0, 3, 1]  	107	6 
[5, 0, 2, 3, 1]  	110	7 
[2, 0, 2, 4, 1]  	114	6 
[1, 1, 3, 3, 1]  	117	5 
[0, 5, 0, 3, 1]  	122	4 
[7, 0, 1, 4, 1]  	125	6 
[1, 1, 1, 5, 1]  	127	4 
[1, 4, 1, 3, 1]  	128	4 
[1, 3, 2, 3, 1]  	129	4 
[1, 0, 5, 3, 1]  	132	4 
[1, 3, 5, 1, 1]  	133	4 
[0, 5, 4, 1, 1]  	140	4 
[0, 4, 5, 1, 1]  	141	3 
[0, 3, 6, 1, 1]  	142	2 
[0, 6, 5, 0, 1]  	148	2 
[0, 4, 7, 0, 1]  	150	3 
[0, 2, 9, 0, 1]  	152	2 
[0, 2, 1, 6, 1]  	154	3 
[0, 2, 3, 5, 1]  	163	2 
[2, 1, 2, 2, 2]  	89	3 
[1, 1, 1, 4, 2]  	108	5 
[2, 3, 5, 0, 2]  	119	6 
[2, 2, 5, 1, 2]  	125	5 
[0, 3, 2, 4, 2]  	143	2 
[0, 3, 5, 2, 2]  	147	2 
[0, 5, 6, 0, 2]  	149	3 
[0, 2, 5, 3, 2]  	153	2 
[0, 1, 2, 6, 2]  	155	2 
[0, 1, 4, 5, 2]  	164	2 
[0, 9, 2, 0, 3]  	145	4 
[1, 1, 2, 3, 4]  	103	5 
[0, 4, 4, 2, 4]  	146	3 
[1, 0, 7, 0, 252]  	103	4 
[0, 5, 3, 2, 252]  	145	3 
[0, 1, 0, 7, 252]  	146	2 
[1, 2, 4, 2, 253]  	125	4 
[0, 2, 7, 1, 253]  	143	1 
[0, 0, 7, 3, 253]  	155	1 
[1, 0, 6, 0, 254]  	89	2 
[1, 0, 0, 6, 254]  	119	2 
[0, 0, 1, 7, 254]  	147	1 
[0, 1, 10, 0, 254]  	153	1 
[0, 1, 6, 3, 254]  	154	2 
[0, 0, 9, 2, 254]  	164	1 
[3, 0, 3, 0, 255]  	57	3 
[4, 2, 0, 1, 255]  	65	3 
[2, 1, 3, 1, 255]  	84	3 
[2, 2, 0, 3, 255]  	93	4 
[2, 1, 0, 4, 255]  	99	3 
[2, 0, 4, 2, 255]  	104	6 
[7, 0, 1, 3, 255]  	106	6 
[0, 0, 0, 6, 255]  	114	1 
[0, 9, 0, 0, 255]  	117	1 
[0, 8, 1, 0, 255]  	118	1 
[0, 0, 6, 2, 255]  	122	1 
[1, 2, 0, 5, 255]  	126	3 
[0, 3, 1, 4, 255]  	129	1 
[0, 6, 1, 2, 255]  	130	3 
[0, 2, 2, 5, 255]  	149	2 
[0, 0, 12, 0, 255]  	168	1 
------
The gap is between 5 and 251.
Lengths: 2 2 4 5 2 2.
For 159 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^5*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^10*w^1

For 89 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^6
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^5*w^1

For 19 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^1

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[3134564266901250176 + 12384415751936276685*2^64 + 9881155691397483145*2^128 + 78816214*2^192,15281428353148702476 + 11132346080843249747*2^64 + 17317019144445794153*2^128 + 67889209*2^192,15505975453846323792 + 843936016518266401*2^64 + 9009875349255107709*2^128 + 4174579504*2^192,2728985141153217216 + 17841796040481764737*2^64 + 6622961373781433619*2^128 + 1015634194*2^192,14707960862261348096 + 16378050430927509760*2^64 + 6021435077481027034*2^128 + 3851655514*2^192,5926766607571175184 + 13668149814462436729*2^64 + 15140939963968049354*2^128 + 1179324278*2^192,9479845959353953760 + 548496267408752017*2^64 + 1691337153613601406*2^128 + 2797792814*2^192,13084800067505907968 + 14511448048371926704*2^64 + 5978920241471390602*2^128 + 3283679977*2^192;\
17483146103072889796 + 11690712874362896890*2^64 + 2152717245619158399*2^128 + 2619114197*2^192,12470251481785226088 + 713989680183606672*2^64 + 2110107189399643049*2^128 + 3275123389*2^192,16616075505050557280 + 12995963285549003535*2^64 + 16132959599017721337*2^128 + 3876864509*2^192,3613298185990943760 + 11821905613246730517*2^64 + 12590196918256656010*2^128 + 582129697*2^192,800947871433585840 + 16744136767278195691*2^64 + 2488539810751696034*2^128 + 3456331543*2^192,335800846486890288 + 16080453348617734919*2^64 + 11001537936506091726*2^128 + 77983639*2^192,13514229625741085376 + 6366918550971656909*2^64 + 15352484791596819473*2^128 + 2727791928*2^192,15967196530678082592 + 11563113804139257075*2^64 + 16677252688147021373*2^128 + 3674152532*2^192;\
9499209758933734126 + 12881062826776201888*2^64 + 17793304760911304918*2^128 + 287984*2^192,606660139820196856 + 9818576890183371578*2^64 + 10872569803390266659*2^128 + 1859229843*2^192,16248545175667978568 + 4534872844976148215*2^64 + 15130920793502800902*2^128 + 2339726008*2^192,14073898212535739280 + 15910043428038568115*2^64 + 13752344859105065408*2^128 + 1719497095*2^192,1828693949444289552 + 1721491077994152878*2^64 + 16702566943748301574*2^128 + 524712760*2^192,13396554262070384152 + 8787653966853798349*2^64 + 17933055809513098710*2^128 + 3121264240*2^192,10863713577788044720 + 14759926461130662813*2^64 + 6535369947455906190*2^128 + 2806917918*2^192,14179083753374145360 + 17333354206952580145*2^64 + 12360139341080358795*2^128 + 2547213776*2^192;\
3697994479430301208 + 6522143814812954582*2^64 + 7217667648846597078*2^128 + 1220998533*2^192,810302001037251099 + 9381657740214070974*2^64 + 17120922986887380615*2^128 + 912739049*2^192,15837029340015038908 + 4702192835576066980*2^64 + 15073557679488298100*2^128 + 986581537*2^192,10627504945355420192 + 17397626455772396206*2^64 + 15363595708540570326*2^128 + 433577800*2^192,13454876002261626328 + 12437991140674715846*2^64 + 15891767785300650366*2^128 + 436170692*2^192,1221112919463879458 + 15993630668887924090*2^64 + 7602114367911932287*2^128 + 3707256387*2^192,14947571105296594712 + 12917329527516053877*2^64 + 453103890432093367*2^128 + 3265076520*2^192,969297858518270060 + 14033461013828510823*2^64 + 10739093169913202875*2^128 + 2524916622*2^192;\
9887931499150640772 + 651066782773300763*2^64 + 15314085908852631691*2^128 + 3954921033*2^192,6297533426815856587 + 13600320880245248594*2^64 + 15823459350296678706*2^128 + 792268278*2^192,7320830761849668740 + 11647083914633500480*2^64 + 16419558959647465125*2^128 + 91160914*2^192,13006219978598571360 + 13034611115294936287*2^64 + 7428235206658062962*2^128 + 1358737500*2^192,9127281326505140184 + 1379784782017899453*2^64 + 11710071933828675577*2^128 + 2467784633*2^192,4844656096666244298 + 4033407868667119175*2^64 + 2623935150480842498*2^128 + 74397523*2^192,17041805901004656696 + 10509371870644519127*2^64 + 11380548058137048342*2^128 + 2094270002*2^192,16172819016210666380 + 12209950451040076247*2^64 + 4885703049518933736*2^128 + 3301047221*2^192;\
6174254182580977564 + 16207793933450588385*2^64 + 18329375444006927167*2^128 + 2215515371*2^192,15866544784741204066 + 8557763861409320605*2^64 + 15615321374607174151*2^128 + 1893667660*2^192,10748162537363618576 + 5676188065814932546*2^64 + 14364026317560945613*2^128 + 348460384*2^192,7837539251637429088 + 11885126850331307900*2^64 + 14059411897160488372*2^128 + 4004553831*2^192,2990695760385608384 + 12283244199425727438*2^64 + 1601457284244225838*2^128 + 792143717*2^192,2282441709508213088 + 12204771778824535615*2^64 + 3532546707134417074*2^128 + 3990059608*2^192,6612580814500332480 + 11111687190908980087*2^64 + 1103569380955727630*2^128 + 2945757917*2^192,15428417979762200096 + 100770529778066096*2^64 + 9368654072487475016*2^128 + 1942002262*2^192;\
15903216295709989014 + 16745216638230285245*2^64 + 5706728541333533413*2^128 + 1035399059*2^192,6960426957153251970 + 6892816239670800095*2^64 + 13345405217324854391*2^128 + 541713313*2^192,16239970440948891760 + 15520326501997676953*2^64 + 18427378760580732118*2^128 + 114306757*2^192,17272220388368875152 + 12528412189200787947*2^64 + 5739208199967553386*2^128 + 1520313189*2^192,2343034682264647552 + 5405657474533092855*2^64 + 7452744522842501530*2^128 + 224503211*2^192,17541923827976994676 + 15930157269389944396*2^64 + 11687663915911547234*2^128 + 1201802966*2^192,17664792428238883648 + 14163326884791015712*2^64 + 16262733557794035467*2^128 + 2452365749*2^192,11686963920956861320 + 2796289282068796091*2^64 + 13397400272334486476*2^128 + 4282268711*2^192;\
11397878653830990288 + 9542898645463287912*2^64 + 4204315452991184176*2^128 + 2962756390*2^192,15393351208668600582 + 1557295181636915663*2^64 + 16538699499616085518*2^128 + 75682946*2^192,447257966636195704 + 12786927971366547670*2^64 + 7645851961380815075*2^128 + 1697781851*2^192,13052679920341571072 + 16612074540876110425*2^64 + 17250630409883415395*2^128 + 3159427960*2^192,10882857744425610512 + 9493641046105546035*2^64 + 6021656076975139612*2^128 + 4086924955*2^192,367211057952361220 + 17178597135396398135*2^64 + 9378956656227389566*2^128 + 3044026190*2^192,16993361830462775136 + 16381187316168915008*2^64 + 3708109708569791215*2^128 + 1014356383*2^192,1757783307398038584 + 10867031832325399606*2^64 + 7431288810785352311*2^128 + 2622065252*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 4365 lists. */
