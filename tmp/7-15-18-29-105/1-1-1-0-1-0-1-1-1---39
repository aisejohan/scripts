/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^15                     = Coefficient of   x^6 * y^3 * z^1         = Coefficient of   x^4 * y^2 * z^1 * w^1   = Coefficient of   x^3 * y^2 * z^3         = Coefficient of   x^2 * y^1 * z^1 * w^2   = Coefficient of   x^1 * y^1 * z^3 * w^1   = Coefficient of   y^7                     = Coefficient of   y^1 * z^5               = Coefficient of   z^1 * w^3               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^15 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*y^3*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^7 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 173
[4, 2, 1, 0, 0]  	76	3 
[6, 3, 0, 0, 0]  	87	5 
[14, 0, 0, 0, 0]  	98	3  <--- 1
[0, 7, 0, 0, 0]  	105	2  <--- 2
[0, 1, 5, 0, 0]  	105	2 
[12, 2, 0, 1, 0]  	143	6 
[0, 6, 0, 2, 0]  	148	2 
[12, 1, 0, 2, 0]  	157	5 
[6, 1, 4, 1, 0]  	158	5 
[12, 0, 1, 2, 0]  	160	3 
[10, 0, 5, 0, 0]  	160	6 
[10, 1, 1, 2, 0]  	161	4 
[6, 0, 5, 1, 0]  	161	8 
[0, 6, 4, 0, 0]  	162	3 
[12, 1, 4, 0, 0]  	171	4 
[6, 1, 0, 4, 0]  	173	5 
[10, 0, 1, 3, 0]  	175	3 
[6, 0, 1, 4, 0]  	176	4 
[3, 4, 4, 1, 0]  	182	5 
[3, 5, 0, 3, 0]  	183	5 
[4, 3, 0, 4, 0]  	189	5 
[4, 0, 9, 0, 0]  	190	5 
[2, 5, 4, 1, 0]  	190	5 
[3, 4, 0, 4, 0]  	197	5 
[3, 0, 5, 3, 0]  	198	4 
[3, 3, 1, 4, 0]  	200	4 
[3, 0, 10, 0, 0]  	201	3 
[4, 2, 0, 5, 0]  	203	7 
[2, 4, 4, 2, 0]  	204	5 
[3, 3, 0, 5, 0]  	211	4 
[2, 3, 2, 4, 0]  	211	4 
[3, 0, 9, 1, 0]  	212	3 
[2, 5, 2, 3, 0]  	212	3 
[2, 0, 11, 0, 0]  	212	3 
[1, 5, 4, 2, 0]  	212	3 
[10, 0, 0, 5, 0]  	215	4 
[4, 1, 0, 6, 0]  	217	6 
[2, 3, 4, 3, 0]  	218	4 
[2, 2, 0, 6, 0]  	218	4 
[2, 4, 0, 5, 0]  	219	3 
[4, 0, 1, 6, 0]  	220	4 
[1, 4, 4, 3, 0]  	226	3 
[2, 0, 7, 3, 0]  	227	3 
[1, 5, 0, 5, 0]  	227	2 
[1, 0, 9, 2, 0]  	227	2 
[3, 1, 1, 6, 0]  	228	3 
[1, 2, 1, 6, 0]  	229	2 
[1, 4, 1, 5, 0]  	230	2 
[4, 0, 0, 7, 0]  	231	4 
[2, 1, 0, 7, 0]  	232	4 
[1, 3, 2, 5, 0]  	233	2 
[0, 3, 4, 4, 0]  	233	2 
[0, 5, 4, 3, 0]  	234	2 
[2, 1, 2, 6, 0]  	239	4 
[1, 4, 0, 6, 0]  	241	1 
[1, 0, 13, 0, 0]  	241	1 
[0, 4, 2, 5, 0]  	241	1 
[3, 0, 1, 7, 0]  	242	2 
[1, 0, 5, 5, 0]  	242	2 
[1, 1, 1, 7, 0]  	243	2 
[0, 3, 3, 5, 0]  	244	1 
[0, 3, 0, 7, 0]  	248	1 
[0, 2, 1, 7, 0]  	251	1 
[0, 3, 2, 6, 0]  	255	1 
[0, 0, 11, 2, 0]  	256	1 
[1, 0, 1, 8, 0]  	257	2 
[0, 2, 3, 6, 0]  	258	1 
[0, 1, 4, 6, 0]  	261	2 
[0, 2, 0, 8, 0]  	262	1 
[0, 0, 13, 1, 0]  	263	1 
[0, 1, 1, 8, 0]  	265	1 
[0, 0, 15, 0, 0]  	270	1  <--- 3
[2, 0, 3, 7, 0]  	271	1 
[0, 0, 7, 5, 0]  	271	1 
[0, 1, 3, 7, 0]  	272	1 
[2, 0, 0, 9, 0]  	275	2 
[0, 1, 0, 9, 0]  	276	1 
[0, 0, 9, 4, 0]  	278	1 
[0, 0, 1, 9, 0]  	279	1 
[0, 0, 3, 8, 0]  	286	1 
[0, 0, 0, 10, 0]  	290	1  <--- 4
[0, 0, 5, 7, 0]  	293	1 
[12, 1, 1, 1, 1]  	146	4 
[10, 0, 1, 2, 1]  	146	7 
[4, 0, 5, 2, 1]  	176	5 
[0, 5, 1, 3, 1]  	180	2 
[12, 0, 0, 4, 1]  	200	3 
[2, 5, 0, 4, 1]  	205	5 
[4, 1, 1, 5, 1]  	206	5 
[3, 0, 1, 6, 1]  	213	3 
[3, 2, 1, 5, 1]  	214	4 
[0, 5, 0, 5, 1]  	220	2 
[2, 2, 2, 5, 1]  	225	4 
[2, 2, 4, 4, 1]  	232	4 
[2, 0, 3, 6, 1]  	242	2 
[2, 1, 4, 5, 1]  	246	4 
[0, 2, 4, 5, 1]  	247	2 
[4, 1, 1, 1, 2]  	90	4 
[6, 0, 0, 4, 2]  	158	6 
[2, 0, 10, 1, 2]  	223	3 
[6, 0, 1, 3, 3]  	147	5 
[4, 0, 2, 3, 3]  	151	3 
[4, 0, 1, 4, 3]  	162	4 
[2, 0, 9, 1, 3]  	205	4 
[2, 4, 1, 4, 3]  	208	3 
[2, 3, 1, 5, 3]  	222	3 
[0, 4, 0, 6, 3]  	234	2 
[2, 0, 5, 4, 4]  	220	4 
[1, 0, 11, 1, 5]  	234	2 
[2, 0, 1, 7, 5]  	235	3 
[3, 0, 0, 8, 5]  	253	4 
[1, 1, 0, 8, 5]  	254	2 
[3, 4, 2, 2, 6]  	175	5 
[3, 6, 2, 1, 6]  	176	6 
[2, 4, 3, 3, 6]  	215	3 
[1, 4, 2, 4, 6]  	219	3 
[3, 2, 3, 4, 6]  	221	4 
[1, 3, 0, 6, 6]  	226	2 
[3, 1, 3, 5, 6]  	235	4 
[1, 2, 3, 5, 6]  	236	2 
[1, 1, 3, 6, 6]  	250	2 
[1, 0, 0, 9, 6]  	268	2 
[3, 0, 7, 2, 7]  	205	5 
[3, 1, 3, 4, 7]  	206	4 
[3, 3, 3, 3, 7]  	207	4 
[1, 0, 7, 4, 7]  	249	3 
[3, 0, 3, 4, 8]  	191	5 
[1, 2, 0, 7, 8]  	240	2 
[1, 0, 3, 7, 8]  	264	2 
[0, 0, 13, 0, 244]  	234	1 
[0, 5, 4, 2, 246]  	205	2 
[0, 0, 9, 2, 246]  	220	1 
[2, 4, 0, 4, 247]  	190	4 
[2, 0, 10, 0, 247]  	194	3 
[0, 4, 4, 3, 247]  	219	2 
[0, 4, 1, 5, 247]  	223	1 
[0, 3, 1, 6, 247]  	237	1 
[2, 5, 0, 3, 248]  	176	5 
[2, 0, 5, 3, 248]  	191	3 
[0, 2, 1, 6, 248]  	222	1 
[0, 0, 5, 5, 248]  	235	1 
[2, 3, 0, 5, 249]  	204	4 
[1, 0, 11, 0, 249]  	205	3 
[1, 3, 1, 5, 249]  	215	2 
[0, 0, 1, 8, 249]  	250	1 
[2, 4, 4, 1, 250]  	175	3 
[2, 3, 1, 4, 250]  	193	2 
[2, 0, 1, 6, 250]  	206	2 
[2, 2, 1, 5, 250]  	207	3 
[1, 4, 3, 3, 250]  	208	2 
[0, 3, 1, 5, 250]  	208	1 
[0, 1, 1, 7, 250]  	236	1 
[1, 0, 7, 3, 251]  	220	2 
[0, 0, 10, 0, 252]  	180	1 
[1, 3, 3, 4, 252]  	222	2 
[4, 6, 0, 1, 253]  	147	4 
[2, 5, 4, 0, 253]  	161	3 
[0, 5, 0, 3, 253]  	162	2 
[2, 5, 1, 2, 253]  	165	2 
[2, 0, 9, 0, 253]  	176	3 
[0, 4, 1, 4, 253]  	194	1 
[1, 0, 3, 6, 253]  	235	2 
[0, 6, 0, 0, 254]  	90	2 
[6, 0, 5, 0, 254]  	132	5 
[4, 0, 6, 0, 254]  	136	3 
[4, 0, 5, 1, 254]  	147	4 
[0, 0, 5, 2, 254]  	148	1 
[2, 0, 6, 1, 254]  	151	2 
[0, 3, 1, 4, 254]  	179	1 
[0, 5, 1, 2, 255]  	151	1 
[2, 4, 1, 3, 255]  	179	2 
[0, 1, 1, 6, 255]  	207	1 
[0, 0, 0, 8, 255]  	232	1 
------
The gap is between 9 and 243.
Lengths: 3 3 4 4 3 4.
For 246 = 3*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*w^8
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^2*w^7
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^6

For 141 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^3*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^1*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^3

For 36 = d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^2

Extra powers of p used 1.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 10 
*/
A = \
[3612325020776766100 + 4140218537823996770*2^64 + 670097585114617662*2^128 + 903766573*2^192,6750246019308890258 + 2378742520976995010*2^64 + 1439900800794951817*2^128 + 1334568056*2^192,18401669483381200735 + 6131130665898294938*2^64 + 16701382773876492291*2^128 + 1362856909*2^192,16948758014880155224 + 9480905049300814528*2^64 + 2602219906037583572*2^128 + 1329827256*2^192,15603952438638828808 + 17180807262953448926*2^64 + 9895154582064176175*2^128 + 1899553868*2^192,17393098831339864088 + 8631218246780415510*2^64 + 7526726340391236269*2^128 + 1453908480*2^192,13781961968366483268 + 94859870185432384*2^64 + 13324498614284144792*2^128 + 598559997*2^192,18203824454091817728 + 2565633538903571956*2^64 + 11265497912401984*2^128 + 2137688327*2^192,11630749580547842656 + 17446236286165605443*2^64 + 4409359632693466421*2^128 + 1794294663*2^192,9042908946091423416 + 15339576212160641791*2^64 + 11963698684473045312*2^128 + 925030415*2^192;\
467135091423203176 + 2294670264550037038*2^64 + 4731261157257944869*2^128 + 8494343*2^192,2892800759506038904 + 16325175329038545968*2^64 + 8265658407070742575*2^128 + 693950608*2^192,3126190218051011232 + 7088091142705294647*2^64 + 17481635450915906086*2^128 + 543736804*2^192,12466085554816941856 + 17212104747668239011*2^64 + 17799763445165141900*2^128 + 297571710*2^192,17738941205536413512 + 3656936551341062374*2^64 + 9961288258015129810*2^128 + 1273320090*2^192,8509398840121097888 + 8295247265507328734*2^64 + 1218528257794016058*2^128 + 885568338*2^192,2169979264613384216 + 18274503548590562673*2^64 + 2623888256990425154*2^128 + 465039785*2^192,3997878976918410240 + 17948191439062296261*2^64 + 12343760344946394843*2^128 + 42855378*2^192,17029214026479964800 + 6716632044531212309*2^64 + 5983082574829033535*2^128 + 457521040*2^192,1818137926560893312 + 13287612630152893604*2^64 + 9884249461304320621*2^128 + 131928998*2^192;\
1921533685377298224 + 13126732974524981486*2^64 + 13408947702975114166*2^128 + 1457082589*2^192,13714667631126291866 + 7375972685383240003*2^64 + 3918445965380304334*2^128 + 894506850*2^192,6415148608193589792 + 14053356607949491509*2^64 + 220273254286998911*2^128 + 880810490*2^192,9276184192745023368 + 871529602737450108*2^64 + 15708707486159660217*2^128 + 944716712*2^192,3100938909200086880 + 14224158788636185536*2^64 + 13662980411086702342*2^128 + 877159910*2^192,8218222619037790984 + 6817868319198175925*2^64 + 11896694678645497174*2^128 + 564871438*2^192,16587968067339708768 + 7838044850911252039*2^64 + 16422772963713258617*2^128 + 307792491*2^192,2262353712354781216 + 1916684941421290831*2^64 + 10595273808921206458*2^128 + 805302081*2^192,17093276133817442048 + 13225612800874023002*2^64 + 14127977658812574892*2^128 + 1007874636*2^192,957434836385518336 + 4155774324024757713*2^64 + 4830141100401576951*2^128 + 550599733*2^192;\
4007906655103881464 + 10378192097726643681*2^64 + 8712631309740250874*2^128 + 1838720198*2^192,10887682278943640808 + 2866257047512147587*2^64 + 12069394757620315549*2^128 + 563082565*2^192,7706571530342141280 + 4589463386646305687*2^64 + 15590383407189730554*2^128 + 1344616487*2^192,17567316961083119864 + 6460907307124544952*2^64 + 11238515710366031230*2^128 + 2076216136*2^192,11770673748549883704 + 13228007701364106522*2^64 + 12927626544431350115*2^128 + 546341589*2^192,15014996593975274528 + 319508840260764422*2^64 + 10071680840189372906*2^128 + 759390603*2^192,2516984272219015448 + 170717886068918776*2^64 + 7959833472879336780*2^128 + 362191968*2^192,13798089178793622664 + 17096319586369616916*2^64 + 12403123748112982814*2^128 + 684500690*2^192,12422423014989329592 + 11883873866891260500*2^64 + 11868457837649226663*2^128 + 1035350935*2^192,1682401933506690624 + 13250763120449786365*2^64 + 5055092388939105689*2^128 + 1381081541*2^192;\
1815535689940067786 + 1583316557163927186*2^64 + 2448286908655790479*2^128 + 801415548*2^192,1696472691640473678 + 6067169412039734175*2^64 + 18325272263250446349*2^128 + 673777264*2^192,10659168985726890953 + 2011885360982112013*2^64 + 5599986455711216532*2^128 + 355330373*2^192,1048265767362978300 + 5163710364309734254*2^64 + 3291082992900681652*2^128 + 392078885*2^192,6053335882504161460 + 12334559447073978317*2^64 + 3110708936799793324*2^128 + 2090024704*2^192,14204317065160953916 + 8232582678539394662*2^64 + 15829374900708261742*2^128 + 549009715*2^192,4139849732306638408 + 7620213068024457218*2^64 + 6886391124822888187*2^128 + 1684316995*2^192,9541309495874813504 + 3281290820453583851*2^64 + 18285726994121178544*2^128 + 1626665341*2^192,2020761428229105608 + 9638561587379155148*2^64 + 2233561841645367924*2^128 + 126756433*2^192,3447853473094285448 + 6507476598957276788*2^64 + 11969342593744285431*2^128 + 1362634302*2^192;\
9398475826628397780 + 14800702913698350961*2^64 + 13403726836223303803*2^128 + 929044460*2^192,17363301713236777288 + 5039317799973857741*2^64 + 10265458524708744197*2^128 + 290390901*2^192,2466080761292464244 + 14936078190994467522*2^64 + 12142768615208000583*2^128 + 1207044408*2^192,16226472358470410136 + 5623825897625577456*2^64 + 15521331664059003637*2^128 + 1683699005*2^192,12318066770061803788 + 15202887356411725208*2^64 + 3527185109510548481*2^128 + 1238884718*2^192,10679128767659157552 + 5123621324615145469*2^64 + 16658146413995103381*2^128 + 578188786*2^192,17843134298927972744 + 15039451703451653375*2^64 + 1350788622970162847*2^128 + 2111184805*2^192,13030866960595282904 + 11791559378019706043*2^64 + 5822690025447463131*2^128 + 925997412*2^192,18264861603877686312 + 5550281852138962029*2^64 + 15256331723761123653*2^128 + 258405634*2^192,13896194049673161592 + 15008003343510680456*2^64 + 6608352078956062022*2^128 + 586249814*2^192;\
16137075990721437532 + 10742110585382174532*2^64 + 9246103341647167311*2^128 + 269631605*2^192,14683894292547293056 + 15248610527156984818*2^64 + 14738981236555197462*2^128 + 1209170056*2^192,3058989377328067742 + 1194638692291274918*2^64 + 1862910156989023009*2^128 + 509757571*2^192,8382416560283104356 + 15413699126829647273*2^64 + 655158893112038934*2^128 + 1968955338*2^192,10661142198369171912 + 7931932980265513592*2^64 + 7979637582536985971*2^128 + 911377712*2^192,15105520562309892420 + 3571716903310737203*2^64 + 5580490880673128528*2^128 + 1767723324*2^192,9985526821317846848 + 5434076150738386371*2^64 + 3551756370158491756*2^128 + 124360400*2^192,16195085102758297344 + 8463188289432731890*2^64 + 14026657011048418705*2^128 + 1753290664*2^192,4368184376842364776 + 14517322166034502625*2^64 + 6543569498027923952*2^128 + 335751704*2^192,18150982864112890736 + 18110568242599705273*2^64 + 6514469420936067770*2^128 + 1306210120*2^192;\
16889569443749356376 + 9568267481856411848*2^64 + 820737125998136234*2^128 + 554487159*2^192,17820396844245515108 + 10220624965769302554*2^64 + 16710601756511478344*2^128 + 2135492879*2^192,4152149059475745392 + 4607256036603217295*2^64 + 11236380788188747583*2^128 + 2104234395*2^192,10524359447065913880 + 11431726124929199925*2^64 + 11432787784458031175*2^128 + 679810269*2^192,9071215933652898120 + 9111080472578653885*2^64 + 2650839427811464023*2^128 + 1839451550*2^192,12488700581994369328 + 17964447059739921917*2^64 + 353684342871841375*2^128 + 764232445*2^192,8807930229302371448 + 6416817806368573333*2^64 + 12087067909743870114*2^128 + 2056715627*2^192,15797133861205156600 + 8303574568337592795*2^64 + 11407126985243470045*2^128 + 663260909*2^192,17739428883220123008 + 10261960082834735836*2^64 + 13834594515177429460*2^128 + 2072544560*2^192,2905816528296195656 + 2305720453927542663*2^64 + 2210719001934050968*2^128 + 786415868*2^192;\
1332799939749117120 + 13891750253317046476*2^64 + 7496307692318000897*2^128 + 1430407847*2^192,14012198840712808588 + 8828378479311295555*2^64 + 16241905858968774016*2^128 + 1339031242*2^192,7729353424494374408 + 2433298413922654792*2^64 + 2942723630124995024*2^128 + 924877248*2^192,745045199561761440 + 4637363937730586755*2^64 + 8261884426685624909*2^128 + 1079067420*2^192,18305656559943918672 + 6263370199784468396*2^64 + 11170105185001230257*2^128 + 714954326*2^192,1837009450982249600 + 14370231083132048295*2^64 + 17627986711130036692*2^128 + 764018414*2^192,4367245546332207152 + 12396854530100861338*2^64 + 8942502205213106071*2^128 + 1489165731*2^192,7858080868394449488 + 8526663361319915847*2^64 + 9657047144445433875*2^128 + 1558953050*2^192,2157543755642544 + 17600226804659172125*2^64 + 14007020605674397402*2^128 + 458726190*2^192,8764212704858517304 + 7318657826727598119*2^64 + 3578375481698901462*2^128 + 56563404*2^192;\
11044338584226147680 + 8152659563514157575*2^64 + 5841654288438476995*2^128 + 1667043786*2^192,509761231819682580 + 15821324774206025844*2^64 + 8275765315104041061*2^128 + 833577270*2^192,18436382329650050550 + 1966879875888265868*2^64 + 16863562164895381143*2^128 + 1955793281*2^192,14603471183926919136 + 15211269924718912154*2^64 + 13409114716588333964*2^128 + 1546856858*2^192,17136248388359852204 + 11008126602667841667*2^64 + 6550922062935998092*2^128 + 817812204*2^192,5500720849399244804 + 12818517406740487107*2^64 + 8393067433255902466*2^128 + 146958500*2^192,7936494308649955292 + 3089132614919917924*2^64 + 7527135944351417718*2^128 + 434004997*2^192,7881959399190594424 + 5940353594968450593*2^64 + 12652835057799556668*2^128 + 579267038*2^192,9408200336225558512 + 8496613884970360455*2^64 + 4116278424946781548*2^128 + 1526767283*2^192,8272260407240718352 + 1892063648563981362*2^64 + 2468313059467365707*2^128 + 594192464*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 3983 lists. */
The sign is: -1
The characteristic polynomial is: x^10 - 4*x^8 - 22*x^6 + 88*x^4 + 256*x^2 - 1024
Its Newton polygon is: [7/4, 7/4, 7/4, 7/4, 1, 1, 1/4, 1/4, 1/4, 1/4]
Its factorization is: [x - 2, 1; x + 2, 1; x^8 - 22*x^4 + 256, 1]
The valuation of f-g is: 31
The valuation of subst(g,x,A) is: 32
