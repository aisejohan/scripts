/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1 * z^1         = Coefficient of   x^7 * w^1               = Coefficient of   x^3 * y^3 * z^3         = Coefficient of   x^2 * y^2 * z^2 * w^1   = Coefficient of   x^1 * y^8               = Coefficient of   x^1 * y^1 * z^1 * w^2   = Coefficient of   z^8                     = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 189
[7, 0, 0, 0, 0]  	112	3  <--- 1
[3, 3, 2, 0, 0]  	147	4 
[3, 2, 3, 0, 0]  	149	4 
[6, 0, 0, 1, 0]  	152	5 
[2, 2, 2, 1, 0]  	168	3 
[1, 8, 0, 0, 0]  	168	2 
[5, 1, 0, 2, 0]  	211	6 
[1, 1, 9, 0, 0]  	224	4 
[4, 0, 8, 0, 0]  	232	6 
[4, 1, 0, 3, 0]  	251	6 
[5, 0, 3, 2, 0]  	255	7 
[1, 7, 0, 2, 0]  	261	4 
[2, 0, 11, 0, 0]  	263	4 
[3, 0, 8, 1, 0]  	272	6 
[4, 0, 2, 3, 0]  	274	6 
[2, 1, 8, 1, 0]  	275	4 
[1, 0, 10, 1, 0]  	282	3 
[2, 1, 6, 2, 0]  	289	6 
[3, 1, 0, 4, 0]  	291	6 
[3, 0, 1, 4, 0]  	293	5 
[3, 6, 1, 2, 0]  	295	5 
[2, 5, 8, 0, 0]  	295	5 
[0, 7, 8, 0, 0]  	301	4 
[5, 0, 0, 4, 0]  	304	5 
[3, 0, 7, 2, 0]  	307	4 
[1, 0, 14, 0, 0]  	310	4 
[2, 6, 0, 3, 0]  	314	4 
[1, 1, 8, 2, 0]  	315	4 
[0, 11, 0, 2, 0]  	321	3 
[0, 14, 0, 1, 0]  	322	4 
[0, 17, 0, 0, 0]  	323	3  <--- 2
[0, 10, 1, 2, 0]  	323	3 
[1, 0, 4, 4, 0]  	324	3 
[0, 13, 1, 1, 0]  	324	3 
[0, 16, 1, 0, 0]  	325	3 
[0, 9, 2, 2, 0]  	325	3 
[2, 0, 6, 3, 0]  	326	3 
[1, 6, 4, 2, 0]  	326	3 
[0, 12, 2, 1, 0]  	326	3 
[0, 8, 3, 2, 0]  	327	3 
[3, 0, 0, 5, 0]  	328	4 
[1, 1, 6, 3, 0]  	329	4 
[1, 4, 6, 2, 0]  	330	3 
[0, 10, 4, 1, 0]  	330	3 
[2, 1, 0, 5, 0]  	331	5 
[2, 4, 0, 4, 0]  	332	3 
[1, 3, 7, 2, 0]  	332	3 
[0, 9, 5, 1, 0]  	332	3 
[2, 0, 9, 2, 0]  	333	4 
[2, 0, 1, 5, 0]  	333	4 
[1, 5, 8, 1, 0]  	335	3 
[1, 5, 0, 4, 0]  	335	3 
[1, 4, 1, 4, 0]  	337	4 
[0, 9, 0, 3, 0]  	339	3 
[1, 6, 2, 3, 0]  	340	2 
[0, 5, 9, 1, 0]  	340	2 
[0, 8, 1, 3, 0]  	341	3 
[0, 6, 11, 0, 0]  	345	2 
[0, 1, 13, 1, 0]  	348	2 
[0, 3, 14, 0, 0]  	351	2 
[1, 0, 8, 3, 0]  	352	4 
[0, 8, 7, 1, 0]  	355	3 
[0, 1, 16, 0, 0]  	355	3 
[0, 4, 8, 2, 0]  	356	2 
[0, 7, 0, 4, 0]  	357	3 
[0, 0, 17, 0, 0]  	357	3  <--- 3
[0, 3, 9, 2, 0]  	358	2 
[0, 5, 2, 4, 0]  	361	1 
[0, 1, 11, 2, 0]  	362	2 
[0, 0, 12, 2, 0]  	364	2 
[0, 2, 5, 4, 0]  	367	1 
[2, 0, 0, 6, 0]  	368	3 
[1, 1, 0, 6, 0]  	371	4 
[1, 4, 0, 5, 0]  	372	2 
[1, 0, 1, 6, 0]  	373	3 
[0, 2, 8, 3, 0]  	374	2 
[0, 4, 1, 5, 0]  	377	1 
[0, 0, 10, 3, 0]  	378	2 
[0, 1, 4, 5, 0]  	383	1 
[0, 14, 6, 0, 0]  	392	3 
[0, 0, 16, 1, 0]  	392	3 
[0, 3, 0, 6, 0]  	393	1 
[0, 0, 3, 6, 0]  	399	1 
[1, 0, 0, 7, 0]  	408	2 
[0, 1, 8, 4, 0]  	411	2 
[0, 0, 9, 4, 0]  	413	2 
[0, 2, 0, 7, 0]  	430	1 
[0, 0, 2, 7, 0]  	434	1 
[0, 1, 0, 8, 0]  	467	1 
[0, 0, 1, 8, 0]  	469	1 
[0, 0, 0, 9, 0]  	504	1  <--- 4
[2, 2, 1, 2, 1]  	203	4 
[2, 1, 2, 2, 1]  	205	4 
[2, 7, 1, 1, 1]  	242	4 
[1, 1, 2, 3, 1]  	245	4 
[3, 1, 7, 1, 1]  	270	6 
[1, 1, 1, 4, 1]  	280	4 
[2, 7, 6, 0, 1]  	291	5 
[2, 0, 5, 3, 1]  	305	4 
[1, 6, 3, 2, 1]  	305	4 
[1, 5, 4, 2, 1]  	307	4 
[0, 14, 2, 0, 1]  	308	4 
[1, 4, 5, 2, 1]  	309	4 
[3, 5, 0, 3, 1]  	311	4 
[1, 3, 6, 2, 1]  	311	4 
[2, 0, 8, 2, 1]  	312	5 
[0, 4, 10, 1, 1]  	342	2 
[0, 2, 12, 1, 1]  	346	2 
[1, 3, 0, 5, 1]  	353	3 
[0, 11, 7, 0, 1]  	356	2 
[1, 0, 3, 5, 1]  	359	2 
[0, 7, 3, 3, 1]  	364	2 
[0, 7, 7, 2, 1]  	392	3 
[2, 2, 0, 4, 2]  	294	4 
[4, 0, 6, 2, 2]  	302	4 
[1, 7, 5, 1, 2]  	310	4 
[1, 4, 8, 1, 2]  	316	4 
[2, 0, 3, 4, 2]  	319	4 
[0, 10, 7, 0, 2]  	337	3 
[0, 7, 2, 3, 2]  	343	3 
[0, 0, 8, 5, 2]  	448	2 
[5, 7, 0, 0, 3]  	213	6 
[5, 0, 7, 0, 3]  	227	5 
[5, 0, 0, 3, 3]  	248	5 
[4, 7, 0, 1, 3]  	253	6 
[2, 0, 4, 3, 3]  	284	5 
[0, 15, 0, 0, 3]  	285	4 
[3, 4, 0, 3, 3]  	292	5 
[2, 0, 2, 4, 3]  	298	4 
[1, 2, 7, 2, 3]  	313	4 
[1, 6, 1, 3, 3]  	319	3 
[0, 7, 7, 1, 3]  	336	3 
[4, 1, 6, 1, 4]  	265	6 
[5, 6, 1, 1, 4]  	271	6 
[1, 7, 4, 1, 4]  	289	5 
[3, 0, 6, 2, 5]  	286	5 
[4, 6, 0, 2, 5]  	290	5 
[1, 0, 3, 4, 5]  	303	4 
[0, 7, 4, 2, 5]  	329	3 
[1, 2, 0, 5, 5]  	334	4 
[1, 0, 2, 5, 5]  	338	3 
[4, 0, 7, 1, 6]  	267	5 
[4, 0, 0, 4, 6]  	288	5 
[1, 4, 3, 2, 251]  	267	4 
[1, 3, 4, 2, 251]  	269	4 
[0, 13, 0, 1, 251]  	303	3 
[0, 8, 5, 1, 251]  	313	3 
[0, 5, 8, 1, 251]  	319	2 
[0, 0, 13, 1, 251]  	329	2 
[1, 0, 13, 0, 252]  	289	4 
[5, 0, 1, 2, 253]  	213	5 
[4, 0, 1, 3, 253]  	253	5 
[0, 9, 0, 2, 253]  	283	3 
[0, 8, 1, 2, 253]  	285	3 
[1, 6, 8, 0, 253]  	298	1 
[1, 4, 0, 4, 253]  	316	3 
[0, 0, 16, 0, 253]  	336	1 
[0, 0, 0, 8, 253]  	448	1 
[1, 3, 2, 2, 254]  	227	3 
[1, 2, 3, 2, 254]  	229	3 
[1, 2, 1, 3, 254]  	243	3 
[1, 5, 8, 0, 254]  	279	2 
[0, 12, 0, 1, 254]  	284	2 
[0, 8, 4, 1, 254]  	292	2 
[1, 1, 7, 2, 254]  	294	3 
[1, 0, 6, 3, 254]  	310	3 
[2, 0, 0, 5, 254]  	312	3 
[0, 3, 8, 2, 254]  	337	2 
[0, 4, 2, 4, 254]  	342	1 
[0, 0, 11, 2, 254]  	343	2 
[0, 2, 4, 4, 254]  	346	1 
[1, 0, 0, 6, 254]  	352	3 
[1, 1, 8, 0, 255]  	203	1 
[1, 0, 9, 0, 255]  	205	1 
[0, 9, 0, 1, 255]  	227	1 
[0, 8, 1, 1, 255]  	229	1 
[1, 6, 0, 2, 255]  	242	1 
[0, 1, 8, 1, 255]  	243	1 
[0, 0, 9, 1, 255]  	245	1 
[1, 0, 6, 2, 255]  	254	1 
[3, 0, 5, 2, 255]  	265	4 
[4, 5, 0, 2, 255]  	271	4 
[0, 0, 8, 2, 255]  	280	1 
[0, 6, 8, 0, 255]  	282	2 
[0, 0, 14, 0, 255]  	294	2 
[0, 4, 0, 4, 255]  	300	1 
[0, 0, 4, 4, 255]  	308	1 
[0, 2, 0, 6, 255]  	374	1 
[0, 0, 2, 6, 255]  	378	1 
------
The gap is between 7 and 250.
Lengths: 2 2 3 3 2 3.
For 392 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^8*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*w^7

For 224 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^8*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^4

For 56 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^1

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[14489068081877918716 + 3907243283002243803*2^64 + 71678302651488873*2^128 + 443188704*2^192,3038193474332258808 + 8553065232779550385*2^64 + 4220522861949211744*2^128 + 294834306*2^192,6219431352804396790 + 1375410705518499514*2^64 + 17092928740319831635*2^128 + 704598570*2^192,8834094938493916280 + 186344558277118172*2^64 + 3969675165181134093*2^128 + 414843175*2^192,2170882763673365556 + 6573795149087340102*2^64 + 10992512241137604993*2^128 + 509983105*2^192,5200747833293168452 + 7776529335287512945*2^64 + 17022702682848568060*2^128 + 975694506*2^192,11539658744685268964 + 8077774020965400403*2^64 + 2479777461980273883*2^128 + 827631141*2^192;\
2603409191478028034 + 10209712207115625137*2^64 + 6487157570591804085*2^128 + 175357287*2^192,11922036567663336421 + 5644211817711413736*2^64 + 15904756063204921190*2^128 + 658870929*2^192,14110799495637290312 + 28557265945912746*2^64 + 10465816471682713175*2^128 + 294375809*2^192,18416442866129468580 + 18104974731211604701*2^64 + 5880824228691731877*2^128 + 808985997*2^192,4276981558897677324 + 13487633676366337107*2^64 + 17635641947331259170*2^128 + 605710374*2^192,15732484742802392276 + 67323111023055724*2^64 + 7063259474710306015*2^128 + 568668197*2^192,16507970545820891004 + 11631593091890938987*2^64 + 9432345189589431391*2^128 + 1009782460*2^192;\
14683643275442522932 + 3494928222918458161*2^64 + 6178652343015486900*2^128 + 1001298391*2^192,7798495984878035020 + 2833084184983733684*2^64 + 1366520296236707792*2^128 + 531378613*2^192,8753762014323543646 + 8379978917436336607*2^64 + 16827705099785066535*2^128 + 1037425640*2^192,11037391984065745440 + 13854681853986202466*2^64 + 14002478212693661529*2^128 + 206188385*2^192,4658816907576994764 + 7272837396200701792*2^64 + 14730245906913838192*2^128 + 633777963*2^192,8433513375446628932 + 3044063944391364642*2^64 + 10904343747818180415*2^128 + 346238019*2^192,15341376976525492144 + 2325079468099712302*2^64 + 4165686407829451998*2^128 + 855946068*2^192;\
14738594049982207107 + 13279890454377563324*2^64 + 2992274874576660928*2^128 + 590572359*2^192,6133570924953822977 + 11915943906742873592*2^64 + 1421444476453466570*2^128 + 558799313*2^192,10300515890931403615 + 5332469187690651611*2^64 + 13886872242891289999*2^128 + 799090344*2^192,17872062973789398514 + 17356574417835940831*2^64 + 17379555981283457338*2^128 + 710891598*2^192,16886855398915971560 + 3269602344114245683*2^64 + 17144324582327357690*2^128 + 22944609*2^192,16991096843359447516 + 17020761607105589653*2^64 + 14950087184270053115*2^128 + 150258453*2^192,9543993891150092714 + 10055532022254478184*2^64 + 11998385266041473130*2^128 + 435525918*2^192;\
5438895363627485606 + 1046342838494001644*2^64 + 17650378394124786583*2^128 + 428448236*2^192,13299428951895585490 + 18258804453110276902*2^64 + 17875770321721731255*2^128 + 98175794*2^192,15781959241225588859 + 17692656702360355148*2^64 + 12659784930786810722*2^128 + 310702546*2^192,13963160149454046036 + 14444022395077027757*2^64 + 8882030577297039448*2^128 + 173696524*2^192,17472152212486108368 + 1345660012059268351*2^64 + 1299713942830412032*2^128 + 674946490*2^192,12008051408950610796 + 14012948633616169931*2^64 + 13789577622057581711*2^128 + 545466586*2^192,16718860462770920738 + 7818828530236198962*2^64 + 9822216437568135279*2^128 + 748128159*2^192;\
3302382005511804680 + 4563822900919451964*2^64 + 860125808441000889*2^128 + 327986309*2^192,4579080099501614312 + 6374190240393301787*2^64 + 15860824501976029030*2^128 + 455437763*2^192,13888574951733030160 + 17709165482092735237*2^64 + 11415980709062833823*2^128 + 420226135*2^192,14028954063129967552 + 13758871642756478017*2^64 + 13883078331269903878*2^128 + 94742532*2^192,5041738994052546624 + 5719930071284958346*2^64 + 13044228397348407424*2^128 + 162311199*2^192,5402312491481920404 + 1887508067785668704*2^64 + 14813161119013531494*2^128 + 262989013*2^192,12794223182857737856 + 17791872199741895467*2^64 + 12790289185244303399*2^128 + 85878922*2^192;\
13545122891418418256 + 16191782473645892239*2^64 + 4967653093260619185*2^128 + 247366497*2^192,3663455686903018896 + 7338873405387781045*2^64 + 18145531786741155817*2^128 + 507927994*2^192,9190902573936705015 + 15235167050719923837*2^64 + 3940419640704466412*2^128 + 32623764*2^192,9679769543742944178 + 11452098009330234159*2^64 + 10887186503545053128*2^128 + 202059836*2^192,9927676936575897474 + 15345968730172524280*2^64 + 7479013755998609423*2^128 + 270947823*2^192,18024483165157380328 + 814090641702707129*2^64 + 4096702991342805336*2^128 + 292841404*2^192,2276473780295590762 + 9964542555060520742*2^64 + 18043476321192256990*2^128 + 272085227*2^192]
/* 
This should be the matrix of frobenius!
*/ 
B = A; 
/* Freed 3411 lists. */
The sign is: -1
The characteristic polynomial is: x^7 + x^6 - 2*x^5 - 16*x^2 + 32*x + 128
Its Newton polygon is: [2, 1, 1, 1, 1, 1, 0]
Its factorization is: [x + 2, 1; x^6 - x^5 - 16*x + 64, 1]
The valuation of f-g is: 30
The valuation of subst(g,x,A) is: 30
