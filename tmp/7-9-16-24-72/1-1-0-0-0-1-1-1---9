/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
The final length of G is 31
[0, 0, 3, 0, 0]  	48	2  <--- 3
[8, 0, 0, 0, 0]  	56	2  <--- 1
[1, 0, 2, 1, 0]  	63	2 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[1, 0, 0, 3, 0]  	79	2 
[0, 3, 0, 5, 0]  	147	1 
[0, 6, 0, 4, 0]  	150	1 
[0, 2, 1, 5, 0]  	154	1 
[0, 5, 1, 4, 0]  	157	1 
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 2, 4, 0]  	164	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[7, 0, 1, 0, 3]  	65	2 
[7, 0, 0, 2, 3]  	97	2 
[7, 7, 0, 0, 3]  	112	2 
[6, 7, 0, 0, 6]  	105	2 
[5, 7, 1, 0, 9]  	114	2 
[5, 7, 0, 2, 9]  	146	2 
[4, 7, 2, 0, 12]  	123	2 
[4, 7, 0, 2, 12]  	139	2 
[3, 7, 0, 2, 15]  	132	2 
[2, 7, 1, 2, 18]  	141	2 
[0, 5, 0, 4, 238]  	141	1 
[0, 4, 0, 4, 241]  	132	1 
[0, 3, 0, 4, 244]  	123	1 
[0, 2, 0, 4, 247]  	114	1 
[0, 1, 0, 4, 250]  	105	1 
[0, 1, 2, 1, 253]  	65	1 
[0, 1, 0, 3, 253]  	81	1 
[0, 0, 1, 4, 253]  	112	1 
[0, 0, 0, 6, 253]  	144	1 
------
The gap is between 19 and 237.
Lengths: 2 2 3 3 2 3.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*y^6*z^1*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[2114016028107527808 + 9055439706693706684*2^64 + 14960053066264809043*2^128 + 778301488*2^192,5774794434388420336 + 15357205859382275923*2^64 + 17568000900180584488*2^128 + 1444928988*2^192,18136911112129413952 + 1077018752506236425*2^64 + 7776188559424935663*2^128 + 168706081*2^192,5012047638375735224 + 10053606771082974079*2^64 + 7937087352858166938*2^128 + 762816098*2^192,15000565252837044672 + 9924083246274442281*2^64 + 154998092338679412*2^128 + 1628173794*2^192,5546788415322688256 + 13827380580342156107*2^64 + 2628691416311774059*2^128 + 810522913*2^192,9905747739473019008 + 2952738668924587917*2^64 + 8255863105392593749*2^128 + 870146796*2^192;\
8607834073010009536 + 10581846882019813950*2^64 + 12140191013099854232*2^128 + 1675158520*2^192,283098753720297912 + 351982804190517066*2^64 + 12063696212771771351*2^128 + 1273151047*2^192,3581303673162364656 + 4675100680687757460*2^64 + 9828556204373117554*2^128 + 887383993*2^192,6210602073950151587 + 15020929546450978882*2^64 + 8802683317767201735*2^128 + 1633743595*2^192,9738553266610839832 + 18197761859286226156*2^64 + 5719988311697994149*2^128 + 444494872*2^192,3585854736435167840 + 1985311827155880799*2^64 + 1582196489477133704*2^128 + 1498205179*2^192,8957155885553414992 + 5236495073434401230*2^64 + 5121392229228486707*2^128 + 2142267047*2^192;\
95559036419659947 + 6258869237587208773*2^64 + 16478539416712194104*2^128 + 1011833428*2^192,2801842076500510000 + 3205359135519771786*2^64 + 5329642075180511757*2^128 + 879168473*2^192,11331687759085297664 + 10001429928654215410*2^64 + 8612952581106676899*2^128 + 533724792*2^192,5449360980954910808 + 2635663821822869043*2^64 + 14022028196217324086*2^128 + 51513914*2^192,6603868871071027904 + 9373456340229588413*2^64 + 6185064194369295833*2^128 + 937304893*2^192,913653339047370496 + 6561232349068958225*2^64 + 5858799206608429771*2^128 + 496852456*2^192,5973822666657480832 + 14194405982087969207*2^64 + 7155747908169504820*2^128 + 927756270*2^192;\
1001410477076079180 + 8083717348164915960*2^64 + 14403176630005551053*2^128 + 18673581*2^192,17009006241377295360 + 8038624178787103337*2^64 + 5951714804283754076*2^128 + 684879909*2^192,152520470222567168 + 8443978989512490289*2^64 + 15737647650389848571*2^128 + 895392365*2^192,8374735092096641696 + 16990606972665247651*2^64 + 7137989125233182598*2^128 + 1032055493*2^192,9003841109004666112 + 17074823553127006343*2^64 + 11732157484047655296*2^128 + 609920577*2^192,10923952189098473448 + 9925082321448411212*2^64 + 5513650855952916241*2^128 + 688570419*2^192,2198691017325338624 + 10955013771589921849*2^64 + 13336590519228226738*2^128 + 547825831*2^192;\
14063914888167927744 + 13433899572912843879*2^64 + 14761046798915974599*2^128 + 342837181*2^192,6658003398075224604 + 17562181683332768302*2^64 + 2608391431347658435*2^128 + 930970853*2^192,11400948162381868812 + 335819679158502473*2^64 + 18083988754494957685*2^128 + 779129104*2^192,10717796885687855241 + 10990532030410706381*2^64 + 6169526684717294476*2^128 + 1886874886*2^192,12930466795789230028 + 16327947842208932720*2^64 + 10486263114688980059*2^128 + 338656682*2^192,13015596585517619104 + 5367320365564847214*2^64 + 17734592358356092242*2^128 + 1563237854*2^192,8927137746375834480 + 12928086480812078655*2^64 + 15065517595028945921*2^128 + 666560941*2^192;\
109551202869633480 + 6800023268926217254*2^64 + 2160229140359999674*2^128 + 373335669*2^192,6048666034942533032 + 10366787243291091090*2^64 + 12408320032322893880*2^128 + 2083990354*2^192,7588245747011947520 + 5816162317967963502*2^64 + 3796095500344263079*2^128 + 1218113519*2^192,11282905525796078464 + 4120289805130970701*2^64 + 11110047480269552106*2^128 + 253113287*2^192,2689688604218552648 + 14276785329134752488*2^64 + 9564550789359357469*2^128 + 1572874463*2^192,12480953407056820112 + 4757370052283937689*2^64 + 4088902438838184996*2^128 + 1353271984*2^192,9898453918048715656 + 1675800407940915328*2^64 + 12437242053131777494*2^128 + 1021569821*2^192;\
18422512964671010312 + 16218142077069513501*2^64 + 10014079057216774182*2^128 + 360106963*2^192,14501870751162947732 + 1787346757600780832*2^64 + 16131204845557975869*2^128 + 2060432556*2^192,3247687677850865664 + 2018963318064441793*2^64 + 8061362733921976037*2^128 + 388759568*2^192,17151993274095392512 + 7804790647517982728*2^64 + 18408623497486659850*2^128 + 548504642*2^192,9661834149760782500 + 16145158553818340263*2^64 + 15871114821744952933*2^128 + 1992118776*2^192,2742003511188588224 + 6453703661673420141*2^64 + 14501067782355197418*2^128 + 1069341029*2^192,11592311688592268744 + 8379594163140291141*2^64 + 6219812897914085936*2^128 + 2079285053*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4136 lists. */
