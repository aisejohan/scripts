/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 77
[2, 2, 1, 0, 0]  	48	3 
[2, 2, 0, 1, 0]  	56	2 
[9, 0, 0, 0, 0]  	63	3  <--- 1
[8, 1, 0, 0, 0]  	65	2 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[6, 0, 3, 0, 0]  	90	3 
[6, 0, 2, 1, 0]  	98	2 
[2, 0, 1, 3, 0]  	102	3 
[4, 0, 5, 0, 0]  	108	3 
[2, 0, 0, 4, 0]  	110	2 
[6, 0, 0, 3, 0]  	114	2 
[4, 0, 4, 1, 0]  	116	4 
[1, 4, 5, 0, 0]  	123	3 
[2, 0, 7, 0, 0]  	126	4 
[2, 0, 6, 1, 0]  	134	3 
[1, 2, 7, 0, 0]  	137	4 
[1, 6, 2, 2, 0]  	141	2 
[0, 5, 6, 0, 0]  	141	2 
[1, 2, 6, 1, 0]  	145	2 
[1, 2, 3, 3, 0]  	145	2 
[1, 2, 0, 5, 0]  	145	2 
[1, 4, 2, 3, 0]  	147	1 
[0, 3, 6, 1, 0]  	147	1 
[0, 3, 3, 3, 0]  	147	1 
[0, 3, 0, 5, 0]  	147	1 
[0, 6, 3, 2, 0]  	150	1 
[0, 6, 0, 4, 0]  	150	1 
[1, 0, 9, 0, 0]  	151	3 
[0, 2, 7, 1, 0]  	154	1 
[0, 2, 4, 3, 0]  	154	1 
[0, 2, 1, 5, 0]  	154	1 
[1, 4, 4, 2, 0]  	155	2 
[1, 4, 1, 4, 0]  	155	2 
[0, 3, 8, 0, 0]  	155	3 
[0, 5, 4, 2, 0]  	157	1 
[0, 5, 1, 4, 0]  	157	1 
[1, 0, 8, 1, 0]  	159	1 
[1, 0, 5, 3, 0]  	159	1 
[1, 0, 2, 5, 0]  	159	1 
[1, 1, 0, 6, 0]  	160	3 
[0, 1, 8, 1, 0]  	161	1 
[0, 1, 5, 3, 0]  	161	1 
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 5, 2, 0]  	164	1 
[0, 4, 2, 4, 0]  	164	1 
[0, 0, 9, 1, 0]  	168	1 
[0, 0, 6, 3, 0]  	168	1 
[0, 0, 3, 5, 0]  	168	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[0, 1, 10, 0, 0]  	169	2 
[0, 0, 12, 0, 0]  	192	1  <--- 3
[0, 0, 3, 1, 1]  	72	2 
[1, 3, 0, 4, 1]  	130	4 
[0, 6, 5, 0, 1]  	134	2 
[1, 1, 2, 4, 1]  	144	3 
[0, 4, 7, 0, 1]  	148	3 
[1, 1, 1, 5, 1]  	152	4 
[0, 2, 9, 0, 1]  	162	3 
[0, 0, 11, 0, 1]  	176	4 
[1, 5, 1, 2, 2]  	116	3 
[1, 3, 2, 3, 2]  	138	3 
[1, 0, 1, 5, 2]  	143	3 
[0, 2, 0, 5, 251]  	138	1 
[0, 4, 2, 3, 251]  	140	1 
[0, 7, 2, 2, 251]  	143	1 
[0, 0, 2, 5, 251]  	152	1 
[0, 4, 1, 4, 252]  	148	1 
[0, 6, 2, 2, 253]  	134	1 
[0, 4, 5, 0, 254]  	116	1 
[0, 0, 0, 5, 254]  	120	1 
[0, 4, 1, 3, 254]  	124	1 
[0, 6, 0, 3, 254]  	126	1 
[0, 2, 7, 0, 254]  	130	2 
[0, 0, 9, 0, 254]  	144	1 
[0, 0, 0, 3, 255]  	72	1 
[0, 6, 3, 0, 255]  	102	2 
[0, 6, 2, 1, 255]  	110	1 
------
The gap is between 3 and 250.
Lengths: 2 2 3 5 2 6.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^10
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[6957635609510045472 + 4509242213078356935*2^64 + 12736709117349576170*2^128 + 1482312727*2^192,13612765978076407276 + 10774549987433103851*2^64 + 12780668629618222465*2^128 + 1072505229*2^192,12449260608419744092 + 3509663466020655128*2^64 + 15907995100363197845*2^128 + 418822145*2^192,3699414652055331820 + 6074400278171140862*2^64 + 9853570622440105385*2^128 + 1497728737*2^192,11638906679665561644 + 13934316015180835480*2^64 + 806398268896769169*2^128 + 1400790321*2^192,8622152348103885712 + 16367273550279863919*2^64 + 10275694625864609230*2^128 + 945992854*2^192,14762415542193221260 + 1831857699670328970*2^64 + 4632970745828673262*2^128 + 189027803*2^192;\
4373786787537190118 + 8603600705027888975*2^64 + 13283778928215099869*2^128 + 1466644533*2^192,13527447396739653834 + 2374978077787685905*2^64 + 11779551252963213936*2^128 + 1261927942*2^192,10586340203734201996 + 15502209928121034259*2^64 + 1657412611856909636*2^128 + 700671397*2^192,8245919294160215132 + 6819604448600088087*2^64 + 10010624370585493972*2^128 + 485998187*2^192,3411303063160088474 + 10352655268194559988*2^64 + 1552845817045317052*2^128 + 1973432880*2^192,2556378512001318970 + 12645694863090548207*2^64 + 4286853296751572244*2^128 + 110725111*2^192,1563777424424095574 + 10987957969117242584*2^64 + 10332627518605505478*2^128 + 206441770*2^192;\
0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 845060719*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192;\
267969161213582484 + 6298581165087125350*2^64 + 7715306104011880027*2^128 + 1801730542*2^192,14668522289907619768 + 8492673377095403351*2^64 + 4220331681183035992*2^128 + 1606563391*2^192,7108601610692837584 + 5732675067340116240*2^64 + 13885120360938785436*2^128 + 354356737*2^192,366982477776338324 + 15895866027067194041*2^64 + 405224035291006511*2^128 + 1283170708*2^192,3908402389330231000 + 15371303226047973395*2^64 + 9400013716432718470*2^128 + 252478039*2^192,9059652892039142460 + 15872762555992122585*2^64 + 14452787626022940486*2^128 + 892959259*2^192,595361678655379672 + 906906151501129338*2^64 + 12133280430025084088*2^128 + 947331084*2^192;\
2622749617948503209 + 1707315140826335891*2^64 + 893355356555150742*2^128 + 953342992*2^192,16465311722093318807 + 16705581461497566541*2^64 + 11939698104126686993*2^128 + 1711658885*2^192,4034804416119950212 + 3227654858497453173*2^64 + 7649546637329213499*2^128 + 461959290*2^192,13594451064986967412 + 2118085741620185864*2^64 + 9221126872021197238*2^128 + 67851565*2^192,16168051096649626741 + 11403902129844791074*2^64 + 6138217979588227995*2^128 + 201518883*2^192,12390571398919996929 + 3742903561656476963*2^64 + 4905322271394869923*2^128 + 1559592189*2^192,15593981807481041043 + 7725538654822604008*2^64 + 12078993616664450262*2^128 + 1273488179*2^192;\
3572341333937587616 + 8194709388049300694*2^64 + 4761641437705905530*2^128 + 516992907*2^192,14065090450789592256 + 1228927482640083313*2^64 + 1561466171198609412*2^128 + 179692502*2^192,8009967025131622400 + 11923575524453565347*2^64 + 5339274716743018801*2^128 + 694293512*2^192,6409213573688446976 + 13430561892224734477*2^64 + 578427512408165512*2^128 + 499568397*2^192,5264196748749488064 + 14586690537042416186*2^64 + 15855665693139747109*2^128 + 634160864*2^192,8897994891809869352 + 18133945858964280012*2^64 + 18444491382865756669*2^128 + 274965380*2^192,9756498208170941376 + 12433049823832534082*2^64 + 375649040234092133*2^128 + 982654227*2^192;\
2630081865593146573 + 9886487642486852689*2^64 + 6146446401219636090*2^128 + 259688052*2^192,1140468308641901095 + 10152108996079475311*2^64 + 1676531256383149360*2^128 + 2138853670*2^192,10671859193740710172 + 4402304638374659409*2^64 + 5876404753163672457*2^128 + 2057414170*2^192,7807109972886260908 + 3292734637561591054*2^64 + 2422100002853396814*2^128 + 1890465502*2^192,7155811959134941573 + 3468757830901346701*2^64 + 17469373465917982980*2^128 + 133058474*2^192,9644140653902152485 + 6258522766843322547*2^64 + 2389969346975700225*2^128 + 413781816*2^192,892816057645266915 + 13770795773250421933*2^64 + 14236565087039152118*2^128 + 535893599*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 2245 lists. */
