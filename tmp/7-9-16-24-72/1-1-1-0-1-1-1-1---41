/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 133
[3, 3, 0, 0, 0]  	48	4 
[8, 0, 0, 0, 0]  	56	3  <--- 1
[3, 2, 0, 1, 0]  	63	4 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[2, 1, 2, 1, 0]  	79	4 
[6, 1, 2, 0, 0]  	83	5 
[1, 1, 3, 1, 0]  	88	4 
[3, 0, 0, 3, 0]  	93	4 
[2, 1, 0, 3, 0]  	95	4 
[7, 0, 3, 0, 0]  	97	5 
[5, 2, 3, 0, 0]  	101	8 
[2, 0, 4, 1, 0]  	102	5 
[7, 1, 0, 2, 0]  	106	6 
[4, 2, 4, 0, 0]  	110	7 
[2, 4, 1, 2, 0]  	114	6 
[6, 1, 1, 2, 0]  	115	6 
[2, 6, 0, 2, 0]  	116	5 
[4, 1, 5, 0, 0]  	117	6 
[2, 0, 2, 3, 0]  	118	5 
[1, 1, 2, 3, 0]  	120	4 
[1, 4, 2, 2, 0]  	123	4 
[4, 0, 6, 0, 0]  	124	4 
[2, 7, 3, 0, 0]  	125	5 
[1, 0, 6, 1, 0]  	127	4 
[1, 0, 3, 3, 0]  	127	4 
[1, 1, 7, 0, 0]  	128	5 
[0, 1, 6, 1, 0]  	129	3 
[1, 3, 0, 4, 0]  	130	4 
[1, 4, 1, 3, 0]  	131	3 
[2, 6, 4, 0, 0]  	132	5 
[3, 0, 7, 0, 0]  	133	3 
[1, 6, 0, 3, 0]  	133	3 
[2, 0, 0, 5, 0]  	134	4 
[1, 1, 0, 5, 0]  	136	3 
[0, 0, 7, 1, 0]  	136	3 
[1, 2, 1, 4, 0]  	137	4 
[0, 2, 3, 3, 0]  	138	2 
[1, 6, 5, 0, 0]  	141	2 
[0, 5, 3, 2, 0]  	141	2 
[2, 0, 8, 0, 0]  	142	3 
[1, 0, 1, 5, 0]  	143	3 
[0, 1, 4, 3, 0]  	145	2 
[0, 3, 0, 5, 0]  	147	1 
[0, 4, 4, 2, 0]  	148	2 
[0, 6, 6, 0, 0]  	150	1 
[0, 6, 0, 4, 0]  	150	1 
[1, 0, 9, 0, 0]  	151	3 
[1, 0, 0, 6, 0]  	151	3 
[0, 2, 1, 5, 0]  	154	1 
[0, 3, 8, 0, 0]  	155	2 
[0, 3, 5, 2, 0]  	155	2 
[0, 5, 7, 0, 0]  	157	1 
[0, 5, 1, 4, 0]  	157	1 
[0, 0, 10, 0, 0]  	160	3  <--- 3
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 2, 4, 0]  	164	1 
[0, 0, 6, 3, 0]  	168	1 
[0, 0, 3, 5, 0]  	168	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[2, 2, 1, 1, 1]  	72	4 
[7, 1, 1, 1, 1]  	98	8 
[7, 0, 2, 1, 1]  	105	7 
[5, 0, 3, 1, 1]  	107	7 
[5, 1, 4, 0, 1]  	108	7 
[1, 0, 5, 1, 1]  	111	4 
[2, 4, 4, 0, 1]  	114	6 
[3, 2, 5, 0, 1]  	119	5 
[6, 0, 5, 0, 1]  	122	5 
[2, 0, 7, 0, 1]  	126	5 
[2, 0, 1, 4, 1]  	126	4 
[1, 4, 6, 0, 1]  	139	4 
[0, 3, 7, 0, 1]  	139	3 
[0, 4, 5, 1, 1]  	140	2 
[0, 7, 5, 0, 1]  	143	2 
[0, 2, 8, 0, 1]  	146	3 
[0, 0, 5, 3, 1]  	152	2 
[0, 1, 9, 0, 1]  	153	3 
[5, 1, 1, 2, 2]  	108	7 
[2, 3, 5, 0, 2]  	121	6 
[1, 4, 5, 0, 2]  	123	4 
[3, 1, 6, 0, 2]  	126	6 
[0, 4, 6, 0, 2]  	132	3 
[1, 7, 4, 0, 2]  	134	4 
[1, 0, 8, 0, 2]  	135	5 
[7, 0, 1, 0, 3]  	65	4 
[6, 0, 3, 0, 3]  	90	5 
[5, 1, 3, 0, 3]  	92	6 
[7, 0, 0, 2, 3]  	97	4 
[6, 0, 2, 1, 3]  	98	7 
[6, 1, 0, 2, 3]  	99	6 
[3, 1, 5, 0, 3]  	110	6 
[2, 6, 3, 0, 3]  	116	5 
[3, 0, 6, 0, 3]  	117	6 
[1, 6, 4, 0, 3]  	125	4 
[1, 3, 6, 0, 3]  	130	4 
[0, 0, 9, 0, 3]  	144	4 
[4, 1, 4, 0, 4]  	101	7 
[2, 5, 3, 0, 4]  	107	6 
[2, 2, 5, 0, 4]  	112	5 
[5, 0, 5, 0, 4]  	115	5 
[2, 1, 6, 0, 4]  	119	5 
[4, 0, 3, 2, 4]  	124	4 
[1, 7, 1, 2, 4]  	134	3 
[2, 3, 4, 0, 5]  	105	7 
[1, 2, 6, 0, 6]  	121	5 
[1, 3, 5, 0, 8]  	114	5 
[1, 3, 2, 2, 248]  	114	3 
[1, 2, 2, 2, 250]  	105	3 
[1, 2, 0, 4, 250]  	121	4 
[0, 6, 5, 0, 251]  	134	2 
[1, 2, 2, 1, 252]  	81	3 
[2, 5, 0, 2, 252]  	107	3 
[1, 1, 0, 4, 252]  	112	4 
[1, 4, 0, 3, 252]  	115	3 
[1, 0, 2, 4, 252]  	135	3 
[2, 3, 0, 1, 253]  	65	3 
[1, 2, 0, 3, 253]  	97	3 
[2, 0, 0, 4, 253]  	110	3 
[1, 0, 4, 2, 253]  	119	3 
[0, 0, 6, 2, 253]  	144	3 
[1, 5, 1, 2, 254]  	116	3 
[1, 0, 7, 0, 254]  	119	4 
[0, 3, 3, 2, 254]  	123	2 
[0, 2, 7, 0, 254]  	130	3 
[0, 4, 0, 4, 254]  	132	1 
[1, 1, 2, 1, 255]  	72	3 
[0, 2, 2, 2, 255]  	98	1 
[4, 1, 1, 2, 255]  	101	6 
[0, 1, 3, 2, 255]  	105	2 
[1, 0, 2, 3, 255]  	111	3 
[0, 2, 0, 4, 255]  	114	1 
[0, 1, 7, 0, 255]  	121	3 
[0, 0, 2, 5, 255]  	152	1 
------
The gap is between 9 and 247.
Lengths: 2 2 3 3 2 2.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 0.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[17920714956138659704 + 12441833791343276454*2^64 + 3358063645027210401*2^128 + 2069138111*2^192,7295976603414325638 + 4819364422627733744*2^64 + 16651837869769319392*2^128 + 964660652*2^192,5876672144995308344 + 11202350308115574246*2^64 + 6729040956597681775*2^128 + 538877579*2^192,12968367474515629544 + 437862076359711616*2^64 + 5958259473824316647*2^128 + 205165457*2^192,2886159023002195280 + 16601966629413947097*2^64 + 6311328355833589855*2^128 + 263261250*2^192,8809514784503386208 + 13437106716874736940*2^64 + 130800954019407998*2^128 + 1483295557*2^192,17403453174853636400 + 13473263273438376402*2^64 + 6119414527157856599*2^128 + 181323637*2^192;\
6732242415309835538 + 11692258978090771594*2^64 + 10859285759555052784*2^128 + 553320639*2^192,3464054731536651826 + 9242597356096611409*2^64 + 15018104124501891966*2^128 + 438635134*2^192,10322187383940384720 + 12403945998302672481*2^64 + 12746121399833461773*2^128 + 1100688374*2^192,12726307037521043896 + 4100004814706920861*2^64 + 17257317766886736933*2^128 + 1788039532*2^192,940223100808243768 + 15509327944045279804*2^64 + 5734511140943080915*2^128 + 1230841250*2^192,15070431291536846448 + 4016691140028754254*2^64 + 15117748990394758826*2^128 + 1061540817*2^192,1893068502216769632 + 12741774925534410598*2^64 + 365160145703068093*2^128 + 814577078*2^192;\
15322061331805503540 + 9255127021016259482*2^64 + 1011360410508891271*2^128 + 1886206491*2^192,15266300563709048238 + 3614262379304206616*2^64 + 5542934816488161545*2^128 + 892985250*2^192,10995180249170640932 + 5541131798746021639*2^64 + 3606309445757558645*2^128 + 1902047632*2^192,11919343795500692828 + 13604753540894784583*2^64 + 10807735699150444554*2^128 + 1720366081*2^192,17923465297549588084 + 12740147869319698673*2^64 + 3024903632427670621*2^128 + 1124464290*2^192,2271153020434552936 + 11107416119143376072*2^64 + 484723587371096317*2^128 + 1238218702*2^192,15441263022551843264 + 7931320716643697231*2^64 + 746264610448690958*2^128 + 1774660505*2^192;\
4670788112878937160 + 12360591669750496989*2^64 + 403547182239104201*2^128 + 900305507*2^192,13385506145079792430 + 6306581715158424719*2^64 + 13655552883722069492*2^128 + 920362736*2^192,3845157734247534880 + 15014195756331369646*2^64 + 13091304306875569321*2^128 + 1899143101*2^192,15077875298084060572 + 11055007779454930618*2^64 + 9085664810603563032*2^128 + 1524138182*2^192,17539468460275082792 + 4208550938901058134*2^64 + 8292111915095603451*2^128 + 260884916*2^192,15856775182211015824 + 6665903136866908973*2^64 + 3883945215179853518*2^128 + 1663419070*2^192,11085776398744931808 + 12631893075024389774*2^64 + 3586368135709455976*2^128 + 527632497*2^192;\
9060851220859315583 + 14663886015554111791*2^64 + 2802101102114648553*2^128 + 804720772*2^192,14317823026754020507 + 5119951759423231754*2^64 + 8774750601898084881*2^128 + 1002263969*2^192,2376317004851731924 + 7531698391021170327*2^64 + 9801094190382504264*2^128 + 1641341520*2^192,17197765154906600380 + 15266243933450717222*2^64 + 16468310424509824496*2^128 + 1921628975*2^192,17072650837369283548 + 9457184173796062700*2^64 + 5556107815594821398*2^128 + 1839456280*2^192,2105368129942942736 + 1803078314048232219*2^64 + 2711651609778460162*2^128 + 1634316050*2^192,10410420073873657768 + 17544309625204655721*2^64 + 964431879959856070*2^128 + 1826305863*2^192;\
11287791529886122204 + 14257046817029828929*2^64 + 3570073456054126743*2^128 + 684018397*2^192,10302788894886738064 + 10291536153911915571*2^64 + 16617716301260055110*2^128 + 1473716401*2^192,4956674034231638560 + 16207804380472811933*2^64 + 11982628204444461707*2^128 + 530582538*2^192,767945207384162200 + 17458732317786357085*2^64 + 14707926774622285618*2^128 + 836870371*2^192,12394345329209164624 + 13108099079494665427*2^64 + 2658673842040573551*2^128 + 1110463510*2^192,4420976647747454872 + 7530293132859107205*2^64 + 773346580350060526*2^128 + 165297315*2^192,12852282095874481432 + 8038520842682926471*2^64 + 17991601182161614061*2^128 + 1910992794*2^192;\
10224528527456309384 + 14197169006776312191*2^64 + 6824289497951651321*2^128 + 1540150813*2^192,507587038923190596 + 3205183792383018363*2^64 + 10067672211308363542*2^128 + 1937193639*2^192,346190359745497152 + 7572404277087122262*2^64 + 8113596617976763738*2^128 + 1276969198*2^192,10028506471210796392 + 15592636223173575512*2^64 + 3321723613586275976*2^128 + 767895507*2^192,8137724302567402384 + 2664618384309955667*2^64 + 4641353421204011830*2^128 + 872484447*2^192,15139312325021336680 + 2420531238191753149*2^64 + 8595643626523462055*2^128 + 1748371954*2^192,9129959335302578464 + 11970484923685083304*2^64 + 13941513930262559834*2^128 + 1201160746*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4260 lists. */
