/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
The final length of G is 122
[2, 2, 1, 0, 0]  	48	3 
[8, 0, 0, 0, 0]  	56	3  <--- 1
[3, 2, 0, 1, 0]  	63	4 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[6, 0, 3, 0, 0]  	90	4 
[2, 1, 0, 3, 0]  	95	4 
[2, 0, 1, 3, 0]  	102	3 
[7, 0, 2, 1, 0]  	105	4 
[6, 1, 2, 1, 0]  	107	5 
[6, 0, 0, 3, 0]  	114	5 
[4, 0, 4, 1, 0]  	116	5 
[2, 6, 0, 2, 0]  	116	5 
[4, 1, 5, 0, 0]  	117	5 
[3, 0, 0, 4, 0]  	117	4 
[1, 1, 2, 3, 0]  	120	4 
[1, 2, 0, 4, 0]  	121	4 
[1, 4, 5, 0, 0]  	123	4 
[4, 0, 6, 0, 0]  	124	5 
[1, 6, 4, 0, 0]  	125	4 
[2, 0, 7, 0, 0]  	126	4 
[1, 4, 1, 3, 0]  	131	3 
[0, 4, 6, 0, 0]  	132	3 
[2, 0, 6, 1, 0]  	134	3 
[2, 0, 0, 5, 0]  	134	3 
[1, 1, 0, 5, 0]  	136	4 
[1, 2, 7, 0, 0]  	137	5 
[0, 2, 6, 1, 0]  	138	3 
[0, 3, 7, 0, 0]  	139	3 
[1, 5, 4, 1, 0]  	140	3 
[1, 6, 2, 2, 0]  	141	2 
[1, 0, 4, 3, 0]  	143	3 
[1, 0, 1, 5, 0]  	143	2 
[0, 0, 9, 0, 0]  	144	4  <--- 3
[0, 2, 8, 0, 0]  	146	3 
[0, 3, 3, 3, 0]  	147	1 
[0, 3, 0, 5, 0]  	147	1 
[0, 4, 4, 2, 0]  	148	2 
[0, 6, 3, 2, 0]  	150	1 
[0, 6, 0, 4, 0]  	150	1 
[0, 0, 8, 1, 0]  	152	2 
[0, 2, 4, 3, 0]  	154	1 
[0, 2, 1, 5, 0]  	154	1 
[0, 5, 1, 4, 0]  	157	1 
[0, 1, 5, 3, 0]  	161	1 
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 2, 4, 0]  	164	1 
[0, 0, 6, 3, 0]  	168	1 
[0, 0, 3, 5, 0]  	168	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[2, 1, 2, 1, 1]  	79	4 
[1, 1, 3, 1, 1]  	88	4 
[7, 1, 1, 1, 1]  	98	5 
[5, 0, 3, 1, 1]  	107	5 
[5, 1, 1, 2, 1]  	108	6 
[1, 4, 2, 2, 1]  	123	4 
[3, 0, 5, 1, 1]  	125	4 
[1, 0, 3, 3, 1]  	127	4 
[1, 7, 1, 2, 1]  	134	3 
[0, 5, 3, 2, 1]  	141	2 
[1, 0, 7, 1, 1]  	143	3 
[0, 1, 7, 1, 1]  	145	3 
[0, 3, 5, 2, 1]  	155	2 
[6, 0, 2, 1, 2]  	98	5 
[5, 0, 0, 3, 2]  	107	5 
[1, 0, 5, 1, 2]  	111	4 
[2, 0, 4, 2, 2]  	126	4 
[1, 6, 0, 3, 2]  	133	3 
[0, 4, 5, 1, 2]  	140	2 
[0, 7, 5, 0, 2]  	143	2 
[0, 1, 4, 3, 2]  	145	2 
[1, 0, 0, 6, 2]  	151	3 
[0, 0, 5, 3, 2]  	152	2 
[7, 0, 1, 0, 3]  	65	4 
[5, 0, 3, 0, 3]  	83	5 
[7, 0, 0, 2, 3]  	97	4 
[3, 1, 5, 0, 3]  	110	5 
[7, 7, 0, 0, 3]  	112	4 
[3, 0, 6, 0, 3]  	117	5 
[1, 0, 7, 0, 3]  	119	4 
[4, 0, 3, 2, 3]  	124	4 
[0, 1, 6, 1, 3]  	129	3 
[1, 3, 6, 0, 3]  	130	4 
[0, 2, 3, 3, 3]  	138	2 
[4, 1, 1, 2, 4]  	101	6 
[0, 0, 7, 1, 5]  	136	3 
[6, 7, 0, 0, 6]  	105	4 
[1, 3, 5, 0, 9]  	114	4 
[1, 3, 2, 2, 248]  	114	3 
[1, 2, 2, 2, 251]  	105	3 
[0, 2, 0, 5, 252]  	138	1 
[2, 3, 0, 1, 253]  	65	3 
[1, 2, 0, 3, 253]  	97	3 
[2, 0, 0, 4, 253]  	110	3 
[1, 1, 0, 4, 253]  	112	3 
[0, 6, 0, 3, 253]  	126	1 
[1, 0, 0, 5, 253]  	127	1 
[0, 1, 0, 5, 253]  	129	1 
[0, 2, 7, 0, 253]  	130	3 
[0, 5, 4, 1, 253]  	133	2 
[0, 5, 1, 3, 253]  	133	1 
[0, 0, 4, 3, 253]  	136	2 
[0, 0, 1, 5, 253]  	136	1 
[0, 4, 2, 3, 253]  	140	1 
[0, 7, 2, 2, 253]  	143	1 
[0, 0, 0, 6, 253]  	144	1 
[1, 2, 2, 1, 254]  	81	3 
[1, 0, 2, 3, 254]  	111	3 
[1, 7, 3, 0, 254]  	118	4 
[1, 0, 1, 4, 254]  	119	2 
[1, 0, 0, 3, 255]  	79	1 
[0, 1, 0, 3, 255]  	81	1 
[3, 0, 5, 0, 255]  	101	4 
[0, 6, 3, 0, 255]  	102	2 
[0, 6, 2, 1, 255]  	110	1 
[0, 0, 1, 4, 255]  	112	1 
[5, 0, 2, 2, 255]  	115	4 
[0, 4, 5, 0, 255]  	116	1 
[0, 5, 3, 1, 255]  	117	2 
[1, 0, 4, 2, 255]  	119	3 
[0, 0, 3, 3, 255]  	120	2 
[0, 4, 4, 1, 255]  	124	1 
[0, 3, 5, 1, 255]  	131	2 
------
The gap is between 10 and 247.
Lengths: 2 2 3 4 2 4.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[1196517389487624988 + 889105134614043375*2^64 + 15815868439009735365*2^128 + 17160504233*2^192,7575817830235379128 + 2118017219299519983*2^64 + 6685443819689656052*2^128 + 13430167658*2^192,7952072684806616488 + 1032024359271718351*2^64 + 410658280038930761*2^128 + 9083189674*2^192,6933599375477293928 + 9132626271339893618*2^64 + 11956319777600679270*2^128 + 13931137855*2^192,10488443832248442616 + 681466742450819964*2^64 + 7580364854273196186*2^128 + 5755278661*2^192,12299013617399389272 + 14062855642283780661*2^64 + 14419284699949345583*2^128 + 4936348216*2^192,16513670240548426888 + 8592666434693015169*2^64 + 7680408350411191893*2^128 + 332978047*2^192;\
7575601171492249631 + 6049901271821395820*2^64 + 15444233643566902306*2^128 + 8367734031*2^192,593963943424976430 + 4824714799431781377*2^64 + 4889341730314018204*2^128 + 16043430086*2^192,12229405828179160090 + 15966653102486064629*2^64 + 3457205858916037410*2^128 + 9267360403*2^192,14283240123530775482 + 6169087581325492327*2^64 + 5357376129788510758*2^128 + 5569457368*2^192,16129372349417745134 + 8576404472350103448*2^64 + 16456438355781695848*2^128 + 11492110311*2^192,15124204369005567446 + 5108238003460295799*2^64 + 4886151013927162673*2^128 + 11249697138*2^192,17875379217790326018 + 12907389479304000172*2^64 + 2785428921796921732*2^128 + 3372994761*2^192;\
10647067181715535418 + 11392007887710857424*2^64 + 12307955950007058698*2^128 + 1862748104*2^192,9527023462469275860 + 4858948470414268534*2^64 + 16829398175525463468*2^128 + 8160233854*2^192,16901792125057491836 + 3630164823205721041*2^64 + 6769454566729882017*2^128 + 6289050727*2^192,4338226311686387004 + 17833466770581128849*2^64 + 6587137270343751814*2^128 + 1534314199*2^192,7172926390503348180 + 16761171186453807344*2^64 + 11748188921508614377*2^128 + 3845923946*2^192,14005815212353280932 + 11948451977834967057*2^64 + 13830496974583626598*2^128 + 6664350884*2^192,5431157870964563276 + 167549990552641228*2^64 + 8380388868491038417*2^128 + 12306061640*2^192;\
17966675273120090466 + 16120403959423328156*2^64 + 14044748608949662917*2^128 + 14045814793*2^192,10672612780278054020 + 5816488857475469546*2^64 + 13774067824385412974*2^128 + 6590865754*2^192,3937359104958561868 + 2709204672822265705*2^64 + 9497501222457939878*2^128 + 13523435403*2^192,754284390232508364 + 13048023038405562559*2^64 + 17437545519037691088*2^128 + 4268162891*2^192,2657944251079936612 + 2624841543328452246*2^64 + 9471501302236177320*2^128 + 8322253575*2^192,16347616574456045524 + 4628202207695348427*2^64 + 5030782313095188880*2^128 + 7386963594*2^192,5534756523926767644 + 13366550692448407243*2^64 + 12818476877820169869*2^128 + 13239218203*2^192;\
1150407259896098274 + 13219737488591883474*2^64 + 17407714839719723494*2^128 + 806504495*2^192,14629692786746986084 + 70111433211545184*2^64 + 7842235880824757219*2^128 + 7675273327*2^192,11372242433357718188 + 6351597690848117114*2^64 + 11749413429168947391*2^128 + 14627051847*2^192,9223197665095082988 + 12478272082761440182*2^64 + 13785936815046192878*2^128 + 3954086595*2^192,2068158472494823332 + 16239536882400537538*2^64 + 4726719649589989973*2^128 + 7813479048*2^192,3401000218751292212 + 4771700178110841913*2^64 + 15272100427453020202*2^128 + 6226458751*2^192,10816685048593672764 + 18021480791971176798*2^64 + 8245593620945071928*2^128 + 16399002774*2^192;\
13571528615137659032 + 11936631978729424693*2^64 + 973239063089520094*2^128 + 8472257718*2^192,13460978329424900528 + 16669286337680626184*2^64 + 9686882885444559492*2^128 + 7175688556*2^192,2353999441941024144 + 13642900387126222209*2^64 + 710478259628465222*2^128 + 3484449328*2^192,17307419175624445072 + 8829951958878623949*2^64 + 7502806485063163366*2^128 + 3539351933*2^192,5914967972551777200 + 1093056259073583797*2^64 + 3206717710451563449*2^128 + 8060741020*2^192,11218120967328635696 + 2141689036557540763*2^64 + 9926081476243406058*2^128 + 2975376869*2^192,13124651429997050320 + 8455818047094049550*2^64 + 9639251324958732113*2^128 + 2208740755*2^192;\
8615829652088977291 + 16266056333060774070*2^64 + 3555002769165245876*2^128 + 16921028067*2^192,7763469984911725286 + 12444770349309382318*2^64 + 6692323345663207293*2^128 + 10105122042*2^192,6922994393649215362 + 5698610041781441498*2^64 + 14450005617790774617*2^128 + 6396858717*2^192,1086774553455883010 + 17107921065167399196*2^64 + 15019453715429912933*2^128 + 11421040138*2^192,6816397492565285990 + 274805303895235151*2^64 + 8322634327340969824*2^128 + 11000959993*2^192,285268204115736302 + 12538412456206023972*2^64 + 12813849718854712944*2^128 + 4901884980*2^192,17423864204779833482 + 17611803259190855450*2^64 + 2406443679782786138*2^128 + 1394895897*2^192]
/* 
This matrix times 2^(-4) should be the matrix of frobenius.
*/ 
B = 2^(-4) * A; 
/* Freed 4210 lists. */
