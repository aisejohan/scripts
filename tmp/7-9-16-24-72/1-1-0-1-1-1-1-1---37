/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
The final length of G is 117
[2, 2, 1, 0, 0]  	48	4 
[8, 0, 0, 0, 0]  	56	4  <--- 1
[3, 2, 0, 1, 0]  	63	3 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[2, 1, 2, 1, 0]  	79	4 
[7, 1, 2, 0, 0]  	90	6 
[2, 1, 0, 3, 0]  	95	4 
[7, 0, 3, 0, 0]  	97	3 
[6, 1, 0, 2, 0]  	99	6 
[2, 0, 1, 3, 0]  	102	4 
[5, 1, 4, 0, 0]  	108	6 
[1, 0, 5, 1, 0]  	111	4 
[2, 6, 0, 2, 0]  	116	5 
[4, 1, 5, 0, 0]  	117	6 
[3, 0, 0, 4, 0]  	117	3 
[1, 1, 2, 3, 0]  	120	4 
[1, 2, 3, 2, 0]  	121	4 
[1, 2, 0, 4, 0]  	121	4 
[1, 4, 2, 2, 0]  	123	4 
[4, 0, 6, 0, 0]  	124	5 
[2, 0, 7, 0, 0]  	126	4 
[2, 0, 4, 2, 0]  	126	4 
[0, 1, 6, 1, 0]  	129	3 
[1, 4, 4, 1, 0]  	131	3 
[1, 4, 1, 3, 0]  	131	3 
[1, 6, 3, 1, 0]  	133	3 
[1, 6, 0, 3, 0]  	133	3 
[2, 0, 0, 5, 0]  	134	3 
[1, 7, 4, 0, 0]  	134	4 
[1, 1, 0, 5, 0]  	136	3 
[0, 0, 7, 1, 0]  	136	3 
[1, 6, 5, 0, 0]  	141	3 
[0, 5, 3, 2, 0]  	141	2 
[1, 0, 4, 3, 0]  	143	3 
[1, 0, 1, 5, 0]  	143	3 
[1, 1, 8, 0, 0]  	144	5 
[0, 1, 4, 3, 0]  	145	2 
[0, 3, 3, 3, 0]  	147	1 
[0, 3, 0, 5, 0]  	147	1 
[0, 4, 4, 2, 0]  	148	2 
[0, 6, 6, 0, 0]  	150	1 
[0, 6, 0, 4, 0]  	150	1 
[1, 0, 9, 0, 0]  	151	3 
[1, 0, 3, 4, 0]  	151	3 
[1, 0, 0, 6, 0]  	151	3 
[0, 2, 1, 5, 0]  	154	1 
[1, 4, 7, 0, 0]  	155	2 
[0, 3, 5, 2, 0]  	155	2 
[0, 5, 7, 0, 0]  	157	1 
[0, 5, 1, 4, 0]  	157	1 
[0, 0, 10, 0, 0]  	160	3  <--- 3
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 8, 0, 0]  	164	1 
[0, 4, 2, 4, 0]  	164	1 
[0, 0, 6, 3, 0]  	168	1 
[0, 0, 3, 5, 0]  	168	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[0, 3, 9, 0, 0]  	171	1 
[1, 1, 3, 1, 1]  	88	4 
[6, 0, 2, 1, 1]  	98	5 
[5, 0, 3, 1, 1]  	107	6 
[6, 0, 0, 3, 1]  	114	6 
[1, 0, 3, 3, 1]  	127	4 
[1, 7, 1, 2, 1]  	134	3 
[1, 2, 7, 0, 1]  	137	4 
[0, 2, 3, 3, 1]  	138	2 
[0, 3, 7, 0, 1]  	139	3 
[0, 4, 5, 1, 1]  	140	2 
[0, 7, 5, 0, 1]  	143	2 
[0, 2, 8, 0, 1]  	146	3 
[1, 5, 6, 0, 1]  	148	3 
[0, 0, 5, 3, 1]  	152	2 
[0, 1, 9, 0, 1]  	153	3 
[4, 0, 4, 1, 2]  	116	5 
[1, 4, 5, 0, 2]  	123	4 
[1, 6, 4, 0, 2]  	125	4 
[0, 4, 6, 0, 2]  	132	3 
[7, 0, 1, 0, 3]  	65	4 
[6, 1, 2, 0, 3]  	83	6 
[6, 0, 3, 0, 3]  	90	5 
[5, 1, 0, 2, 3]  	92	6 
[7, 0, 0, 2, 3]  	97	5 
[4, 1, 4, 0, 3]  	101	6 
[3, 1, 5, 0, 3]  	110	6 
[7, 7, 0, 0, 3]  	112	5 
[3, 0, 6, 0, 3]  	117	5 
[1, 0, 7, 0, 3]  	119	4 
[1, 3, 6, 0, 3]  	130	4 
[0, 0, 9, 0, 3]  	144	4 
[5, 0, 0, 3, 4]  	107	5 
[5, 0, 2, 2, 4]  	115	5 
[4, 0, 3, 2, 4]  	124	5 
[6, 7, 0, 0, 5]  	105	4 
[1, 3, 5, 0, 7]  	114	5 
[1, 3, 2, 2, 249]  	114	3 
[1, 2, 2, 2, 251]  	105	3 
[1, 4, 0, 3, 251]  	115	3 
[1, 2, 0, 3, 252]  	97	3 
[2, 5, 0, 2, 252]  	107	2 
[1, 1, 0, 4, 252]  	112	3 
[2, 3, 0, 1, 253]  	65	2 
[1, 2, 2, 1, 253]  	81	3 
[2, 0, 0, 4, 253]  	110	2 
[1, 0, 4, 2, 253]  	119	3 
[1, 0, 2, 4, 253]  	135	3 
[0, 0, 6, 2, 253]  	144	3 
[0, 3, 3, 2, 254]  	123	2 
[0, 2, 7, 0, 254]  	130	3 
[0, 4, 0, 4, 254]  	132	1 
[0, 2, 0, 5, 254]  	138	1 
[1, 1, 0, 3, 255]  	88	3 
[0, 2, 2, 2, 255]  	98	1 
[0, 1, 3, 2, 255]  	105	2 
[0, 2, 0, 4, 255]  	114	1 
[1, 5, 1, 2, 255]  	116	2 
[1, 0, 0, 5, 255]  	127	3 
[0, 0, 2, 5, 255]  	152	1 
------
The gap is between 8 and 248.
Lengths: 2 2 3 4 2 2.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 1.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[5007672478134638314 + 17997404874239391880*2^64 + 7466239053291707705*2^128 + 1505569514*2^192,12444063877181960136 + 2609421807743506921*2^64 + 15784959696673662984*2^128 + 89762105*2^192,3460268674132610720 + 18407468783231900528*2^64 + 4360038291775446013*2^128 + 1808340151*2^192,6861093170414131520 + 11326476444208312231*2^64 + 11849727950456579878*2^128 + 1007080670*2^192,16763668442795542624 + 8809083892002062496*2^64 + 1518222673389164963*2^128 + 371326845*2^192,11063976624209837488 + 4852427954843472308*2^64 + 13300332230202926364*2^128 + 669647519*2^192,13065935941272653408 + 9786070287050125095*2^64 + 14073977803920243983*2^128 + 1993906192*2^192;\
8352995314456010190 + 5621901408549809258*2^64 + 12296327238550112188*2^128 + 169553112*2^192,14807370125503232598 + 15139917113068703858*2^64 + 16119220625366352265*2^128 + 1922069630*2^192,10764841934120355016 + 7431616615851353936*2^64 + 9069055467791441953*2^128 + 1230497495*2^192,11622760697059340120 + 17343855503450375180*2^64 + 1576389313448544263*2^128 + 297696933*2^192,1967449137385906224 + 14352764837411318157*2^64 + 11424819190371274817*2^128 + 1310437705*2^192,8095310190628545744 + 4390960426376316222*2^64 + 8121776807305640506*2^128 + 492454270*2^192,4313844169673405200 + 8232163246819440933*2^64 + 11148703927801169684*2^128 + 69819832*2^192;\
1834253762229467888 + 12160145061734667842*2^64 + 2865320338398399532*2^128 + 62439681*2^192,9680093157457959039 + 190568291292701545*2^64 + 10287519966619484505*2^128 + 1350355317*2^192,10073198364321139540 + 12700125633443679177*2^64 + 6546888944255480291*2^128 + 407222533*2^192,191676507941287796 + 2003727189972664513*2^64 + 11162900506651707928*2^128 + 1737970337*2^192,5388678086014618500 + 9359629674170448868*2^64 + 18167028437207655196*2^128 + 1751186743*2^192,8242998005685376160 + 7223190905211513662*2^64 + 2728479846246576249*2^128 + 1293143722*2^192,2685730541423836512 + 18405141547502322066*2^64 + 8204865785229482545*2^128 + 731535491*2^192;\
2886130673448183412 + 2593342415122183054*2^64 + 15561276935004158933*2^128 + 742537318*2^192,1399870116962568989 + 4090993601928420346*2^64 + 1780250034461135439*2^128 + 723722800*2^192,9132305860515577568 + 4975518343688638028*2^64 + 15339588557923739915*2^128 + 1817364183*2^192,2274366812281272160 + 13617082471440721536*2^64 + 11730586221930049322*2^128 + 1639535748*2^192,5128098426801212188 + 5598884574475252122*2^64 + 4298987976380271082*2^128 + 1403014584*2^192,17086295682055733888 + 16742704993514098002*2^64 + 12181974133155113318*2^128 + 1108375214*2^192,10641348400231319648 + 5139922155149640575*2^64 + 16306581592647777448*2^128 + 675862764*2^192;\
5046062078015316239 + 17430032687982304748*2^64 + 9353617435451047883*2^128 + 1470990689*2^192,17383978982614807698 + 17737847959086510291*2^64 + 15100856874822241447*2^128 + 85407826*2^192,8445146529248682128 + 6948988080752420257*2^64 + 16904098212403205262*2^128 + 1823778269*2^192,2120933490872955876 + 18420560892330546007*2^64 + 9128760998627756706*2^128 + 316526838*2^192,8146113627745105288 + 7306910426220525423*2^64 + 17491968946613436840*2^128 + 140557010*2^192,5814535401685721648 + 6771057243696737825*2^64 + 3421949042832695660*2^128 + 570117377*2^192,16299643992170787752 + 11737002647728630193*2^64 + 11471265348326763330*2^128 + 2080354905*2^192;\
7920404331505590548 + 10107935701461215109*2^64 + 16879062060090504748*2^128 + 389153866*2^192,4624887223591907356 + 12543956251080281663*2^64 + 666664318610811640*2^128 + 873969638*2^192,13887671038217927536 + 10999812268510157327*2^64 + 7135792872804754398*2^128 + 1356015451*2^192,718966477410068160 + 15414529148834856260*2^64 + 16711586654057530731*2^128 + 300118107*2^192,3669283847295836880 + 10718828286091995043*2^64 + 6984477325454020196*2^128 + 681704450*2^192,11053635050419162760 + 12783316730202373377*2^64 + 369545222269886612*2^128 + 1213107977*2^192,7062213973795557440 + 15713606179253315338*2^64 + 13087432253546689871*2^128 + 1226088306*2^192;\
14636855833550968756 + 11182040908392153265*2^64 + 14533154211302336765*2^128 + 619088516*2^192,10882271744800604390 + 17791248757145715604*2^64 + 13515370870182221290*2^128 + 1527353554*2^192,7608067803035731024 + 14939406065577366325*2^64 + 5120213590636633698*2^128 + 520395264*2^192,15432428882795857360 + 7090205568954837794*2^64 + 13200275716956507738*2^128 + 54621982*2^192,11531293862370655176 + 5906364826427587679*2^64 + 10183740699103285322*2^128 + 464869754*2^192,11606716617631798152 + 3463032591964386053*2^64 + 14252554759132579310*2^128 + 791844201*2^192,11653538200039614456 + 12334714680380193034*2^64 + 3900763723628225935*2^128 + 947201650*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4214 lists. */
