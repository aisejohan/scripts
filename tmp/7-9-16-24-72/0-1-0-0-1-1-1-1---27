/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * y^1               = Coefficient of   x^8 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^8                     = Coefficient of   z^3 * w^1               = Coefficient of   w^3                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^8 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
The final length of G is 61
[1, 1, 2, 0, 0]  	48	3 
[8, 0, 0, 0, 0]  	56	3  <--- 1
[1, 0, 2, 1, 0]  	63	2 
[0, 8, 0, 0, 0]  	72	2  <--- 2
[0, 0, 3, 1, 0]  	72	2 
[1, 0, 0, 3, 0]  	79	2 
[7, 0, 3, 0, 0]  	97	3 
[7, 1, 0, 2, 0]  	106	4 
[0, 7, 3, 0, 0]  	111	2 
[1, 7, 0, 2, 0]  	118	3 
[6, 0, 6, 0, 0]  	138	3 
[5, 0, 7, 0, 0]  	147	1 
[0, 3, 0, 5, 0]  	147	1 
[0, 6, 6, 0, 0]  	150	1 
[0, 6, 0, 4, 0]  	150	1 
[0, 2, 1, 5, 0]  	154	1 
[4, 0, 8, 0, 0]  	156	1 
[0, 5, 7, 0, 0]  	157	1 
[0, 5, 1, 4, 0]  	157	1 
[0, 1, 2, 5, 0]  	161	1 
[0, 4, 8, 0, 0]  	164	1 
[0, 4, 2, 4, 0]  	164	1 
[3, 0, 9, 0, 0]  	165	1 
[0, 0, 0, 7, 0]  	168	1  <--- 4
[0, 3, 9, 0, 0]  	171	1 
[2, 0, 10, 0, 0]  	174	1 
[0, 2, 10, 0, 0]  	178	1 
[1, 0, 11, 0, 0]  	183	1 
[0, 1, 11, 0, 0]  	185	1 
[0, 0, 12, 0, 0]  	192	1  <--- 3
[7, 0, 1, 0, 3]  	65	2 
[6, 0, 3, 0, 3]  	90	3 
[7, 0, 0, 2, 3]  	97	2 
[6, 1, 0, 2, 3]  	99	4 
[7, 7, 0, 0, 3]  	112	2 
[5, 0, 6, 0, 3]  	131	3 
[4, 0, 7, 0, 3]  	140	2 
[3, 0, 8, 0, 3]  	149	2 
[2, 0, 9, 0, 3]  	158	2 
[1, 0, 10, 0, 3]  	167	2 
[0, 0, 11, 0, 3]  	176	2 
[6, 7, 0, 0, 6]  	105	2 
[5, 6, 0, 2, 6]  	137	4 
[0, 1, 10, 0, 6]  	169	2 
[5, 7, 1, 0, 9]  	114	2 
[4, 6, 0, 2, 9]  	130	4 
[0, 2, 9, 0, 9]  	162	2 
[3, 6, 0, 2, 12]  	123	4 
[0, 3, 8, 0, 12]  	155	2 
[2, 6, 1, 2, 15]  	132	3 
[0, 4, 7, 0, 15]  	148	2 
[0, 5, 6, 0, 18]  	141	2 
[0, 5, 0, 4, 238]  	141	1 
[0, 4, 0, 4, 241]  	132	1 
[0, 3, 0, 4, 244]  	123	1 
[0, 2, 0, 4, 247]  	114	1 
[0, 1, 0, 4, 250]  	105	1 
[0, 1, 2, 1, 253]  	65	1 
[0, 1, 0, 3, 253]  	81	1 
[0, 0, 1, 4, 253]  	112	1 
[0, 0, 0, 6, 253]  	144	1 
------
The gap is between 19 and 237.
Lengths: 2 2 3 3 2 3.
For 160 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*z^10
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^6

For 88 = 2*d-d1-d2-d3-d4 you get 3 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*z^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3

For 16 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 
*/
A = \
[17899948888326902020 + 3353297418032854813*2^64 + 10694747587417706210*2^128 + 3586034095*2^192,18312284179248277856 + 3604304613604461125*2^64 + 15061854102191246524*2^128 + 2139347640*2^192,8486695972503764096 + 12390100798224078625*2^64 + 10165772746698903213*2^128 + 1441612708*2^192,17094528799076868880 + 2631056817751057327*2^64 + 6549010403218338131*2^128 + 2565549652*2^192,7186335522727460736 + 8458099992787076186*2^64 + 10481227480617752629*2^128 + 1838322924*2^192,17762259455446893056 + 6495929748800117954*2^64 + 16056696732966956150*2^128 + 2891125055*2^192,11999854188032460032 + 6931227842312874992*2^64 + 8013177357662625654*2^128 + 1772537822*2^192;\
18179166433235115176 + 1788913371143190270*2^64 + 15919424787663042801*2^128 + 4026392292*2^192,7438137581630487624 + 6161088303146047664*2^64 + 16706313608158216798*2^128 + 3080605592*2^192,14233758486943436384 + 6254198828466222296*2^64 + 11406869213225963108*2^128 + 304168182*2^192,13699995233369344326 + 13979178553421622746*2^64 + 1387322207845598284*2^128 + 1590500753*2^192,6155475589164680912 + 17451964528114722921*2^64 + 13279565193272637287*2^128 + 2260953197*2^192,5210627885070017472 + 11200461437172185565*2^64 + 14416458893983848775*2^128 + 1409686203*2^192,4706418835831643104 + 9643090124348045089*2^64 + 13974027062458740220*2^128 + 244628817*2^192;\
16387965623266554944 + 14084517185563308780*2^64 + 591290151731249235*2^128 + 958779424*2^192,8790730153693159888 + 10475353625190336420*2^64 + 9311673362060876730*2^128 + 926549151*2^192,4771386068658161216 + 13878703321744189044*2^64 + 17283365290058133020*2^128 + 1063337485*2^192,2050419947418083384 + 2035563471798832877*2^64 + 2582991881830046631*2^128 + 635216771*2^192,1365399861110740544 + 11710719884101033416*2^64 + 9238468711973100122*2^128 + 1090393211*2^192,1038002573953726208 + 1252529771428088542*2^64 + 7474789333118415157*2^128 + 368351691*2^192,1766533040239228288 + 4906473149740667481*2^64 + 2081537172094168104*2^128 + 412953173*2^192;\
5050400835356723184 + 2512672829904092411*2^64 + 18253364980261179054*2^128 + 392096764*2^192,682977003756217664 + 1565531157505218116*2^64 + 17179307532869846145*2^128 + 506941752*2^192,4227195607217333504 + 10504886466384526042*2^64 + 12924964875992966150*2^128 + 344109353*2^192,2212968797213600288 + 6757776244305180922*2^64 + 14241281176646820373*2^128 + 1959781051*2^192,532162397351506688 + 2466058102751143211*2^64 + 9085976215623306367*2^128 + 1989906157*2^192,6065672464351358128 + 8618138009062272289*2^64 + 3381347897817243487*2^128 + 1423732375*2^192,2110295534410812928 + 7335757486193930675*2^64 + 17802768646060400359*2^128 + 1209394551*2^192;\
11979915184545394656 + 16274367094365627545*2^64 + 14633795078698127929*2^128 + 3160909387*2^192,3895821734678137952 + 10594529693398963087*2^64 + 15367743269848618975*2^128 + 517290941*2^192,16957017507012570184 + 12228453414651452815*2^64 + 137645766244522847*2^128 + 4138265499*2^192,7929741705124298525 + 11365882698460109253*2^64 + 16349710640367499014*2^128 + 2406877870*2^192,9956576225900650144 + 16328091935367018900*2^64 + 1513936115666222354*2^128 + 3091535261*2^192,16976192201264541984 + 3369482879565758305*2^64 + 1371855320705898780*2^128 + 3626270131*2^192,11982506928752711184 + 17769340486993032993*2^64 + 16423016494005462414*2^128 + 1780281712*2^192;\
11435683762441357088 + 13682882592605417131*2^64 + 2307641495584079557*2^128 + 803577926*2^192,7598068527990786592 + 5387834107688312631*2^64 + 10043810684968882005*2^128 + 3953674126*2^192,13839349889777533528 + 4989538175327839902*2^64 + 16786223215592118060*2^128 + 7209792*2^192,16434497034117084592 + 47879514701630213*2^64 + 778540537439237134*2^128 + 4147293024*2^192,4120059352480883328 + 6476547451417693367*2^64 + 11235429422472421317*2^128 + 1143153677*2^192,3564861952593461408 + 3983249379401522859*2^64 + 3855315417424676787*2^128 + 3882574070*2^192,10570992560549953280 + 6855083398794262626*2^64 + 2961950633954301461*2^128 + 3467424604*2^192;\
472013560783265936 + 10398296966312943633*2^64 + 11464612960282821751*2^128 + 3689301684*2^192,9436802635558833312 + 5798043807504252516*2^64 + 18311522349894669429*2^128 + 3883235062*2^192,13906376904385041496 + 10856059190889481008*2^64 + 5655301433387389874*2^128 + 3155993545*2^192,1812696437392814576 + 1522002910512884558*2^64 + 3931950008734647420*2^128 + 2944343671*2^192,2799296753909659776 + 10916360154160753751*2^64 + 15026237279820243282*2^128 + 2782324058*2^192,7566969371778580096 + 18031027395815387934*2^64 + 15277879301209570111*2^128 + 2866923645*2^192,8546054650983637776 + 727566737659323246*2^64 + 3512697953344118634*2^128 + 1718806816*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 1993 lists. */
