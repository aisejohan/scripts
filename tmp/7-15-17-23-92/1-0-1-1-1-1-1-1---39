/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^11 * y^1               = Coefficient of   x^5 * z^2 * w^1         = Coefficient of   x^4 * y^2 * z^2         = Coefficient of   x^2 * y^1 * z^1 * w^2   = Coefficient of   x^1 * y^3 * z^1 * w^1   = Coefficient of   x^1 * z^5               = Coefficient of   y^5 * z^1               = Coefficient of   w^4                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^11*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^2*z^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^3*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^4


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
Allocate M_len = 51200 elements.
Allocate G_len 640 elements and old = 320.
The final length of G is 225
[11, 0, 0, 0, 0]  	77	5  <--- 1
[10, 1, 0, 0, 0]  	85	5 
[4, 2, 2, 0, 0]  	92	3 
[2, 1, 1, 2, 0]  	92	4 
[1, 3, 1, 1, 0]  	92	3 
[3, 4, 1, 0, 0]  	98	5 
[8, 1, 0, 2, 0]  	117	8 
[2, 6, 1, 0, 0]  	121	5 
[9, 3, 1, 0, 0]  	125	6 
[9, 3, 0, 1, 0]  	131	8 
[7, 0, 5, 0, 0]  	134	10 
[10, 0, 4, 0, 0]  	138	6 
[3, 1, 6, 0, 0]  	138	4 
[7, 3, 0, 2, 0]  	140	10 
[3, 2, 0, 4, 0]  	143	6 
[2, 4, 0, 3, 0]  	143	6 
[2, 3, 5, 0, 0]  	144	5 
[1, 3, 0, 4, 0]  	144	3 
[8, 0, 0, 4, 0]  	148	8 
[7, 2, 0, 3, 0]  	148	9 
[6, 4, 0, 2, 0]  	148	9 
[6, 1, 0, 4, 0]  	149	9 
[5, 3, 0, 3, 0]  	149	9 
[2, 6, 0, 2, 0]  	150	6 
[9, 6, 0, 0, 0]  	153	6 
[9, 0, 4, 1, 0]  	154	8 
[2, 8, 0, 1, 0]  	157	7 
[4, 1, 0, 5, 0]  	158	7 
[1, 1, 0, 6, 0]  	160	5 
[0, 8, 1, 1, 0]  	160	4 
[1, 8, 2, 0, 0]  	161	4 
[7, 0, 4, 2, 0]  	163	10 
[6, 1, 5, 1, 0]  	165	7 
[1, 9, 0, 1, 0]  	165	6 
[4, 0, 0, 6, 0]  	166	5 
[1, 6, 0, 3, 0]  	166	5 
[1, 0, 8, 1, 0]  	166	5 
[5, 0, 8, 0, 0]  	171	9 
[1, 2, 8, 0, 0]  	173	4 
[2, 0, 4, 4, 0]  	174	5 
[1, 10, 1, 0, 0]  	174	5 
[8, 8, 0, 0, 0]  	176	7 
[2, 0, 3, 5, 0]  	180	4 
[1, 7, 4, 0, 0]  	180	4 
[1, 2, 3, 4, 0]  	180	4 
[0, 9, 0, 2, 0]  	181	4 
[3, 0, 0, 7, 0]  	182	4 
[1, 1, 4, 4, 0]  	182	4 
[0, 11, 1, 0, 0]  	182	4 
[7, 9, 0, 0, 0]  	184	7 
[2, 0, 10, 0, 0]  	184	5 
[1, 5, 6, 0, 0]  	184	4 
[0, 10, 2, 0, 0]  	184	4 
[0, 7, 2, 2, 0]  	185	4 
[1, 1, 7, 2, 0]  	187	3 
[0, 6, 3, 2, 0]  	187	3 
[0, 3, 7, 1, 0]  	187	3 
[0, 11, 0, 1, 0]  	188	3 
[0, 8, 4, 0, 0]  	188	3 
[0, 8, 0, 3, 0]  	189	3 
[0, 5, 4, 2, 0]  	189	3 
[1, 2, 5, 3, 0]  	191	4 
[0, 7, 1, 3, 0]  	191	4 
[1, 1, 6, 3, 0]  	193	4 
[0, 6, 2, 3, 0]  	193	4 
[1, 0, 7, 3, 0]  	195	4 
[0, 5, 3, 3, 0]  	195	3 
[0, 7, 4, 1, 0]  	196	2 
[0, 4, 8, 0, 0]  	196	2 
[0, 7, 0, 4, 0]  	197	3 
[0, 4, 0, 6, 0]  	198	3 
[0, 6, 1, 4, 0]  	199	4 
[0, 5, 6, 1, 0]  	200	3 
[0, 3, 1, 6, 0]  	200	3 
[1, 0, 6, 4, 0]  	201	2 
[0, 5, 2, 4, 0]  	201	2 
[0, 2, 6, 3, 0]  	201	2 
[1, 0, 2, 7, 0]  	202	2 
[0, 2, 2, 6, 0]  	202	2 
[0, 4, 3, 4, 0]  	203	2 
[0, 6, 0, 5, 0]  	205	2 
[0, 3, 4, 4, 0]  	205	2 
[0, 3, 0, 7, 0]  	206	3 
[1, 0, 5, 5, 0]  	207	3 
[0, 7, 6, 0, 0]  	207	3 
[0, 5, 1, 5, 0]  	207	3 
[0, 4, 6, 2, 0]  	208	2 
[0, 14, 0, 0, 0]  	210	3  <--- 2
[1, 0, 12, 0, 0]  	211	1 
[0, 3, 3, 5, 0]  	211	1 
[0, 0, 7, 4, 0]  	211	1 
[0, 2, 8, 2, 0]  	212	2 
[1, 0, 0, 9, 0]  	214	4 
[0, 3, 10, 0, 0]  	215	2 
[0, 2, 11, 0, 0]  	217	1 
[0, 0, 6, 5, 0]  	217	1 
[0, 0, 2, 8, 0]  	218	1 
[0, 1, 12, 0, 0]  	219	1 
[6, 12, 0, 0, 0]  	222	2 
[0, 1, 0, 9, 0]  	222	2 
[0, 2, 10, 1, 0]  	223	2 
[0, 0, 1, 9, 0]  	224	1 
[0, 1, 11, 1, 0]  	225	1 
[0, 2, 5, 5, 0]  	230	2 
[0, 2, 1, 8, 0]  	231	1 
[0, 1, 10, 2, 0]  	231	1 
[0, 0, 11, 2, 0]  	233	1 
[0, 1, 5, 6, 0]  	238	1 
[0, 0, 14, 0, 0]  	238	1  <--- 3
[0, 0, 10, 3, 0]  	239	1 
[0, 0, 5, 7, 0]  	246	1 
[0, 0, 0, 11, 0]  	253	1  <--- 4
[2, 1, 1, 1, 1]  	69	3 
[4, 2, 1, 0, 1]  	75	5 
[3, 1, 0, 3, 1]  	105	6 
[3, 1, 5, 0, 1]  	121	5 
[2, 0, 5, 1, 1]  	122	4 
[1, 2, 5, 0, 1]  	122	4 
[4, 0, 6, 0, 1]  	130	4 
[3, 0, 0, 5, 1]  	136	5 
[6, 0, 1, 4, 1]  	151	9 
[2, 0, 0, 6, 1]  	152	5 
[3, 0, 4, 3, 1]  	158	6 
[3, 0, 3, 4, 1]  	164	6 
[7, 8, 0, 0, 1]  	169	6 
[1, 1, 6, 2, 1]  	170	5 
[1, 8, 0, 2, 1]  	173	4 
[1, 0, 3, 5, 1]  	173	4 
[0, 5, 5, 1, 1]  	183	4 
[1, 0, 1, 7, 1]  	185	4 
[1, 12, 0, 0, 1]  	187	3 
[0, 7, 5, 0, 1]  	190	3 
[1, 0, 0, 8, 1]  	191	4 
[0, 13, 0, 0, 1]  	195	3 
[0, 1, 1, 8, 1]  	216	2 
[2, 0, 5, 0, 2]  	99	3 
[2, 0, 0, 5, 2]  	129	4 
[9, 0, 0, 3, 2]  	132	5 
[6, 0, 0, 4, 2]  	134	11 
[1, 1, 0, 5, 2]  	137	4 
[8, 0, 1, 3, 2]  	142	11 
[1, 0, 0, 6, 2]  	145	4 
[8, 0, 4, 1, 2]  	147	7 
[6, 8, 0, 0, 2]  	162	5 
[5, 9, 0, 0, 2]  	170	6 
[1, 0, 5, 4, 2]  	184	4 
[3, 11, 0, 0, 2]  	186	7 
[1, 0, 11, 0, 2]  	194	3 
[0, 5, 7, 0, 2]  	194	3 
[0, 3, 2, 5, 2]  	194	2 
[0, 2, 1, 7, 2]  	208	2 
[8, 0, 0, 3, 3]  	125	9 
[5, 0, 4, 2, 3]  	149	8 
[1, 0, 9, 0, 3]  	160	4 
[1, 0, 4, 4, 3]  	167	4 
[2, 11, 0, 0, 3]  	179	4 
[5, 8, 0, 0, 4]  	155	6 
[0, 1, 3, 6, 4]  	204	2 
[0, 1, 2, 7, 4]  	210	2 
[0, 4, 5, 3, 4]  	214	3 
[1, 11, 0, 0, 5]  	172	5 
[4, 10, 0, 0, 6]  	178	5 
[0, 0, 6, 4, 249]  	194	1 
[0, 10, 1, 0, 251]  	167	3 
[1, 0, 6, 3, 251]  	178	4 
[0, 8, 1, 0, 252]  	137	3 
[1, 0, 7, 2, 252]  	172	4 
[0, 6, 0, 4, 252]  	182	2 
[0, 4, 2, 4, 252]  	186	2 
[0, 0, 12, 0, 252]  	204	1 
[0, 1, 10, 1, 252]  	208	1 
[0, 0, 11, 1, 252]  	210	1 
[0, 2, 0, 8, 252]  	214	2 
[1, 6, 1, 0, 253]  	114	3 
[2, 4, 0, 2, 253]  	120	4 
[7, 2, 0, 2, 253]  	125	6 
[2, 3, 0, 3, 253]  	128	5 
[0, 7, 1, 1, 253]  	145	2 
[1, 5, 4, 0, 253]  	150	3 
[0, 4, 0, 4, 253]  	152	2 
[1, 0, 6, 2, 253]  	155	4 
[1, 1, 4, 3, 253]  	159	4 
[0, 5, 5, 0, 253]  	160	3 
[0, 6, 2, 2, 253]  	170	4 
[0, 3, 1, 5, 253]  	177	2 
[0, 4, 7, 0, 253]  	179	2 
[0, 3, 0, 6, 253]  	183	3 
[0, 4, 6, 1, 253]  	185	2 
[0, 3, 9, 0, 253]  	198	2 
[2, 2, 0, 2, 254]  	90	4 
[1, 5, 1, 0, 254]  	99	1 
[2, 1, 0, 4, 254]  	121	4 
[0, 7, 2, 0, 254]  	139	1 
[4, 0, 4, 2, 254]  	142	7 
[0, 2, 0, 5, 254]  	145	1 
[0, 6, 2, 1, 254]  	147	3 
[2, 0, 4, 3, 254]  	151	4 
[0, 9, 0, 1, 254]  	158	3 
[0, 4, 6, 0, 254]  	162	1 
[0, 5, 4, 1, 254]  	166	3 
[0, 2, 4, 4, 254]  	190	1 
[0, 1, 5, 4, 254]  	192	1 
[0, 3, 6, 2, 254]  	193	3 
[0, 0, 10, 1, 254]  	193	1 
[0, 2, 10, 0, 254]  	200	1 
[1, 3, 1, 0, 255]  	69	1 
[2, 1, 0, 2, 255]  	75	4 
[1, 1, 5, 0, 255]  	107	2 
[1, 0, 0, 5, 255]  	122	3 
[0, 7, 1, 0, 255]  	122	2 
[1, 2, 0, 4, 255]  	129	1 
[1, 0, 6, 1, 255]  	132	3 
[0, 5, 2, 1, 255]  	132	2 
[3, 0, 4, 2, 255]  	135	5 
[1, 4, 0, 3, 255]  	136	3 
[0, 3, 0, 4, 255]  	137	1 
[0, 5, 1, 2, 255]  	138	2 
[0, 2, 1, 4, 255]  	139	1 
[1, 0, 8, 0, 255]  	143	2 
[0, 8, 0, 1, 255]  	143	3 
[0, 2, 6, 1, 255]  	155	2 
[0, 0, 10, 0, 255]  	170	1 
[0, 0, 5, 4, 255]  	177	1 
[0, 2, 9, 0, 255]  	183	2 
[0, 0, 0, 8, 255]  	184	1 
------
The gap is between 7 and 248.
Lengths: 2 2 5 7 2 3.
For 214 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^8
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9*w^2

For 122 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1*z^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*z^2*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^7*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^4

For 30 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[17094593220209982064 + 14927522955883384555*2^64 + 12171919272840804530*2^128 + 1446866744*2^192,6787172102902274258 + 15636018825639604888*2^64 + 994522196578989943*2^128 + 23374031742*2^192,6763234226020085064 + 13790065212761830642*2^64 + 6789041595360842606*2^128 + 9851929523*2^192,6460647604515235992 + 10151805268968104739*2^64 + 11354887420051374261*2^128 + 7468120530*2^192,16086508312505976752 + 6035755227046112712*2^64 + 6464920470836571764*2^128 + 15074353562*2^192,3463400636652498848 + 974672641918818883*2^64 + 12922412959177026895*2^128 + 1988228222*2^192,2754503902947342208 + 11886486065980333716*2^64 + 10259790659349531328*2^128 + 17885734810*2^192,11251602505122936896 + 11863146834329276569*2^64 + 12148754552734488459*2^128 + 16197057924*2^192,6809424626201472832 + 6249441014429185820*2^64 + 6007442736577680982*2^128 + 8765318003*2^192;\
11691098659518431808 + 5263901449893207177*2^64 + 6634582136560269675*2^128 + 25894800299*2^192,992878758555531208 + 12332519135970421121*2^64 + 14365759831722692655*2^128 + 26764500192*2^192,3551387891900985504 + 1932850138425758360*2^64 + 11871722707643596025*2^128 + 25897962024*2^192,14894620111208457440 + 7568535264484602622*2^64 + 16063887603418671412*2^128 + 21687073711*2^192,3393966472082750400 + 14021181229409542876*2^64 + 148776296571235641*2^128 + 7185553204*2^192,5527570784660718720 + 6094538698501501266*2^64 + 3490819455652747949*2^128 + 23010003894*2^192,17941447196490253824 + 8904845939401005292*2^64 + 11656974011154190777*2^128 + 938673190*2^192,1559645103871643904 + 8820258504816716895*2^64 + 5571665615315579445*2^128 + 10704090505*2^192,8140606089163264256 + 4279925676530068550*2^64 + 10594265231871616165*2^128 + 8950887502*2^192;\
17560328860633912000 + 16634162633347328837*2^64 + 10912397505659340134*2^128 + 1430238228*2^192,2776571804953263488 + 13237696709363081114*2^64 + 9600797609012577074*2^128 + 9337988057*2^192,15451939567206570496 + 10744758157823604741*2^64 + 13738054651795294187*2^128 + 3507352855*2^192,9846628056844841920 + 10356239254173145073*2^64 + 5730579662761634260*2^128 + 11291915683*2^192,3231676672687830912 + 6089601571484458794*2^64 + 13303852040337436048*2^128 + 2189302156*2^192,14452443734855613184 + 15486048251583689879*2^64 + 16822968388016466429*2^128 + 10653881417*2^192,12461649620337764096 + 5029488307823352927*2^64 + 14925847010506126930*2^128 + 1231262757*2^192,3462354381505474176 + 16877932036717350625*2^64 + 6115419630711260952*2^128 + 6965582145*2^192,8777734021341296896 + 7851851170302664226*2^64 + 6198271963399698835*2^128 + 14120999882*2^192;\
13644960229501597616 + 11045030707845648108*2^64 + 14932496221671947422*2^128 + 16292728008*2^192,470691254618316634 + 8428100405371508*2^64 + 15561842370685772195*2^128 + 15376943760*2^192,15923619343516198056 + 8086567174070934522*2^64 + 13170385623616495014*2^128 + 2294945972*2^192,11273631916012975480 + 16219461497344325144*2^64 + 16913385874466512934*2^128 + 4331204428*2^192,1601257213351692720 + 12651357358793166234*2^64 + 8952338098912414537*2^128 + 4276549881*2^192,9131963524711301664 + 15865518955399619883*2^64 + 13566266276425747916*2^128 + 11877704723*2^192,9539337781945405184 + 14654031710324400641*2^64 + 14449776095372712152*2^128 + 2713266961*2^192,12220416998320126144 + 17503515148605071909*2^64 + 14646475178212042199*2^128 + 7118984794*2^192,14009957613284309824 + 10406488106880842392*2^64 + 14740769184168997624*2^128 + 3080962721*2^192;\
8568679778092936864 + 16042297664876095943*2^64 + 11356843080058990876*2^128 + 18438260630*2^192,4368133539427352028 + 8141751738718104090*2^64 + 1961376218178298992*2^128 + 26402536272*2^192,344737222269990288 + 161277868681911563*2^64 + 13700745630317283707*2^128 + 11854113047*2^192,1325524547219728848 + 5349896817830059282*2^64 + 1832383772072010317*2^128 + 33903827546*2^192,12969594495654919264 + 12694008025295012575*2^64 + 12089363918759538520*2^128 + 25012389346*2^192,16852864375306303936 + 15756828278399856934*2^64 + 17324900959860846858*2^128 + 24139922434*2^192,11364997990307159936 + 12654574447824899516*2^64 + 3188893400877381482*2^128 + 26561582582*2^192,17992699856148076928 + 16771832078965370653*2^64 + 13201686901761964617*2^128 + 5789721*2^192,17668082830069223296 + 16540576299193783689*2^64 + 15855875732416361561*2^128 + 12928770364*2^192;\
13214230784196704456 + 3578592771891404915*2^64 + 6565189702044126973*2^128 + 706898033*2^192,9165604102839662399 + 17192285364233327010*2^64 + 67302052387150538*2^128 + 3204170761*2^192,6847826235382654636 + 11812192806907835678*2^64 + 1999224435057704647*2^128 + 25713479785*2^192,14855209415882962036 + 1557768702798182151*2^64 + 14715943865538119934*2^128 + 18560170429*2^192,7761075102016888264 + 17587392313833817596*2^64 + 7194672331064426658*2^128 + 30962653726*2^192,15901501515821269104 + 8669587717093831418*2^64 + 8784019349248952560*2^128 + 13053571590*2^192,2938219378989512384 + 12387778001295674213*2^64 + 13082583955776345714*2^128 + 8058724561*2^192,2839543554325592544 + 8636752223448665933*2^64 + 4576021203012124263*2^128 + 4227456431*2^192,6719620939910180448 + 5941641308837665987*2^64 + 41097221003038649*2^128 + 15161829061*2^192;\
17732287533311344144 + 3577018463721121732*2^64 + 16380260415202225497*2^128 + 6820841806*2^192,1713690466678040602 + 18238707775585886746*2^64 + 17918599259374872732*2^128 + 22417782431*2^192,2167408382828171512 + 2805300090104665061*2^64 + 3641788300225986033*2^128 + 24394815490*2^192,6021563381273915736 + 13038065276614561760*2^64 + 3444774633418420746*2^128 + 29415520076*2^192,2945377345207064592 + 3454334841557269385*2^64 + 10421897091986429333*2^128 + 25012662353*2^192,1820728402442328992 + 6236115208420753318*2^64 + 15270463390736925588*2^128 + 14721526520*2^192,5677298883519558720 + 15898172444891533975*2^64 + 10011121611872302719*2^128 + 31243020943*2^192,4151164201903644352 + 12503258005537193498*2^64 + 16385727089848735812*2^128 + 11031430001*2^192,15287669629733356608 + 4311585434753256957*2^64 + 15069295506240979712*2^128 + 10489645212*2^192;\
12832238190614134432 + 1496257855536198714*2^64 + 11866929222554382719*2^128 + 29454266817*2^192,2542284995790132012 + 10768297315993370754*2^64 + 3983593861370888641*2^128 + 24212243447*2^192,6393908701666613360 + 6571092771045202646*2^64 + 16328617138102057140*2^128 + 7187324539*2^192,9744031227941287056 + 934939676592681710*2^64 + 16091374839863842206*2^128 + 1807743671*2^192,12080059796921641248 + 17167821817019100386*2^64 + 12551120446237278495*2^128 + 18175730755*2^192,447910512108282816 + 2070371926904172444*2^64 + 15607691373959464444*2^128 + 9408132330*2^192,12683695091302038784 + 17339933670144440612*2^64 + 16245017558667858003*2^128 + 1163067688*2^192,17388036583631315968 + 13887488751734085087*2^64 + 12347323041140170878*2^128 + 6807200730*2^192,11664051378357378432 + 15622768910901587586*2^64 + 15334688903585609627*2^128 + 28958814407*2^192;\
17348580628682296400 + 9015070059321869904*2^64 + 1898508489939698088*2^128 + 17228060770*2^192,8720585820676479958 + 16660807197526513990*2^64 + 18319402963355052835*2^128 + 15697916666*2^192,12942569548753569272 + 8360026600137480617*2^64 + 11741790122563551191*2^128 + 15707497792*2^192,6975004669888675464 + 15128852792845547704*2^64 + 6988145640772425476*2^128 + 27780591499*2^192,11745384655905930320 + 8081596116956402394*2^64 + 6098559466820343270*2^128 + 13989632555*2^192,10085753414267698016 + 6412635957071798399*2^64 + 11627711819774130872*2^128 + 29469779879*2^192,11077665943436799616 + 16928904805071355929*2^64 + 13827753840203727383*2^128 + 16026533543*2^192,10320370117853393216 + 14410019142662466557*2^64 + 12739583978229807412*2^128 + 27642878569*2^192,13693149167868832064 + 4580381576746014820*2^64 + 13796124316042445987*2^128 + 29692454354*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 3537 lists. */
