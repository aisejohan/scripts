/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^11 * y^1               = Coefficient of   x^5 * z^2 * w^1         = Coefficient of   x^4 * y^2 * z^2         = Coefficient of   x^2 * y^1 * z^1 * w^2   = Coefficient of   x^1 * y^3 * z^1 * w^1   = Coefficient of   x^1 * z^5               = Coefficient of   y^5 * z^1               = Coefficient of   w^4                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^11*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^5*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^5 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^4


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
The final length of G is 117
[5, 0, 2, 0, 0]  	69	2 
[11, 0, 0, 0, 0]  	77	2  <--- 1
[10, 1, 0, 0, 0]  	85	3 
[1, 0, 5, 0, 0]  	92	2 
[0, 5, 1, 0, 0]  	92	2 
[6, 5, 0, 0, 0]  	117	3 
[4, 0, 0, 4, 0]  	120	2 
[5, 6, 0, 0, 0]  	125	4 
[3, 0, 0, 5, 0]  	136	4 
[4, 0, 4, 2, 0]  	142	3 
[1, 0, 4, 3, 0]  	144	2 
[4, 4, 2, 1, 0]  	145	2 
[1, 0, 3, 4, 0]  	150	2 
[3, 4, 3, 1, 0]  	155	2 
[1, 4, 0, 4, 0]  	159	3 
[3, 5, 0, 3, 0]  	165	3 
[2, 4, 4, 1, 0]  	165	3 
[3, 10, 0, 0, 0]  	171	2 
[2, 4, 3, 2, 0]  	171	2 
[1, 10, 0, 1, 0]  	180	3 
[1, 4, 4, 2, 0]  	181	2 
[2, 0, 2, 6, 0]  	186	2 
[0, 4, 2, 4, 0]  	186	2 
[1, 4, 3, 3, 0]  	187	2 
[1, 0, 0, 8, 0]  	191	3 
[0, 4, 5, 2, 0]  	191	3 
[0, 3, 2, 5, 0]  	194	2 
[0, 10, 0, 2, 0]  	196	2 
[0, 4, 8, 0, 0]  	196	2 
[0, 4, 0, 6, 0]  	198	2 
[1, 0, 2, 7, 0]  	202	2 
[0, 4, 7, 1, 0]  	202	2 
[0, 9, 0, 3, 0]  	204	2 
[0, 3, 4, 4, 0]  	205	2 
[0, 14, 0, 0, 0]  	210	2  <--- 2
[0, 0, 7, 4, 0]  	211	1 
[0, 8, 0, 4, 0]  	212	2 
[0, 3, 10, 0, 0]  	215	2 
[0, 2, 11, 0, 0]  	217	1 
[0, 0, 6, 5, 0]  	217	1 
[0, 13, 0, 1, 0]  	218	1 
[0, 2, 7, 3, 0]  	218	1 
[0, 0, 2, 8, 0]  	218	1 
[0, 2, 3, 6, 0]  	219	1 
[0, 1, 12, 0, 0]  	219	1 
[0, 2, 6, 4, 0]  	224	1 
[0, 0, 1, 9, 0]  	224	1 
[0, 2, 2, 7, 0]  	225	1 
[0, 1, 11, 1, 0]  	225	1 
[0, 3, 0, 8, 0]  	229	2 
[0, 2, 1, 8, 0]  	231	1 
[0, 1, 10, 2, 0]  	231	1 
[0, 0, 11, 2, 0]  	233	1 
[0, 1, 5, 6, 0]  	238	1 
[0, 0, 14, 0, 0]  	238	1  <--- 3
[0, 0, 10, 3, 0]  	239	1 
[0, 1, 0, 10, 0]  	245	1 
[0, 0, 5, 7, 0]  	246	1 
[0, 0, 0, 11, 0]  	253	1  <--- 4
[5, 0, 1, 1, 1]  	75	3 
[2, 0, 4, 2, 1]  	128	3 
[3, 5, 0, 2, 1]  	142	4 
[1, 9, 0, 2, 1]  	188	3 
[6, 0, 0, 3, 2]  	111	2 
[5, 1, 0, 3, 2]  	119	3 
[2, 0, 3, 3, 4]  	134	2 
[1, 0, 0, 6, 4]  	145	2 
[1, 5, 0, 3, 4]  	151	2 
[1, 10, 0, 0, 4]  	157	2 
[0, 1, 1, 6, 4]  	170	2 
[0, 11, 0, 1, 4]  	188	2 
[0, 6, 0, 5, 4]  	205	2 
[0, 1, 0, 9, 4]  	222	2 
[0, 3, 8, 1, 8]  	204	3 
[0, 3, 7, 2, 8]  	210	3 
[0, 2, 8, 2, 8]  	212	2 
[0, 2, 6, 3, 10]  	201	2 
[0, 2, 10, 1, 10]  	223	2 
[0, 2, 5, 5, 10]  	230	2 
[0, 7, 0, 3, 12]  	174	3 
[0, 12, 0, 0, 12]  	180	3 
[0, 3, 0, 7, 12]  	206	3 
[0, 4, 4, 3, 240]  	197	2 
[0, 4, 3, 3, 242]  	180	2 
[0, 0, 10, 2, 242]  	216	1 
[0, 0, 5, 6, 242]  	223	1 
[0, 0, 0, 10, 242]  	230	1 
[0, 4, 4, 2, 244]  	174	2 
[0, 0, 12, 0, 244]  	204	1 
[0, 0, 11, 1, 244]  	210	1 
[0, 4, 7, 0, 246]  	179	1 
[0, 0, 11, 0, 246]  	187	1 
[0, 0, 6, 4, 246]  	194	1 
[0, 0, 1, 8, 246]  	201	1 
[0, 0, 7, 3, 248]  	188	1 
[0, 0, 3, 6, 248]  	189	1 
[0, 0, 2, 7, 248]  	195	1 
[0, 4, 3, 2, 250]  	157	1 
[0, 0, 2, 6, 250]  	172	1 
[0, 2, 7, 2, 250]  	195	2 
[0, 4, 3, 1, 252]  	134	1 
[0, 4, 5, 0, 252]  	145	1 
[0, 0, 2, 5, 252]  	149	1 
[0, 4, 0, 4, 252]  	152	1 
[0, 0, 4, 4, 252]  	160	1 
[0, 0, 10, 0, 252]  	170	1 
[0, 10, 0, 1, 252]  	173	1 
[0, 0, 0, 8, 252]  	184	1 
[0, 2, 8, 1, 252]  	189	2 
[0, 4, 3, 0, 254]  	111	1 
[4, 0, 4, 1, 254]  	119	2 
[0, 0, 2, 4, 254]  	126	1 
[0, 10, 0, 0, 254]  	150	1 
[1, 0, 4, 0, 255]  	75	2 
[4, 5, 0, 0, 255]  	103	1 
[3, 5, 0, 1, 255]  	119	2 
[0, 9, 0, 0, 255]  	135	1 
------
The gap is between 13 and 239.
Lengths: 2 2 5 5 2 3.
For 214 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^8
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^9*w^2

For 122 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3*z^1*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^4

For 30 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2

Extra powers of p used 5.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[14897743981586652224 + 6303991343807010267*2^64 + 1693063102741730180*2^128 + 25870941820*2^192,5996051799669575518 + 2884150216295785100*2^64 + 6222508117900023683*2^128 + 21323110664*2^192,12289929517432891392 + 17861081823071315465*2^64 + 7830937898443398034*2^128 + 3699142062*2^192,11529435858512708136 + 17489494130538671093*2^64 + 15697557018749282427*2^128 + 3629242686*2^192,14122414661090832096 + 17536986417568364899*2^64 + 18369212820025470318*2^128 + 955691800*2^192,8115134377130384704 + 16316810321338719172*2^64 + 4815663951896063875*2^128 + 27862672272*2^192,13946927267970061312 + 2776446517906465627*2^64 + 7406363284837527842*2^128 + 26329457174*2^192,3755449179503683840 + 9665329200976307571*2^64 + 3545787985762610460*2^128 + 15227171980*2^192,17286259763190840832 + 11456767230975106545*2^64 + 10144099593796863702*2^128 + 21141844106*2^192;\
17634969144747507456 + 4971981822493971669*2^64 + 12178702422189002894*2^128 + 23843947484*2^192,11960745169735204864 + 11954123208489012187*2^64 + 6128209833597367058*2^128 + 31380301145*2^192,17191692748328087552 + 5504194815164729671*2^64 + 7010423368066339610*2^128 + 28704740882*2^192,11858181669896462336 + 17555813131106317298*2^64 + 10831866268079945988*2^128 + 30037191036*2^192,10978017824389398528 + 12302898871890232372*2^64 + 13094481943489761494*2^128 + 34047211298*2^192,1051751543921226880 + 16300865187398363385*2^64 + 7192626723505327250*2^128 + 4946805484*2^192,12868283771455895040 + 13844250317978116946*2^64 + 13188729785299955965*2^128 + 15601816882*2^192,17492924353701677824 + 4248524269993861059*2^64 + 7519779001866823959*2^128 + 14797593538*2^192,13923294497028101120 + 14657492549553469924*2^64 + 4721828776535786322*2^128 + 9798241917*2^192;\
16111495160011280384 + 4667754691311977212*2^64 + 1126932203665908811*2^128 + 13995420896*2^192,13721080066730724128 + 4888980599707662321*2^64 + 10286845656358763714*2^128 + 4463678593*2^192,9354297564205056064 + 364609334078356079*2^64 + 5807863679871254351*2^128 + 9605650045*2^192,10845553020460149760 + 2083743468061126259*2^64 + 12016799490738222720*2^128 + 2563431799*2^192,6248859623095040000 + 5925176076871428427*2^64 + 3404515732249358403*2^128 + 10476133950*2^192,11358093385896111104 + 7314959323874168107*2^64 + 15041799389259409158*2^128 + 15928627410*2^192,18066999869442297856 + 3170672278616303480*2^64 + 17011742368373557367*2^128 + 12095539413*2^192,12080098813420058624 + 9452321608765750982*2^64 + 10951613900750816938*2^128 + 4948449412*2^192,12981237037937647616 + 17453218883141349032*2^64 + 5563963504447984273*2^128 + 10191662076*2^192;\
13188591600384022144 + 1718138193548449093*2^64 + 16148603998634267929*2^128 + 34327076331*2^192,6608666778949152256 + 3757604548755395938*2^64 + 8552733864753136323*2^128 + 29819880027*2^192,12066482408781942784 + 17600734263576351800*2^64 + 1105247648287296549*2^128 + 22323980158*2^192,7383414546659291136 + 5492613823154960896*2^64 + 7108391843003543955*2^128 + 16631444466*2^192,10810336009894920192 + 15962116490497364220*2^64 + 1444545880334993447*2^128 + 15485734281*2^192,10654159016237577472 + 11085698798532697344*2^64 + 18013615329770094591*2^128 + 4215692327*2^192,6054822678840116992 + 565160692091012224*2^64 + 12114366173542277111*2^128 + 12123790746*2^192,13899633874058396800 + 7982253591479255869*2^64 + 5025184585751436871*2^128 + 25493439532*2^192,12334892981075447808 + 3829996192431773695*2^64 + 5585157200241972155*2^128 + 21595689034*2^192;\
799326676619373440 + 7480298120271761058*2^64 + 8852998991508953454*2^128 + 11764246306*2^192,10860655725152743780 + 12597093887300098452*2^64 + 13618037702373344418*2^128 + 7749086244*2^192,17766449892057804800 + 3334528571966130764*2^64 + 7926994457869688866*2^128 + 9727209378*2^192,18142987860833964016 + 11085824559858106591*2^64 + 12998049913970099332*2^128 + 16991498668*2^192,15228375100239991872 + 10502200282450908800*2^64 + 9308959104925877128*2^128 + 17031747335*2^192,13094614802725508992 + 5732272497904830611*2^64 + 6323736428165553038*2^128 + 11907590486*2^192,17905021969301626880 + 2294647140468978277*2^64 + 17678272327754441363*2^128 + 5627509970*2^192,10655611242004697600 + 12280241675296048000*2^64 + 1522397190390829379*2^128 + 2394371556*2^192,4308237062546306048 + 4845289308243440104*2^64 + 8615281898232024731*2^128 + 15517374630*2^192;\
11559761365206530976 + 3219662819488078308*2^64 + 4235536836635208767*2^128 + 31411780252*2^192,18093313481155076096 + 1530606670680670067*2^64 + 3595421044419944092*2^128 + 22414111956*2^192,2052078338347738624 + 6652580664266448401*2^64 + 5894087511305586056*2^128 + 16824562078*2^192,11784274637443159040 + 5366744087892679087*2^64 + 9701819810501351922*2^128 + 14375504843*2^192,9678131777878077440 + 6629985664292190470*2^64 + 17844257744675065453*2^128 + 23265247110*2^192,13294139648730718208 + 8884821134097598*2^64 + 15850947158859285271*2^128 + 25186931831*2^192,3499872552568375616 + 1168950003673253829*2^64 + 12314771127749922282*2^128 + 25324508195*2^192,7882644076698918912 + 5876107460846299219*2^64 + 161864347426369337*2^128 + 26508106657*2^192,15839932998807527040 + 181204799383561997*2^64 + 14023807007710249799*2^128 + 25520771725*2^192;\
9870887205090856736 + 12145802456436399296*2^64 + 15040328586358419965*2^128 + 5862302702*2^192,16204119070135209483 + 5896806724402720302*2^64 + 504836047902100625*2^128 + 28358698851*2^192,5407563378621744128 + 15356183378485071074*2^64 + 1821787054338625149*2^128 + 21081622157*2^192,17774616520529704164 + 17709438845296022350*2^64 + 12906492526700095395*2^128 + 20218506887*2^192,17447535590085367664 + 1900286284895132248*2^64 + 18230989526303645940*2^128 + 17559482393*2^192,9349503055505854368 + 9358042176969587312*2^64 + 3028574617192041689*2^128 + 3841388871*2^192,17397203976822583296 + 4300772548243239938*2^64 + 3194709599197875434*2^128 + 18655903895*2^192,1609656022826390912 + 8028450370146131347*2^64 + 5738669055122227964*2^128 + 11211027805*2^192,1126149003986117376 + 10437613859474199512*2^64 + 3097192391331592641*2^128 + 9709930183*2^192;\
7172218238440694336 + 15667234217702673025*2^64 + 14145351895324603116*2^128 + 24262708678*2^192,4406565296664046208 + 13505983090731845362*2^64 + 72830372497593866*2^128 + 29637555411*2^192,7784737304929225216 + 18003570040344655125*2^64 + 16978656090915406545*2^128 + 29306101361*2^192,7047577778327168000 + 10075088967465860828*2^64 + 1565318747964864286*2^128 + 20943954286*2^192,16189543677652328448 + 5509588544485162732*2^64 + 787486192779001506*2^128 + 4964251417*2^192,2000061473571545088 + 11103784121141041471*2^64 + 652636592400823625*2^128 + 26477532667*2^192,8544545311029902080 + 9057913203248273050*2^64 + 14489390188020043639*2^128 + 19619710136*2^192,1321249276683911168 + 10757288853692326776*2^64 + 4298461216772191219*2^128 + 18432629270*2^192,3368273591571374208 + 2656249038786678351*2^64 + 12720760310927065981*2^128 + 16082622669*2^192;\
1784401934576821280 + 13538921437255964248*2^64 + 1272624704191832481*2^128 + 30624837891*2^192,7358522252156175111 + 8461733080153654322*2^64 + 5033258410202859892*2^128 + 27200974817*2^192,17614775225500173312 + 10541257699535382337*2^64 + 505730945128613557*2^128 + 29675266937*2^192,13476709251190746164 + 13483391031469701473*2^64 + 9532509635106876226*2^128 + 21545961884*2^192,15454455771649460080 + 8955608014430858908*2^64 + 16212269973682470115*2^128 + 14871164544*2^192,11007588714919083296 + 4747391431921970044*2^64 + 15321113178554997876*2^128 + 2090076710*2^192,10992939235897019392 + 17485532266664928660*2^64 + 998697589632027555*2^128 + 1161945444*2^192,12839590079642810496 + 16688507405756819631*2^64 + 8762605166252154735*2^128 + 31692814532*2^192,13872656982448852736 + 11476076615165912376*2^64 + 7091536960423423707*2^128 + 24543161664*2^192]
/* 
This matrix times 2^(-5) should be the matrix of frobenius.
*/ 
B = 2^(-5) * A; 
/* Freed 3488 lists. */
