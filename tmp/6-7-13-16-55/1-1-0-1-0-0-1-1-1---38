/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^7               = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^6 * z^1               = Coefficient of   y^1 * w^3               = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
The final length of G is 124
[2, 2, 1, 0, 0]  	39	3 
[7, 0, 0, 0, 0]  	42	4  <--- 1
[3, 2, 0, 1, 0]  	48	6 
[6, 0, 1, 0, 0]  	49	5 
[0, 6, 1, 0, 0]  	55	2 
[4, 1, 0, 2, 0]  	63	6 
[2, 1, 0, 3, 0]  	67	3 
[4, 1, 3, 0, 0]  	70	8 
[5, 6, 0, 0, 0]  	72	8 
[1, 1, 1, 3, 0]  	74	5 
[2, 7, 0, 1, 0]  	77	7 
[4, 0, 3, 1, 0]  	79	6 
[3, 0, 5, 0, 0]  	83	7 
[6, 0, 0, 3, 0]  	84	6 
[4, 0, 1, 3, 0]  	85	7 
[0, 5, 4, 0, 0]  	87	2 
[5, 0, 2, 2, 0]  	88	7 
[2, 0, 6, 0, 0]  	90	5 
[3, 0, 2, 3, 0]  	92	7 
[2, 0, 0, 5, 0]  	92	6 
[1, 0, 3, 3, 0]  	93	5 
[5, 0, 0, 4, 0]  	94	6 
[2, 12, 0, 0, 0]  	96	6 
[1, 5, 3, 1, 0]  	96	4 
[1, 13, 0, 0, 0]  	97	5 
[1, 4, 0, 4, 0]  	98	6 
[1, 5, 2, 2, 0]  	99	6 
[1, 2, 0, 5, 0]  	100	5 
[4, 11, 0, 0, 0]  	101	5 
[2, 0, 2, 4, 0]  	102	5 
[1, 4, 4, 1, 0]  	102	5 
[0, 8, 0, 3, 0]  	104	4 
[1, 4, 3, 2, 0]  	105	4 
[0, 4, 1, 4, 0]  	105	3 
[0, 6, 0, 4, 0]  	106	3 
[0, 13, 0, 1, 0]  	107	3 
[0, 2, 1, 5, 0]  	107	3 
[0, 4, 0, 5, 0]  	108	3 
[2, 0, 5, 2, 0]  	109	4 
[1, 1, 0, 6, 0]  	109	4 
[0, 5, 2, 3, 0]  	109	2 
[1, 2, 7, 0, 0]  	111	3 
[0, 3, 2, 4, 0]  	111	3 
[1, 4, 6, 0, 0]  	112	2 
[1, 0, 2, 5, 0]  	112	2 
[0, 16, 0, 0, 0]  	112	2  <--- 2
[0, 4, 4, 2, 0]  	112	2 
[0, 3, 7, 0, 0]  	112	2 
[0, 1, 2, 5, 0]  	113	2 
[1, 2, 6, 1, 0]  	114	2 
[0, 2, 4, 3, 0]  	114	2 
[1, 0, 1, 6, 0]  	115	2 
[0, 4, 3, 3, 0]  	115	2 
[1, 1, 8, 0, 0]  	117	3 
[0, 3, 0, 6, 0]  	117	4 
[1, 0, 0, 7, 0]  	118	3 
[0, 1, 0, 7, 0]  	119	1 
[0, 0, 3, 5, 0]  	119	1 
[0, 2, 7, 1, 0]  	121	1 
[1, 1, 6, 2, 0]  	123	4 
[0, 2, 6, 2, 0]  	124	2 
[0, 0, 1, 7, 0]  	125	1 
[1, 0, 8, 1, 0]  	126	1 
[0, 0, 6, 3, 0]  	126	1 
[0, 1, 8, 1, 0]  	127	1 
[0, 0, 0, 8, 0]  	128	1  <--- 4
[0, 1, 7, 2, 0]  	130	2 
[0, 2, 9, 0, 0]  	131	1 
[0, 0, 9, 1, 0]  	133	1 
[0, 1, 10, 0, 0]  	137	1 
[0, 0, 11, 0, 0]  	143	1  <--- 3
[2, 1, 2, 1, 1]  	61	5 
[1, 2, 0, 3, 1]  	68	4 
[1, 6, 0, 2, 1]  	80	5 
[1, 1, 4, 1, 1]  	81	4 
[5, 0, 4, 0, 1]  	82	8 
[3, 0, 4, 1, 1]  	86	8 
[3, 0, 3, 2, 1]  	89	6 
[1, 2, 3, 2, 1]  	91	5 
[2, 0, 5, 1, 1]  	93	6 
[1, 1, 0, 5, 1]  	93	5 
[3, 11, 0, 0, 1]  	95	5 
[1, 2, 6, 0, 1]  	98	5 
[1, 11, 0, 1, 1]  	99	5 
[1, 4, 5, 0, 1]  	99	5 
[1, 0, 1, 5, 1]  	99	4 
[1, 0, 0, 6, 1]  	102	4 
[0, 15, 0, 0, 1]  	105	3 
[0, 5, 3, 2, 1]  	106	3 
[1, 0, 8, 0, 1]  	110	4 
[1, 0, 7, 1, 1]  	113	2 
[1, 0, 6, 2, 1]  	116	4 
[0, 2, 3, 4, 1]  	117	3 
[0, 1, 5, 3, 1]  	120	2 
[2, 0, 4, 1, 2]  	80	6 
[1, 0, 6, 1, 2]  	100	4 
[0, 11, 0, 2, 2]  	109	3 
[0, 3, 5, 2, 2]  	118	2 
[0, 4, 6, 1, 2]  	122	2 
[1, 10, 0, 1, 3]  	92	6 
[2, 0, 2, 3, 4]  	86	7 
[1, 5, 1, 2, 251]  	86	5 
[0, 0, 2, 6, 253]  	122	1 
[1, 5, 3, 0, 254]  	80	4 
[0, 4, 0, 4, 254]  	92	3 
[1, 0, 2, 4, 254]  	96	3 
[0, 1, 1, 5, 254]  	100	1 
[0, 4, 2, 3, 254]  	102	2 
[0, 2, 7, 0, 254]  	105	1 
[0, 0, 1, 6, 254]  	109	1 
[0, 1, 6, 2, 254]  	117	2 
[0, 0, 8, 1, 254]  	120	1 
[0, 0, 1, 3, 255]  	61	1 
[0, 5, 1, 2, 255]  	80	2 
[4, 0, 2, 2, 255]  	82	5 
[1, 0, 0, 5, 255]  	86	3 
[0, 1, 0, 5, 255]  	87	1 
[0, 13, 0, 0, 255]  	91	3 
[1, 4, 2, 2, 255]  	92	4 
[0, 4, 5, 0, 255]  	93	2 
[0, 4, 4, 1, 255]  	96	1 
[0, 4, 3, 2, 255]  	99	2 
[0, 2, 6, 1, 255]  	108	1 
[0, 1, 8, 0, 255]  	111	1 
------
The gap is between 5 and 250.
Lengths: 2 2 5 6 2 3.
For 123 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 68 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^8
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^3*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 13 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[3605788824333517770 + 13940035880848394526*2^64 + 6699047079184000497*2^128 + 1763137520*2^192,4335270141676279016 + 7887502970744618580*2^64 + 12789461398794952165*2^128 + 724242902*2^192,14513899163475901056 + 3355412315830261170*2^64 + 2083554585859112541*2^128 + 1624901988*2^192,15854001673018718892 + 10806914384957039492*2^64 + 17172858013148327456*2^128 + 1581895601*2^192,1079548425436438384 + 14709916533823857753*2^64 + 1495499362425218871*2^128 + 653933255*2^192,14757199581557202912 + 8114731136283546857*2^64 + 18103482408518731916*2^128 + 1717248233*2^192,2807731878451071100 + 16482312436030007727*2^64 + 4721021892592810361*2^128 + 1993415860*2^192,9077025101202501928 + 15902457383835601608*2^64 + 7499315555487186127*2^128 + 185483166*2^192,17022461106934257784 + 5003036045468057976*2^64 + 1505457974031040735*2^128 + 2015347426*2^192;\
13761749079566333312 + 10451117979749374773*2^64 + 3550983881381616328*2^128 + 609441088*2^192,11037863030305516774 + 365967628218524036*2^64 + 18102829558083638052*2^128 + 765602086*2^192,13422931334599926528 + 12683711216288541667*2^64 + 16718772318247539113*2^128 + 1959155140*2^192,17756046649415219608 + 17962590345692809300*2^64 + 16878911328086080241*2^128 + 20777900*2^192,4634266319371173616 + 514883315731535473*2^64 + 1483684033556743926*2^128 + 499237559*2^192,7994656635680778888 + 148758618743133913*2^64 + 2178952120328838548*2^128 + 1962250543*2^192,510204947938609552 + 8985905217886830400*2^64 + 7778810613739531665*2^128 + 1702319572*2^192,2140180570826651272 + 16176195990286843492*2^64 + 16228984338342737221*2^128 + 1313036275*2^192,15607017264690703800 + 6368977586435980499*2^64 + 5596147434443469529*2^128 + 210231353*2^192;\
0 + 0*2^64 + 0*2^128 + 729808896*2^192,0 + 0*2^64 + 0*2^128 + 855638016*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 467573359*2^192,0 + 0*2^64 + 0*2^128 + 654311424*2^192,0 + 0*2^64 + 0*2^128 + 679477248*2^192,0 + 0*2^64 + 0*2^128 + 696254464*2^192,0 + 0*2^64 + 0*2^128 + 369098752*2^192,0 + 0*2^64 + 0*2^128 + 419430400*2^192,0 + 0*2^64 + 0*2^128 + 947912704*2^192;\
9597568272730095802 + 14739337186992488307*2^64 + 17939483192253158382*2^128 + 789263771*2^192,7684965063964539582 + 4957704983963951623*2^64 + 9168636031263109141*2^128 + 877062896*2^192,17957320828751838760 + 13176796709412978790*2^64 + 4449846210883631529*2^128 + 1599391218*2^192,16965887576314898804 + 6695752397738821747*2^64 + 6035116542107215817*2^128 + 287431055*2^192,7663261383875433164 + 6266492908854235709*2^64 + 14415878383920644863*2^128 + 108133857*2^192,9317261256976459232 + 4352858759444322837*2^64 + 3746554936362182032*2^128 + 1553386328*2^192,14100038151544985292 + 2836118725180694248*2^64 + 15374149174315899084*2^128 + 444256542*2^192,13355207374849378672 + 12067160511626133887*2^64 + 15111623606594965877*2^128 + 2035180580*2^192,4115401599716345864 + 12922018302648774821*2^64 + 17565241853451344203*2^128 + 2013290147*2^192;\
4439183222938165772 + 8947929849685528718*2^64 + 7205496845605985290*2^128 + 1338657794*2^192,6818160753476420440 + 10781469428320624010*2^64 + 6756418004904329941*2^128 + 303056342*2^192,11013302308114220528 + 18357876168068152807*2^64 + 5376059422339372865*2^128 + 749963617*2^192,11538407295403011372 + 12753536531642170604*2^64 + 16081500123031753937*2^128 + 643056967*2^192,1476809185963094964 + 8744513784377433685*2^64 + 15897021214372844476*2^128 + 591017515*2^192,9675690467008101168 + 11328316097789404362*2^64 + 1684020396187049904*2^128 + 1405645004*2^192,1756816178211806528 + 1529443952735503445*2^64 + 14884122892430726841*2^128 + 1327630015*2^192,18337284641934692792 + 5669026003252940206*2^64 + 679120147129161646*2^128 + 934641336*2^192,15368425658988820096 + 12886257421902773751*2^64 + 10068097612505211363*2^128 + 1377460273*2^192;\
1011742708550753343 + 17316652275905668540*2^64 + 14177667789154201928*2^128 + 1651028813*2^192,12217698447802528849 + 889532216293372614*2^64 + 7083897336740491232*2^128 + 2024115748*2^192,15130761471785992672 + 8855576828130775498*2^64 + 1398574606671276618*2^128 + 107656364*2^192,15161095502688433360 + 9737253435387852836*2^64 + 12496983751089610929*2^128 + 938152012*2^192,8583366503136063994 + 18110750256728351106*2^64 + 17619178887140173753*2^128 + 339432116*2^192,5414640989440299408 + 13997642286221664473*2^64 + 6080707796635954193*2^128 + 1874255857*2^192,11081026357256239330 + 8457151125053571109*2^64 + 16676164170140596471*2^128 + 1205520787*2^192,11582650549224234508 + 12618218094494253480*2^64 + 16547949864656146475*2^128 + 2014577148*2^192,1591935310536322156 + 11612042890301172061*2^64 + 1675925378840464815*2^128 + 1636447539*2^192;\
12625846697843564509 + 10173164216342701284*2^64 + 2223740098060101788*2^128 + 2050854536*2^192,7035073488680327239 + 9815803719467445557*2^64 + 12396018544826231968*2^128 + 1067160716*2^192,3472335594092531488 + 18264600944684846406*2^64 + 1629046874096181477*2^128 + 1187221417*2^192,12584873172214657830 + 16133792060515070849*2^64 + 1717721025999329521*2^128 + 2034787952*2^192,4691038421308763604 + 13270677640298975784*2^64 + 10434642277905411442*2^128 + 330298753*2^192,13708908981399915324 + 3540198498187892772*2^64 + 8859993494012218572*2^128 + 1720840114*2^192,14430337335380324490 + 6588306733144777846*2^64 + 7612484867778139248*2^128 + 154352672*2^192,3656554490145834772 + 13553386207965876111*2^64 + 10878694777892537774*2^128 + 1038809748*2^192,13406623742140724280 + 16233780819072059787*2^64 + 8797992359486900307*2^128 + 523594309*2^192;\
14688311321344540228 + 9092931383916546050*2^64 + 8765659288761371492*2^128 + 824755460*2^192,9492777703909230108 + 13109540657540689837*2^64 + 16560260617299033553*2^128 + 842749145*2^192,2534724907365493120 + 4261665191080876535*2^64 + 13975518604655243909*2^128 + 1043025762*2^192,14723796844908970328 + 12912202413445124021*2^64 + 2413514404911465393*2^128 + 949152976*2^192,2964695781531899144 + 7421324031299781997*2^64 + 7785488761420747672*2^128 + 913380324*2^192,10447303726778832400 + 3331804780790839406*2^64 + 18427399717237696825*2^128 + 621941793*2^192,7561796292736115672 + 11004566123514159102*2^64 + 766194099579479126*2^128 + 739027010*2^192,17533009244514196888 + 3240838285827203209*2^64 + 18144280485895085072*2^128 + 206867781*2^192,13174817756177753520 + 5324007773552469815*2^64 + 11548848857334747906*2^128 + 437629427*2^192;\
7403339699443804349 + 15683810800269298479*2^64 + 8455846735594822388*2^128 + 1119560054*2^192,16351020600587718267 + 10739664285790212038*2^64 + 1339249315132011062*2^128 + 1238098946*2^192,8459384078959197056 + 14006135228671447318*2^64 + 18114524170706589937*2^128 + 590470760*2^192,12890210862455241940 + 535826177882934918*2^64 + 17103921694095191485*2^128 + 299191461*2^192,8610346069415529334 + 14315593441920506946*2^64 + 9551647354373360869*2^128 + 649043314*2^192,9218997064331239208 + 12773416438889498234*2^64 + 3869118635177175756*2^128 + 2046286926*2^192,14519622420423243286 + 15716376739972475962*2^64 + 11563337858535286949*2^128 + 1258579375*2^192,9245554257089440516 + 18007316504244308868*2^64 + 1676755871384913645*2^128 + 2113272352*2^192,1573834405393289844 + 2733488305619562665*2^64 + 6630109815516637070*2^128 + 586814312*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4300 lists. */
