/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^7               = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^6 * z^1               = Coefficient of   y^1 * w^3               = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^7 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
The final length of G is 121
[3, 3, 0, 0, 0]  	39	4 
[7, 0, 0, 0, 0]  	42	4  <--- 1
[6, 0, 1, 0, 0]  	49	5 
[1, 7, 0, 0, 0]  	55	3 
[1, 1, 2, 1, 0]  	55	3 
[4, 1, 0, 2, 0]  	63	5 
[2, 1, 0, 3, 0]  	67	3 
[5, 2, 2, 0, 0]  	70	7 
[5, 0, 2, 1, 0]  	72	6 
[4, 2, 3, 0, 0]  	77	5 
[3, 1, 4, 0, 0]  	77	7 
[5, 0, 0, 3, 0]  	78	7 
[4, 0, 3, 1, 0]  	79	5 
[3, 0, 1, 3, 0]  	79	7 
[1, 2, 1, 3, 0]  	81	5 
[2, 1, 5, 0, 0]  	84	7 
[3, 0, 4, 1, 0]  	86	7 
[2, 6, 0, 2, 0]  	86	7 
[2, 5, 3, 0, 0]  	86	7 
[2, 0, 2, 3, 0]  	86	7 
[1, 6, 3, 0, 0]  	87	3 
[1, 0, 5, 1, 0]  	87	5 
[4, 0, 5, 0, 0]  	89	6 
[3, 0, 3, 2, 0]  	89	6 
[2, 0, 6, 0, 0]  	90	5 
[1, 3, 0, 4, 0]  	91	4 
[2, 5, 1, 2, 0]  	92	7 
[2, 4, 4, 0, 0]  	92	5 
[1, 6, 1, 2, 0]  	93	5 
[1, 1, 0, 5, 0]  	93	5 
[1, 0, 3, 3, 0]  	93	5 
[0, 7, 1, 2, 0]  	94	5 
[2, 0, 4, 2, 0]  	96	4 
[1, 0, 2, 4, 0]  	96	4 
[1, 0, 7, 0, 0]  	97	5 
[0, 7, 0, 3, 0]  	97	3 
[3, 0, 0, 5, 0]  	98	5 
[1, 2, 6, 0, 0]  	98	4 
[0, 14, 0, 0, 0]  	98	5  <--- 2
[1, 4, 5, 0, 0]  	99	3 
[1, 0, 1, 5, 0]  	99	5 
[0, 12, 0, 1, 0]  	100	4 
[0, 7, 4, 0, 0]  	101	4 
[1, 0, 0, 6, 0]  	102	4 
[0, 10, 0, 2, 0]  	102	4 
[0, 11, 2, 0, 0]  	103	4 
[0, 6, 1, 3, 0]  	103	3 
[0, 13, 1, 0, 0]  	104	5 
[0, 9, 2, 1, 0]  	105	3 
[0, 11, 1, 1, 0]  	106	5 
[0, 6, 5, 0, 0]  	107	3 
[0, 2, 1, 5, 0]  	107	3 
[0, 10, 3, 0, 0]  	109	3 
[0, 8, 3, 1, 0]  	111	4 
[0, 4, 4, 2, 0]  	112	2 
[0, 3, 7, 0, 0]  	112	2 
[0, 6, 3, 2, 0]  	113	2 
[0, 5, 6, 0, 0]  	113	2 
[0, 1, 2, 5, 0]  	113	2 
[0, 2, 4, 3, 0]  	114	2 
[0, 5, 0, 5, 0]  	115	3 
[0, 5, 5, 1, 0]  	116	3 
[0, 3, 0, 6, 0]  	117	3 
[0, 4, 2, 4, 0]  	118	2 
[0, 1, 0, 7, 0]  	119	1 
[0, 0, 3, 5, 0]  	119	1 
[0, 2, 7, 1, 0]  	121	1 
[0, 4, 6, 1, 0]  	122	2 
[0, 0, 1, 7, 0]  	125	1 
[0, 0, 6, 3, 0]  	126	1 
[0, 1, 8, 1, 0]  	127	1 
[0, 0, 0, 8, 0]  	128	1  <--- 4
[0, 1, 7, 2, 0]  	130	2 
[0, 3, 6, 2, 0]  	131	1 
[0, 2, 9, 0, 0]  	131	1 
[0, 0, 9, 1, 0]  	133	1 
[0, 1, 10, 0, 0]  	137	1 
[0, 0, 11, 0, 0]  	143	1  <--- 3
[3, 2, 0, 1, 1]  	48	6 
[4, 1, 3, 0, 1]  	70	7 
[1, 6, 2, 0, 1]  	74	6 
[1, 5, 3, 0, 1]  	80	4 
[5, 0, 4, 0, 1]  	82	7 
[3, 0, 5, 0, 1]  	83	7 
[1, 1, 1, 4, 1]  	90	4 
[1, 1, 6, 0, 1]  	91	6 
[2, 0, 0, 5, 1]  	92	6 
[1, 6, 0, 3, 1]  	96	5 
[0, 6, 2, 2, 1]  	100	4 
[0, 4, 1, 4, 1]  	105	3 
[0, 6, 0, 4, 1]  	106	3 
[0, 6, 4, 1, 1]  	110	4 
[0, 4, 3, 3, 1]  	115	2 
[0, 2, 3, 4, 1]  	117	3 
[0, 3, 5, 2, 1]  	118	2 
[0, 1, 5, 3, 1]  	120	2 
[0, 2, 6, 2, 1]  	124	2 
[2, 4, 1, 2, 2]  	85	6 
[0, 5, 3, 2, 2]  	106	3 
[0, 5, 2, 3, 2]  	109	3 
[0, 4, 0, 5, 3]  	108	3 
[0, 3, 2, 4, 4]  	111	3 
[0, 10, 1, 1, 5]  	99	4 
[0, 5, 0, 4, 252]  	99	3 
[0, 2, 5, 2, 253]  	111	2 
[2, 3, 4, 0, 254]  	85	5 
[0, 4, 6, 0, 254]  	106	2 
[0, 3, 3, 3, 254]  	108	2 
[0, 4, 5, 1, 254]  	109	2 
[0, 1, 9, 0, 254]  	124	1 
[1, 0, 2, 1, 255]  	48	2 
[0, 13, 0, 0, 255]  	91	2 
[0, 2, 6, 0, 255]  	92	1 
[0, 4, 5, 0, 255]  	93	2 
[0, 10, 2, 0, 255]  	96	2 
[0, 0, 2, 5, 255]  	106	1 
[0, 2, 0, 6, 255]  	110	2 
[0, 1, 8, 0, 255]  	111	1 
[0, 0, 0, 7, 255]  	112	1 
[0, 1, 6, 2, 255]  	117	2 
[0, 0, 8, 1, 255]  	120	1 
------
The gap is between 6 and 251.
Lengths: 2 2 5 5 2 2.
For 123 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 68 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^2*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 13 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 0.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[2678302905291482792 + 6822952224228601937*2^64 + 12831688123768525404*2^128 + 2086601804*2^192,7937326122505092086 + 4980079326749475965*2^64 + 17529780770012234987*2^128 + 861457967*2^192,9980485523731415832 + 15082171804376857666*2^64 + 6192135071022477051*2^128 + 1042054490*2^192,13591021843933530328 + 17682290695631927151*2^64 + 2464580656825440136*2^128 + 876700974*2^192,3371445485363410888 + 4193130997892474730*2^64 + 4652647075322322457*2^128 + 96847276*2^192,11127748218652865648 + 11026501087132631812*2^64 + 6863485854381266628*2^128 + 1162789582*2^192,3109795805215334488 + 4934581109725474298*2^64 + 7351323901753803859*2^128 + 1790733589*2^192,3479559838222755504 + 14017561082512657016*2^64 + 2815454481987098702*2^128 + 1034903501*2^192,9901516819115798464 + 11876820015683365568*2^64 + 7147660506410007178*2^128 + 1421632802*2^192;\
11389764158786040566 + 5733441376835332944*2^64 + 16672904821523977826*2^128 + 992406031*2^192,6513434521456486278 + 13491425319113523277*2^64 + 12209916470768093533*2^128 + 2058379260*2^192,10078677533187400904 + 6206897248845040665*2^64 + 7122840617210924691*2^128 + 1069675474*2^192,222911365350040648 + 1763091785449420805*2^64 + 17876523724298856690*2^128 + 158036217*2^192,6446002126708343640 + 15313103662592692962*2^64 + 9350265201387021624*2^128 + 1584398516*2^192,7700890238354874008 + 9199036097715558924*2^64 + 10959568578334684268*2^128 + 1184048749*2^192,13841409652083694808 + 3247132174070458829*2^64 + 15559318615863970532*2^128 + 33319930*2^192,13699607763936296608 + 5579099337123380248*2^64 + 12851970752911198310*2^128 + 865691169*2^192,11841176764039955824 + 8002514462267494073*2^64 + 10675366075677535649*2^128 + 887688734*2^192;\
0 + 0*2^64 + 0*2^128 + 150994944*2^192,0 + 0*2^64 + 0*2^128 + 570425344*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 1004444271*2^192,0 + 0*2^64 + 0*2^128 + 809500672*2^192,0 + 0*2^64 + 0*2^128 + 41943040*2^192,0 + 0*2^64 + 0*2^128 + 549453824*2^192,0 + 0*2^64 + 0*2^128 + 658505728*2^192,0 + 0*2^64 + 0*2^128 + 79691776*2^192,0 + 0*2^64 + 0*2^128 + 675282944*2^192;\
6848189930236087770 + 4496923814739629502*2^64 + 9507846105884328992*2^128 + 1397481181*2^192,16479803244648904400 + 1236606040564462919*2^64 + 6068396156951760792*2^128 + 874579355*2^192,14104462718811186956 + 6054568059250607275*2^64 + 17750453852299602728*2^128 + 437278340*2^192,3030413166162555996 + 18149750070188458647*2^64 + 12955821205195088382*2^128 + 707851822*2^192,7622452066753980588 + 3963586146251101256*2^64 + 16663580568437765672*2^128 + 1048582760*2^192,8634087231936690528 + 2893552239211104978*2^64 + 11759936976474295382*2^128 + 1642687157*2^192,4382204693031283456 + 17329883972058470833*2^64 + 7533995892655460805*2^128 + 1821632189*2^192,2100811353230454704 + 13778758822543921259*2^64 + 14709037728925457514*2^128 + 478285515*2^192,12780508328661744384 + 16580875031724590628*2^64 + 341063458096922428*2^128 + 1099589616*2^192;\
0 + 0*2^64 + 0*2^128 + 137363456*2^192,0 + 0*2^64 + 0*2^128 + 283115520*2^192,1672582860608897024 + 16880194292880330228*2^64 + 1715106527621221095*2^128 + 511888647*2^192,0 + 0*2^64 + 0*2^128 + 1718616064*2^192,3656059780797038596 + 12663948785339803328*2^64 + 16102500413626714952*2^128 + 127303568*2^192,0 + 0*2^64 + 0*2^128 + 190840832*2^192,0 + 0*2^64 + 0*2^128 + 1753219072*2^192,0 + 0*2^64 + 0*2^128 + 161480704*2^192,0 + 0*2^64 + 0*2^128 + 629145600*2^192;\
10466655577801973619 + 819567480952533186*2^64 + 12232275825448260598*2^128 + 1561652270*2^192,13151047960307557431 + 15116831514010631866*2^64 + 9466008718490433490*2^128 + 63685708*2^192,17886372187738819320 + 2292867156205918817*2^64 + 111105928496863337*2^128 + 112870426*2^192,6120182131635868176 + 16660787458975206284*2^64 + 2746030328614226029*2^128 + 1541775649*2^192,16246015704977980152 + 5646725275818029600*2^64 + 5709657782546688948*2^128 + 2006390462*2^192,754146662625371464 + 10394561080034780521*2^64 + 9716965088304601251*2^128 + 910579491*2^192,10449654677955638984 + 9603817170720765880*2^64 + 8705037536640257333*2^128 + 1089564113*2^192,13469601286279522600 + 17510520980006453069*2^64 + 16322729071203670144*2^128 + 991703260*2^192,11549299617381796672 + 12363366775720360977*2^64 + 7392256125038076550*2^128 + 2120450252*2^192;\
17106489455772544478 + 4020932124003873842*2^64 + 4575831008041522179*2^128 + 1229866964*2^192,180965716771794512 + 7530012448178446676*2^64 + 11240971425882542319*2^128 + 223033426*2^192,15689580648095294284 + 8522035083050220745*2^64 + 4819751107751491313*2^128 + 2931516*2^192,1382791207166528472 + 4356819848708123555*2^64 + 7571081305510032420*2^128 + 263890403*2^192,5871084068785980652 + 14318851173458416690*2^64 + 6781443232320344055*2^128 + 1546895270*2^192,11454196196296719168 + 11610264669619596036*2^64 + 160370067150181248*2^128 + 187534839*2^192,18126015266708331108 + 4877388430230475443*2^64 + 5477581354183425241*2^128 + 1062149915*2^192,12399564068466848688 + 6637263847494013048*2^64 + 4016295634162338069*2^128 + 471136755*2^192,4693828416203705752 + 15120986273895843477*2^64 + 12556486940999755712*2^128 + 1920467015*2^192;\
5399561878785299180 + 6620566954897111015*2^64 + 10190451773962379055*2^128 + 1674311606*2^192,289841197425585392 + 10630256841129802956*2^64 + 12930774273290131558*2^128 + 1551490884*2^192,10003603675293855960 + 11657793128980189896*2^64 + 15591783825839029920*2^128 + 1805151323*2^192,1629094914237680280 + 17473721103073840324*2^64 + 5040662166797638150*2^128 + 804780521*2^192,696436047985408264 + 14702417741972715478*2^64 + 11595504823499135973*2^128 + 1521742103*2^192,8569067332106029864 + 10610651011180815510*2^64 + 1670749826396872620*2^128 + 1288491731*2^192,16467202893293401008 + 17000172000580561024*2^64 + 6929822972426597846*2^128 + 1937085565*2^192,9906344301143646720 + 18021502741998597450*2^64 + 7323949843550400549*2^128 + 1840311634*2^192,2067357967223735224 + 1652953414925721212*2^64 + 14446909422861243156*2^128 + 559738572*2^192;\
6985305603366340222 + 12617256080284408061*2^64 + 5477781842756537661*2^128 + 1963468007*2^192,1196550494508347134 + 8411093164472615143*2^64 + 6801004787267082935*2^128 + 1917524300*2^192,783114281081841832 + 15709879009002066488*2^64 + 10809927038828338366*2^128 + 1955528235*2^192,877631806730029648 + 15021907255034273718*2^64 + 13420343462496248174*2^128 + 323617025*2^192,2148886784804360296 + 16102019326005400699*2^64 + 6295373960903486848*2^128 + 32403326*2^192,7001619256928733440 + 6557753954467222521*2^64 + 17379076108159119814*2^128 + 319656089*2^192,10958730469934138496 + 2471855874893124028*2^64 + 15462038600691985590*2^128 + 312169077*2^192,7083978966427560504 + 12792736912584488805*2^64 + 15176898968695121490*2^128 + 751751142*2^192,4025186691375504328 + 10510404368191832398*2^64 + 8733402773068844362*2^128 + 1160633945*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 5143 lists. */
