/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^7               = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^6 * z^1               = Coefficient of   y^1 * w^3               = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 154
[3, 3, 0, 0, 0]  	39	4 
[7, 0, 0, 0, 0]  	42	4  <--- 1
[3, 2, 0, 1, 0]  	48	4 
[6, 0, 1, 0, 0]  	49	3 
[0, 6, 1, 0, 0]  	55	2 
[5, 1, 2, 0, 0]  	63	6 
[5, 1, 0, 2, 0]  	69	6 
[4, 1, 3, 0, 0]  	70	5 
[5, 0, 2, 1, 0]  	72	7 
[3, 1, 0, 3, 0]  	73	4 
[4, 1, 1, 2, 0]  	76	9 
[5, 0, 0, 3, 0]  	78	8 
[4, 0, 3, 1, 0]  	79	6 
[3, 0, 1, 3, 0]  	79	8 
[3, 1, 3, 1, 0]  	80	5 
[1, 5, 3, 0, 0]  	80	5 
[4, 0, 2, 2, 0]  	82	6 
[3, 0, 5, 0, 0]  	83	8 
[3, 2, 4, 0, 0]  	84	8 
[2, 8, 0, 1, 0]  	84	8 
[3, 0, 4, 1, 0]  	86	7 
[2, 6, 0, 2, 0]  	86	7 
[0, 5, 4, 0, 0]  	87	2 
[3, 0, 3, 2, 0]  	89	5 
[2, 2, 0, 4, 0]  	90	8 
[2, 1, 3, 2, 0]  	90	7 
[2, 3, 2, 2, 0]  	91	8 
[2, 4, 4, 0, 0]  	92	7 
[2, 0, 5, 1, 0]  	93	6 
[1, 1, 0, 5, 0]  	93	6 
[2, 12, 0, 0, 0]  	96	6 
[2, 0, 4, 2, 0]  	96	6 
[2, 1, 6, 0, 0]  	97	7 
[3, 0, 0, 5, 0]  	98	6 
[2, 3, 5, 0, 0]  	98	6 
[1, 4, 0, 4, 0]  	98	6 
[1, 3, 3, 2, 0]  	98	6 
[2, 0, 3, 3, 0]  	99	4 
[1, 11, 0, 1, 0]  	99	4 
[1, 5, 2, 2, 0]  	99	5 
[1, 0, 1, 5, 0]  	99	4 
[1, 0, 6, 1, 0]  	100	4 
[2, 3, 4, 1, 0]  	101	7 
[2, 0, 2, 4, 0]  	102	6 
[1, 0, 0, 6, 0]  	102	4 
[1, 2, 4, 2, 0]  	104	6 
[1, 3, 6, 0, 0]  	105	3 
[0, 15, 0, 0, 0]  	105	3  <--- 2
[1, 0, 4, 3, 0]  	106	5 
[1, 2, 3, 3, 0]  	107	5 
[1, 10, 0, 2, 0]  	108	4 
[1, 3, 5, 1, 0]  	108	4 
[1, 0, 3, 4, 0]  	109	4 
[0, 5, 2, 3, 0]  	109	2 
[1, 2, 2, 4, 0]  	110	6 
[0, 9, 0, 3, 0]  	111	4 
[0, 5, 1, 4, 0]  	112	3 
[0, 4, 4, 2, 0]  	112	2 
[0, 1, 2, 5, 0]  	113	2 
[0, 14, 0, 1, 0]  	114	3 
[0, 4, 3, 3, 0]  	115	2 
[2, 0, 8, 0, 0]  	116	3 
[0, 3, 0, 6, 0]  	117	3 
[0, 4, 2, 4, 0]  	118	2 
[0, 3, 5, 2, 0]  	118	2 
[0, 4, 7, 0, 0]  	119	1 
[0, 1, 0, 7, 0]  	119	1 
[0, 0, 3, 5, 0]  	119	1 
[0, 4, 1, 5, 0]  	121	1 
[0, 3, 4, 3, 0]  	121	1 
[0, 2, 7, 1, 0]  	121	1 
[0, 4, 6, 1, 0]  	122	2 
[1, 0, 9, 0, 0]  	123	5 
[0, 3, 3, 4, 0]  	124	2 
[0, 2, 6, 2, 0]  	124	2 
[0, 3, 8, 0, 0]  	125	1 
[0, 0, 1, 7, 0]  	125	1 
[0, 0, 6, 3, 0]  	126	1 
[0, 2, 5, 3, 0]  	127	1 
[0, 1, 8, 1, 0]  	127	1 
[0, 0, 0, 8, 0]  	128	1  <--- 4
[0, 2, 4, 4, 0]  	130	2 
[0, 1, 7, 2, 0]  	130	2 
[0, 2, 9, 0, 0]  	131	1 
[0, 0, 9, 1, 0]  	133	1 
[0, 1, 10, 0, 0]  	137	1 
[0, 0, 11, 0, 0]  	143	1  <--- 3
[1, 1, 2, 1, 1]  	55	3 
[2, 2, 0, 3, 1]  	74	5 
[3, 1, 4, 0, 1]  	77	8 
[2, 1, 1, 3, 1]  	80	5 
[2, 0, 2, 3, 1]  	86	7 
[1, 1, 1, 4, 1]  	90	3 
[2, 2, 5, 0, 1]  	91	7 
[1, 0, 3, 3, 1]  	93	4 
[1, 0, 2, 4, 1]  	96	3 
[1, 4, 5, 0, 1]  	99	4 
[1, 9, 0, 2, 1]  	101	5 
[1, 5, 1, 3, 1]  	102	5 
[2, 0, 7, 0, 1]  	103	6 
[1, 14, 0, 0, 1]  	104	7 
[0, 4, 1, 4, 1]  	105	3 
[0, 3, 2, 4, 1]  	111	3 
[0, 3, 7, 0, 1]  	112	2 
[0, 3, 1, 5, 1]  	114	3 
[0, 2, 4, 3, 1]  	114	2 
[0, 2, 3, 4, 1]  	117	3 
[2, 0, 6, 0, 2]  	90	6 
[1, 3, 0, 4, 2]  	91	7 
[2, 5, 1, 2, 2]  	92	8 
[2, 0, 0, 5, 2]  	92	6 
[1, 13, 0, 0, 2]  	97	6 
[1, 7, 0, 3, 2]  	103	4 
[0, 6, 0, 4, 2]  	106	4 
[0, 13, 0, 1, 2]  	107	4 
[0, 2, 1, 5, 2]  	107	3 
[0, 4, 0, 5, 2]  	108	3 
[0, 11, 0, 2, 2]  	109	3 
[1, 0, 8, 0, 2]  	110	4 
[1, 2, 7, 0, 2]  	111	4 
[0, 5, 3, 2, 3]  	106	3 
[1, 1, 7, 0, 4]  	104	5 
[1, 2, 6, 0, 5]  	98	5 
[0, 1, 5, 3, 5]  	120	2 
[2, 4, 1, 2, 6]  	85	8 
[0, 0, 8, 1, 249]  	120	1 
[2, 3, 4, 0, 250]  	85	6 
[0, 4, 6, 0, 251]  	106	2 
[1, 10, 0, 1, 252]  	92	5 
[0, 14, 0, 0, 253]  	98	4 
[0, 2, 5, 2, 253]  	111	1 
[0, 1, 6, 2, 253]  	117	2 
[1, 0, 5, 1, 254]  	87	3 
[1, 0, 4, 2, 254]  	90	3 
[0, 13, 0, 0, 254]  	91	4 
[0, 5, 2, 2, 254]  	93	3 
[0, 0, 6, 1, 254]  	94	1 
[0, 0, 5, 2, 254]  	97	1 
[0, 8, 0, 3, 254]  	104	4 
[0, 2, 2, 4, 254]  	104	2 
[0, 1, 4, 3, 254]  	107	2 
[0, 3, 3, 3, 254]  	108	1 
[0, 4, 5, 1, 254]  	109	2 
[0, 1, 3, 4, 254]  	110	2 
[0, 0, 2, 6, 254]  	122	1 
[0, 1, 9, 0, 254]  	124	1 
[0, 0, 3, 1, 255]  	55	1 
[0, 1, 1, 3, 255]  	68	2 
[2, 7, 0, 1, 255]  	77	5 
[1, 0, 0, 5, 255]  	86	3 
[0, 2, 0, 5, 255]  	94	2 
[0, 7, 0, 3, 255]  	97	2 
[0, 1, 0, 6, 255]  	103	2 
[0, 0, 0, 7, 255]  	112	1 
------
The gap is between 7 and 248.
Lengths: 2 2 5 7 2 4.
For 123 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 68 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^8
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^2*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 13 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 3.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[3287423290208625638 + 11623069314517054475*2^64 + 10177401216081716822*2^128 + 1872687309*2^192,4918796059741880500 + 11861481442183718383*2^64 + 17358399780735386960*2^128 + 1825429840*2^192,203340770919292716 + 356379695665987137*2^64 + 16309581868072333888*2^128 + 2981456296*2^192,10801422128005578028 + 16846839366765408024*2^64 + 123617768626358849*2^128 + 1562551781*2^192,6387785370226759024 + 6363358548507674096*2^64 + 7920505257007075037*2^128 + 1460741445*2^192,2827270215930195528 + 14312600008777701477*2^64 + 6042805952473082115*2^128 + 2624398915*2^192,17581140288618832512 + 85797061183932405*2^64 + 7282059071525525540*2^128 + 3540301679*2^192,16751894323217293544 + 6824296893967717283*2^64 + 1714999235693875140*2^128 + 3840641873*2^192,18192861667741520208 + 3603263047772916445*2^64 + 18093307676533457840*2^128 + 2873562778*2^192;\
16319699817325408797 + 15796112563608375864*2^64 + 11480250873362969155*2^128 + 1567010944*2^192,10835870121361587698 + 16046268269003723364*2^64 + 16547194956918808774*2^128 + 1789389649*2^192,17339541446194187086 + 14063426578059947698*2^64 + 5771241821177348431*2^128 + 1900690799*2^192,10630944671623351586 + 5988949960606160450*2^64 + 7365570645560718616*2^128 + 118578253*2^192,9209537781491685092 + 3467927981879173660*2^64 + 6006162714516113167*2^128 + 2232945489*2^192,15174218442060581240 + 2459641095684475123*2^64 + 12100943728316935340*2^128 + 4232416988*2^192,2973402228300193608 + 5516075037163797634*2^64 + 11984348397018951225*2^128 + 315806191*2^192,12014420537798823108 + 17115787476605943653*2^64 + 8253361148487136288*2^128 + 373731930*2^192,5258377401844127056 + 16955213082865130212*2^64 + 11199173597695113090*2^128 + 1101441262*2^192;\
0 + 0*2^64 + 0*2^128 + 1610612736*2^192,0 + 0*2^64 + 0*2^128 + 1342177280*2^192,10250701138584141832 + 5237561937588078428*2^64 + 15069447012531778926*2^128 + 750597342*2^192,0 + 0*2^64 + 0*2^128 + 1409286144*2^192,0 + 0*2^64 + 0*2^128 + 805306368*2^192,0 + 0*2^64 + 0*2^128 + 2013265920*2^192,0 + 0*2^64 + 0*2^128 + 1409286144*2^192,0 + 0*2^64 + 0*2^128 + 603979776*2^192,0 + 0*2^64 + 0*2^128 + 603979776*2^192;\
0 + 0*2^64 + 0*2^128 + 704643072*2^192,0 + 0*2^64 + 0*2^128 + 603979776*2^192,0 + 0*2^64 + 0*2^128 + 671088640*2^192,10250701138584141832 + 5237561937588078428*2^64 + 15069447012531778926*2^128 + 280835294*2^192,0 + 0*2^64 + 0*2^128 + 2818572288*2^192,0 + 0*2^64 + 0*2^128 + 4160749568*2^192,0 + 0*2^64 + 0*2^128 + 4227858432*2^192,0 + 0*2^64 + 0*2^128 + 838860800*2^192,0 + 0*2^64 + 0*2^128 + 3321888768*2^192;\
14025994438948080084 + 10251458581228704484*2^64 + 1913250777815908966*2^128 + 164761302*2^192,5365550944437390080 + 7936001038349031725*2^64 + 14002482723317931089*2^128 + 988399169*2^192,18230605919615742152 + 6985194093927563321*2^64 + 4740099379933470217*2^128 + 3569782448*2^192,13947938508990741232 + 6982875348623088381*2^64 + 5419241422812545978*2^128 + 1020277834*2^192,15624511045437926336 + 15938528405065107273*2^64 + 4248999972847575949*2^128 + 618453905*2^192,6224212706409937336 + 471171274997308678*2^64 + 8600611489065286141*2^128 + 303047238*2^192,4204994456203728400 + 6650367775660433775*2^64 + 6636297818335663907*2^128 + 753100120*2^192,11101146842026940528 + 2967518386760311416*2^64 + 1334717605049384035*2^128 + 1852616349*2^192,18055792407005660912 + 11408538763406206914*2^64 + 2994705733971491750*2^128 + 3599485853*2^192;\
12215474128138419185 + 6180304072534111280*2^64 + 12096864194596267602*2^128 + 442681185*2^192,4274921443483066642 + 13696434668107611698*2^64 + 15665167619732220258*2^128 + 4142653948*2^192,13912858349195643082 + 6991914160033743483*2^64 + 5035302808460135312*2^128 + 3214610393*2^192,12007585813435221150 + 1326367252029879254*2^64 + 2018424710756997238*2^128 + 1685327608*2^192,8030185920876978404 + 1028501009016767479*2^64 + 327640833204910020*2^128 + 3595699057*2^192,16748216088450659496 + 6699519445159416306*2^64 + 14797755575711064932*2^128 + 1354052321*2^192,12746039304714802568 + 16540803839317603129*2^64 + 9032276847037332584*2^128 + 3935300241*2^192,5662956085106019724 + 5542949373358540869*2^64 + 7878236750896146810*2^128 + 130710378*2^192,8737619950366170912 + 10154025691250609790*2^64 + 1116858295879141381*2^128 + 4157732596*2^192;\
10495602687413236384 + 14827213563440897085*2^64 + 4752967858861550109*2^128 + 12162096*2^192,15672895927427471064 + 8080039596378434118*2^64 + 7595898204250424072*2^128 + 1019203783*2^192,9436965825018972118 + 8406867460565297314*2^64 + 2829109092855552522*2^128 + 1629015323*2^192,10617083642932507822 + 13851199987040401213*2^64 + 17213820532476403822*2^128 + 1099859455*2^192,8471397285869961512 + 2190295154166766050*2^64 + 5674625165566590724*2^128 + 413127938*2^192,17374768301890399004 + 6246841278200129748*2^64 + 12772057710335202172*2^128 + 640006547*2^192,10052117693126157400 + 11031867203446894175*2^64 + 11788085615362342192*2^128 + 1777469211*2^192,6165280301681084020 + 2445446295651810195*2^64 + 17652034852568709775*2^128 + 1702689408*2^192,16735376705716628056 + 15190635761919141081*2^64 + 16383252489249866967*2^128 + 2017624586*2^192;\
10590606686607884327 + 1631000455320400445*2^64 + 4149974657544589501*2^128 + 1755345356*2^192,8259102669087967398 + 10269428736433574780*2^64 + 7984838509473403349*2^128 + 915565910*2^192,14641188169220586950 + 1486834369093499076*2^64 + 13484486870780489432*2^128 + 2983427434*2^192,12597036193523067922 + 10368119152729890848*2^64 + 14244847199711156489*2^128 + 1274296775*2^192,1639090869211470460 + 16045232942341793721*2^64 + 17240046643181527832*2^128 + 1109361556*2^192,6762751921324575584 + 545098450125019069*2^64 + 7009969441280545796*2^128 + 2731975020*2^192,5544567818737615816 + 17644293212003889594*2^64 + 4345261067590136909*2^128 + 3418329149*2^192,18445008719669477060 + 10230037826746296421*2^64 + 17708695294925234662*2^128 + 1152779600*2^192,9399170534643366672 + 13064207377487836830*2^64 + 16102547063390909623*2^128 + 1226574600*2^192;\
135038524251200591 + 8256615711180103173*2^64 + 13705640081271645402*2^128 + 953208069*2^192,15937822817405689622 + 1344560184712467152*2^64 + 15561210640343586799*2^128 + 1750135276*2^192,1211567438362527766 + 12321013441792100059*2^64 + 16967650161133981565*2^128 + 3018701411*2^192,9420907311819910258 + 12372813832115143838*2^64 + 606209872571130700*2^128 + 2790985142*2^192,7922216362349722364 + 336179011099812386*2^64 + 18073344006752568488*2^128 + 3767758171*2^192,12245854128493117968 + 15052937626025423652*2^64 + 15027726953800262703*2^128 + 3653022332*2^192,16765640703044298952 + 8763789436587278022*2^64 + 1004785091371949666*2^128 + 3180696446*2^192,12969685588242964932 + 16341796284110795139*2^64 + 10621050692660541592*2^128 + 3362338828*2^192,4355584925552089760 + 11584826536009067512*2^64 + 14042397256647160683*2^128 + 3826050228*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 2666 lists. */
