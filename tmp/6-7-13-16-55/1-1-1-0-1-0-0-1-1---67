/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^7               = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^6 * z^1               = Coefficient of   y^1 * w^3               = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^7 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
The final length of G is 105
[3, 3, 0, 0, 0]  	39	3 
[7, 0, 0, 0, 0]  	42	2  <--- 1
[3, 2, 0, 1, 0]  	48	4 
[6, 0, 1, 0, 0]  	49	4 
[1, 7, 0, 0, 0]  	55	2 
[1, 1, 2, 1, 0]  	55	3 
[4, 1, 0, 2, 0]  	63	3 
[2, 1, 0, 3, 0]  	67	3 
[4, 1, 3, 0, 0]  	70	5 
[3, 1, 1, 2, 0]  	70	5 
[5, 0, 2, 1, 0]  	72	5 
[1, 6, 2, 0, 0]  	74	5 
[3, 1, 4, 0, 0]  	77	7 
[5, 0, 0, 3, 0]  	78	6 
[4, 0, 3, 1, 0]  	79	4 
[3, 0, 1, 3, 0]  	79	7 
[1, 2, 1, 3, 0]  	81	4 
[4, 0, 2, 2, 0]  	82	6 
[3, 0, 5, 0, 0]  	83	6 
[1, 2, 0, 4, 0]  	84	5 
[2, 4, 1, 2, 0]  	85	5 
[3, 0, 4, 1, 0]  	86	7 
[2, 6, 0, 2, 0]  	86	6 
[2, 5, 3, 0, 0]  	86	7 
[2, 0, 2, 3, 0]  	86	7 
[0, 6, 1, 2, 0]  	87	4 
[3, 0, 3, 2, 0]  	89	5 
[2, 0, 6, 0, 0]  	90	5 
[1, 1, 1, 4, 0]  	90	4 
[1, 1, 6, 0, 0]  	91	4 
[0, 13, 0, 0, 0]  	91	4  <--- 2
[2, 4, 4, 0, 0]  	92	7 
[2, 0, 5, 1, 0]  	93	4 
[1, 5, 4, 0, 0]  	93	5 
[1, 1, 0, 5, 0]  	93	4 
[1, 0, 3, 3, 0]  	93	4 
[2, 0, 4, 2, 0]  	96	6 
[1, 0, 7, 0, 0]  	97	4 
[0, 7, 0, 3, 0]  	97	3 
[3, 0, 0, 5, 0]  	98	5 
[0, 8, 2, 1, 0]  	98	4 
[1, 4, 5, 0, 0]  	99	3 
[1, 0, 1, 5, 0]  	99	4 
[1, 0, 6, 1, 0]  	100	4 
[0, 12, 0, 1, 0]  	100	4 
[0, 7, 4, 0, 0]  	101	4 
[1, 0, 0, 6, 0]  	102	5 
[1, 0, 5, 2, 0]  	103	4 
[0, 11, 1, 1, 0]  	106	3 
[0, 6, 0, 4, 0]  	106	4 
[0, 6, 5, 0, 0]  	107	3 
[0, 2, 1, 5, 0]  	107	3 
[0, 11, 0, 2, 0]  	109	3 
[0, 10, 3, 0, 0]  	109	3 
[0, 12, 2, 0, 0]  	110	4 
[0, 4, 4, 2, 0]  	112	2 
[0, 3, 7, 0, 0]  	112	2 
[0, 5, 6, 0, 0]  	113	2 
[0, 1, 2, 5, 0]  	113	2 
[0, 2, 4, 3, 0]  	114	2 
[0, 5, 0, 5, 0]  	115	3 
[0, 3, 0, 6, 0]  	117	3 
[0, 4, 2, 4, 0]  	118	3 
[0, 1, 0, 7, 0]  	119	1 
[0, 0, 3, 5, 0]  	119	1 
[0, 2, 7, 1, 0]  	121	1 
[0, 4, 6, 1, 0]  	122	2 
[0, 0, 1, 7, 0]  	125	1 
[0, 0, 6, 3, 0]  	126	1 
[0, 1, 8, 1, 0]  	127	1 
[0, 0, 0, 8, 0]  	128	1  <--- 4
[0, 1, 7, 2, 0]  	130	2 
[0, 3, 6, 2, 0]  	131	1 
[0, 2, 9, 0, 0]  	131	1 
[0, 0, 9, 1, 0]  	133	1 
[0, 1, 10, 0, 0]  	137	1 
[0, 0, 11, 0, 0]  	143	1  <--- 3
[1, 6, 0, 2, 1]  	80	4 
[0, 5, 1, 3, 1]  	96	3 
[0, 5, 3, 2, 1]  	106	3 
[0, 4, 3, 3, 1]  	115	2 
[0, 2, 3, 4, 1]  	117	3 
[0, 3, 5, 2, 1]  	118	2 
[0, 1, 5, 3, 1]  	120	2 
[0, 5, 0, 4, 2]  	99	3 
[0, 4, 1, 4, 2]  	105	3 
[0, 4, 0, 5, 2]  	108	3 
[0, 3, 2, 4, 2]  	111	3 
[2, 0, 0, 5, 3]  	92	5 
[0, 10, 0, 2, 3]  	102	4 
[0, 5, 4, 1, 3]  	103	3 
[0, 2, 6, 2, 4]  	124	2 
[0, 1, 9, 0, 251]  	124	1 
[0, 9, 3, 0, 253]  	102	3 
[0, 1, 0, 6, 253]  	103	2 
[1, 5, 3, 0, 255]  	80	3 
[0, 4, 0, 4, 255]  	92	3 
[0, 3, 3, 2, 255]  	92	2 
[0, 2, 6, 0, 255]  	92	1 
[1, 0, 2, 4, 255]  	96	2 
[0, 0, 0, 6, 255]  	96	1 
[0, 2, 5, 2, 255]  	111	2 
[0, 1, 8, 0, 255]  	111	1 
[0, 1, 6, 2, 255]  	117	2 
[0, 0, 8, 1, 255]  	120	1 
------
The gap is between 5 and 250.
Lengths: 2 2 5 5 2 2.
For 123 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 68 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^2*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 13 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 0.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[9024554590466449926 + 3572412994740409424*2^64 + 7958675313683086011*2^128 + 1051699884*2^192,2656143748603991534 + 4633685370321073859*2^64 + 11344271313666453601*2^128 + 235319387*2^192,9018478401512696088 + 13349628070989858916*2^64 + 15110242572128394943*2^128 + 141801089*2^192,11098066566902731184 + 3019375013430727027*2^64 + 3274378596591442190*2^128 + 1357545020*2^192,13245085429635079416 + 10859900677247904640*2^64 + 16230735226255233588*2^128 + 2025705291*2^192,2227282651835886064 + 13871498883258663755*2^64 + 10912323840096623496*2^128 + 2003486654*2^192,3383396393581132840 + 3965339227911769712*2^64 + 15781762521728204811*2^128 + 42331877*2^192,5821710819120014128 + 13363513676055088048*2^64 + 16158671713431200997*2^128 + 1283093665*2^192,12814077477176632496 + 13185353473121671778*2^64 + 1550580725308904836*2^128 + 499367558*2^192;\
14520746189999613344 + 1108137032607948415*2^64 + 13430379254007041233*2^128 + 479493207*2^192,8597987840539325282 + 13955121793584254540*2^64 + 6094532912357748843*2^128 + 1426412327*2^192,13074239041767963008 + 14137899912993068468*2^64 + 13954224615948562790*2^128 + 1433318347*2^192,9274974583970116864 + 7901118475648134774*2^64 + 8520132210454697559*2^128 + 339586248*2^192,8233178882544162688 + 15952640489445027506*2^64 + 11874787206013510985*2^128 + 1643401592*2^192,2608125221008963840 + 12012669381615599956*2^64 + 1884663471486160513*2^128 + 1078234756*2^192,12446722793926975488 + 9696542145813392935*2^64 + 15243660959500036756*2^128 + 1504590471*2^192,4086541968714065536 + 2786088673257495763*2^64 + 10810527288052534062*2^128 + 1679774439*2^192,17187364079215699584 + 13376081566713953658*2^64 + 3839977690474251821*2^128 + 236760632*2^192;\
0 + 0*2^64 + 0*2^128 + 1002438656*2^192,0 + 0*2^64 + 0*2^128 + 83886080*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 333355631*2^192,0 + 0*2^64 + 0*2^128 + 272629760*2^192,0 + 0*2^64 + 0*2^128 + 817889280*2^192,0 + 0*2^64 + 0*2^128 + 935329792*2^192,0 + 0*2^64 + 0*2^128 + 859832320*2^192,0 + 0*2^64 + 0*2^128 + 834666496*2^192,0 + 0*2^64 + 0*2^128 + 452984832*2^192;\
6598529783424778378 + 12124877521617426011*2^64 + 9151421903666468640*2^128 + 1483995478*2^192,7573446095445018324 + 11259676452232361048*2^64 + 2937938556268987053*2^128 + 400922583*2^192,15014420164967926088 + 531978247244293583*2^64 + 6631619098990445114*2^128 + 133280595*2^192,8822870243103712540 + 2099998795878483287*2^64 + 2320910538618076194*2^128 + 1881086417*2^192,6529036551821720808 + 1493924324234124067*2^64 + 535819482810587790*2^128 + 1515011439*2^192,800365906521734616 + 13117232353995327041*2^64 + 17427489915249283645*2^128 + 1175743650*2^192,7552517698718870728 + 7690181327439281622*2^64 + 2194323012465362349*2^128 + 230279042*2^192,12353194908417644288 + 6808286898014389340*2^64 + 14122182893824512624*2^128 + 516370813*2^192,15166999442695365120 + 13533200000593139418*2^64 + 8741936259965902262*2^128 + 484949036*2^192;\
0 + 0*2^64 + 0*2^128 + 805306368*2^192,0 + 0*2^64 + 0*2^128 + 792723456*2^192,0 + 0*2^64 + 0*2^128 + 268435456*2^192,0 + 0*2^64 + 0*2^128 + 926941184*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 878615151*2^192,0 + 0*2^64 + 0*2^128 + 176160768*2^192,0 + 0*2^64 + 0*2^128 + 272629760*2^192,0 + 0*2^64 + 0*2^128 + 931135488*2^192,0 + 0*2^64 + 0*2^128 + 775946240*2^192;\
2869719386158302206 + 4304226401503333534*2^64 + 2714816651847993515*2^128 + 2035069406*2^192,5092363883769228797 + 3801526126050247596*2^64 + 4703710273383746960*2^128 + 1714821563*2^192,9772302701308866628 + 18295804827998760669*2^64 + 9684909450252824674*2^128 + 686439848*2^192,4448237206851440004 + 5813123643244428607*2^64 + 1019702273256910824*2^128 + 1206672622*2^192,13839317803952003732 + 3232762820221053761*2^64 + 2835053396391136220*2^128 + 2031956950*2^192,11497866980856920296 + 7828381413286659355*2^64 + 9637697326212618884*2^128 + 1912911129*2^192,558215378601815044 + 8892572372972495270*2^64 + 6217556011369614140*2^128 + 1557358307*2^192,5034219186329942944 + 14603883352802434117*2^64 + 111741412533132705*2^128 + 1209943923*2^192,6289157093838879136 + 1129131532959140193*2^64 + 6596693472529973035*2^128 + 778932917*2^192;\
14040261045724695740 + 9577710691744566052*2^64 + 5824860110721795143*2^128 + 1651529059*2^192,5770709375584048900 + 3150665968742425570*2^64 + 12311947047227919544*2^128 + 1911014531*2^192,17622866492243082024 + 15757614572632004787*2^64 + 3755464201211922301*2^128 + 352947588*2^192,15380830601956552148 + 14177600654997472163*2^64 + 13411567352279085972*2^128 + 353175143*2^192,9391808398636166216 + 4472597199083061397*2^64 + 5529930260673990507*2^128 + 2016617034*2^192,7804202283011050388 + 11154178640330745961*2^64 + 15389599185517701976*2^128 + 1151879892*2^192,15943006189222312388 + 12243285811287585556*2^64 + 7210298668768366857*2^128 + 1601572479*2^192,17443838454105016568 + 17840647509907263714*2^64 + 10179303538970270335*2^128 + 2110653949*2^192,8747083479424099832 + 2130947835412086423*2^64 + 4735830812163106751*2^128 + 1981954112*2^192;\
15219468345948786656 + 3113002996959573083*2^64 + 2283449728709710964*2^128 + 1153975097*2^192,16839652199186941560 + 4793289798001065*2^64 + 16820070773429310634*2^128 + 2061274513*2^192,10335912171531578856 + 12555593922997788598*2^64 + 4723273243503615237*2^128 + 1012054692*2^192,2192489995009141440 + 16068900042932157085*2^64 + 12592440407852454985*2^128 + 1960445217*2^192,12424489978581337608 + 2471950911826227806*2^64 + 7149497984236660206*2^128 + 1131092307*2^192,5862861060929747584 + 17632501948279087169*2^64 + 1991283135594319959*2^128 + 916606110*2^192,5515633656759935312 + 10027361342163675406*2^64 + 8085097284644956731*2^128 + 116158625*2^192,9154573669918704256 + 11968867592576144528*2^64 + 17172192800548928745*2^128 + 801619395*2^192,11177603821645453048 + 8046331032001670054*2^64 + 6137569141173705786*2^128 + 1034912537*2^192;\
1570031740774010064 + 15731902591212269878*2^64 + 13658148528990429147*2^128 + 998730241*2^192,11488283657099863714 + 7194941163902883988*2^64 + 6484288657722870736*2^128 + 725747119*2^192,9501235511400922080 + 3102464842126813122*2^64 + 4633347189809295394*2^128 + 1688589553*2^192,6780234344197088264 + 3155055925455441884*2^64 + 2927582501136985180*2^128 + 1028611325*2^192,7385869958828589408 + 3520571849148447876*2^64 + 23350179899585802*2^128 + 590442884*2^192,17281156172906060040 + 3218894643300355994*2^64 + 5094988718367910344*2^128 + 735731667*2^192,4646477105326044120 + 11801874189044435357*2^64 + 11552056158400181574*2^128 + 336374016*2^192,2900006340087054920 + 10069327967703701436*2^64 + 1989482392288956859*2^128 + 1713573069*2^192,13870394872240967760 + 12450586086373132638*2^64 + 5305101894216937040*2^128 + 34388355*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4912 lists. */
