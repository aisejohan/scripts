/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * y^1               = Coefficient of   x^7 * z^1               = Coefficient of   x^3 * y^3 * w^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^7               = Coefficient of   x^1 * y^1 * z^2 * w^1   = Coefficient of   y^6 * z^1               = Coefficient of   y^1 * w^3               = Coefficient of   z^3 * w^1               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^3 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^1


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
The final length of G is 63
[1, 1, 2, 0, 0]  	39	3 
[7, 0, 0, 0, 0]  	42	4  <--- 1
[6, 0, 1, 0, 0]  	49	4 
[0, 6, 1, 0, 0]  	55	2 
[1, 1, 0, 3, 0]  	61	3 
[5, 1, 0, 2, 0]  	69	4 
[5, 6, 0, 0, 0]  	72	7 
[0, 6, 0, 2, 0]  	74	3 
[1, 0, 2, 3, 0]  	80	4 
[1, 11, 0, 0, 0]  	83	4 
[6, 0, 0, 3, 0]  	84	3 
[5, 0, 3, 1, 0]  	85	7 
[0, 5, 4, 0, 0]  	87	2 
[0, 1, 0, 5, 0]  	87	2 
[4, 7, 0, 1, 0]  	89	6 
[5, 0, 1, 3, 0]  	91	6 
[0, 13, 0, 0, 0]  	91	2  <--- 2
[4, 0, 4, 1, 0]  	92	6 
[5, 0, 5, 0, 0]  	95	5 
[0, 5, 1, 3, 0]  	96	3 
[3, 5, 1, 2, 0]  	98	6 
[3, 0, 5, 1, 0]  	99	4 
[1, 0, 1, 5, 0]  	99	4 
[4, 0, 6, 0, 0]  	102	4 
[1, 0, 0, 6, 0]  	102	3 
[2, 0, 6, 1, 0]  	106	4 
[3, 0, 7, 0, 0]  	109	4 
[5, 0, 0, 5, 0]  	110	4 
[0, 3, 2, 4, 0]  	111	3 
[0, 4, 4, 2, 0]  	112	2 
[0, 3, 7, 0, 0]  	112	2 
[1, 0, 7, 1, 0]  	113	2 
[0, 2, 4, 3, 0]  	114	2 
[0, 4, 3, 3, 0]  	115	2 
[2, 0, 8, 0, 0]  	116	3 
[0, 2, 3, 4, 0]  	117	3 
[0, 3, 5, 2, 0]  	118	2 
[0, 0, 3, 5, 0]  	119	1 
[0, 2, 7, 1, 0]  	121	1 
[1, 0, 9, 0, 0]  	123	3 
[0, 2, 6, 2, 0]  	124	2 
[0, 0, 1, 7, 0]  	125	1 
[0, 0, 6, 3, 0]  	126	1 
[0, 1, 8, 1, 0]  	127	1 
[0, 0, 0, 8, 0]  	128	1  <--- 4
[0, 2, 9, 0, 0]  	131	1 
[0, 0, 9, 1, 0]  	133	1 
[0, 1, 10, 0, 0]  	137	1 
[0, 0, 11, 0, 0]  	143	1  <--- 3
[2, 1, 1, 1, 1]  	48	5 
[5, 0, 4, 0, 1]  	82	7 
[3, 0, 0, 5, 1]  	98	5 
[0, 4, 1, 4, 1]  	105	3 
[0, 4, 5, 1, 1]  	109	2 
[0, 1, 5, 3, 1]  	120	2 
[0, 5, 2, 2, 2]  	93	3 
[0, 1, 7, 2, 3]  	130	2 
[0, 0, 10, 0, 253]  	130	1 
[1, 6, 0, 0, 255]  	48	2 
[0, 4, 5, 0, 255]  	93	2 
[0, 0, 1, 5, 255]  	93	1 
[0, 3, 4, 2, 255]  	105	2 
[0, 0, 8, 1, 255]  	120	1 
------
The gap is between 4 and 252.
Lengths: 2 2 5 6 2 2.
For 123 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^7*w^2

For 68 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^8
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^1*w^3
1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1

For 13 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1

Extra powers of p used 1.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[5715343958159264006 + 558821310362057538*2^64 + 2249120799773844130*2^128 + 1047627868*2^192,3268196171158184656 + 15960180162060918900*2^64 + 6817528238474916585*2^128 + 2105684967*2^192,16503620872765225456 + 3640861135985199753*2^64 + 2383848747555136465*2^128 + 1286129834*2^192,8583341244319436856 + 4402000006003309215*2^64 + 10724508236801077164*2^128 + 1179904544*2^192,10164173173475860096 + 11683608327103137107*2^64 + 3166109863066063777*2^128 + 602582812*2^192,17320428846048546032 + 8106337424342493735*2^64 + 14039713466360065161*2^128 + 1219531749*2^192,3333630668326741376 + 7711432539766351639*2^64 + 12543442051131340800*2^128 + 221478501*2^192,12988544508121790032 + 13685615449154659048*2^64 + 1407165534639708273*2^128 + 1635823735*2^192,7684293387552907488 + 12479007100627808445*2^64 + 10698187093123475166*2^128 + 2115990892*2^192;\
3646116712404174352 + 6934174265301780883*2^64 + 18107335452126346716*2^128 + 251352635*2^192,3637135348535410676 + 13768213324153813091*2^64 + 10145888899755089423*2^128 + 609588828*2^192,13197321978919420240 + 8606369075227599672*2^64 + 14551183743206573447*2^128 + 250153696*2^192,11274125808902393472 + 8417487865246627294*2^64 + 1928951644400224874*2^128 + 29850791*2^192,677304125480308608 + 14649895563437060710*2^64 + 14549894212062248303*2^128 + 1622572988*2^192,16791410409965310544 + 16958170653591358921*2^64 + 12124824931646101024*2^128 + 483252930*2^192,4251539169765638408 + 15983723602386093982*2^64 + 5645284404995792384*2^128 + 830997209*2^192,8275963049898774096 + 12947307627619182387*2^64 + 6704993942360541314*2^128 + 255109719*2^192,9345736990116402000 + 9028531744804038836*2^64 + 6180246409026571458*2^128 + 354689735*2^192;\
0 + 0*2^64 + 0*2^128 + 771751936*2^192,0 + 0*2^64 + 0*2^128 + 58720256*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 526293615*2^192,0 + 0*2^64 + 0*2^128 + 629145600*2^192,0 + 0*2^64 + 0*2^128 + 25165824*2^192,0 + 0*2^64 + 0*2^128 + 310378496*2^192,0 + 0*2^64 + 0*2^128 + 134217728*2^192,0 + 0*2^64 + 0*2^128 + 83886080*2^192,0 + 0*2^64 + 0*2^128 + 587202560*2^192;\
15295559665254426364 + 16078231497617781401*2^64 + 2783854092823684447*2^128 + 694158792*2^192,16237279175028667905 + 10178346998739844631*2^64 + 15935486512730324553*2^128 + 641720334*2^192,17085436477346974728 + 8704435176217790698*2^64 + 13292536152132560688*2^128 + 446919386*2^192,8381619000957752312 + 12136034057980304363*2^64 + 17765419969316889315*2^128 + 444888682*2^192,5437079207575079552 + 15071195616174626490*2^64 + 1920815425342738066*2^128 + 856915133*2^192,13602614396607836808 + 17666557343905313415*2^64 + 12055572968619482778*2^128 + 629746942*2^192,12889226312754873348 + 4365447420325534791*2^64 + 9626488931931256776*2^128 + 245203458*2^192,9579167527153207648 + 9491567225034645468*2^64 + 5514659924762074074*2^128 + 518325548*2^192,7679475253755059456 + 15788228262637486588*2^64 + 3644192685842396699*2^128 + 1010532110*2^192;\
11510982868468583932 + 13789558676544907731*2^64 + 13621314274014368224*2^128 + 453469400*2^192,18307675286677739621 + 252294787341290312*2^64 + 7545660364878705306*2^128 + 488320188*2^192,933764507113962952 + 13110708391732355371*2^64 + 15461837334233778925*2^128 + 427544026*2^192,16351023932762466872 + 10063676811158791252*2^64 + 2055933781222573173*2^128 + 1861432724*2^192,6511360372526230820 + 10367584109563951679*2^64 + 16536000677832127765*2^128 + 702453778*2^192,8332270246937415752 + 12095227448781114452*2^64 + 11192893991017167147*2^128 + 615068838*2^192,9447132537731481444 + 1718242354848351885*2^64 + 16435404006931277720*2^128 + 377789557*2^192,5283251387819019444 + 5037350063805140124*2^64 + 17563468295723535060*2^128 + 260982307*2^192,11444058251239197312 + 12620123892286045615*2^64 + 15913743850716292911*2^128 + 66677353*2^192;\
13333505512972259668 + 8028791093054886013*2^64 + 11713775321858717920*2^128 + 2035777473*2^192,6982563650029510625 + 4014592153729134372*2^64 + 4341481715269352478*2^128 + 1416725552*2^192,10080722706608987332 + 2909376366284963066*2^64 + 12139533022379528159*2^128 + 1523939323*2^192,18420622281499883060 + 14926312746135817996*2^64 + 10048359615277251091*2^128 + 2142728758*2^192,11136806917618554628 + 4285961269575309818*2^64 + 6325152586494716858*2^128 + 1137031758*2^192,2260060693476682760 + 6005881649304699363*2^64 + 6015260984188890723*2^128 + 133436206*2^192,3746586477635506420 + 13223884610610236969*2^64 + 7332476918967521429*2^128 + 1129031554*2^192,15770852986009060036 + 5468570377664629972*2^64 + 1965556112889473226*2^128 + 1238721188*2^192,1837195740644527544 + 1639735696231373001*2^64 + 11423272644488678686*2^128 + 1616165328*2^192;\
4957728513478189062 + 17652607191073310202*2^64 + 13253220653306916172*2^128 + 1302797839*2^192,4521690134591911383 + 2111323753855870346*2^64 + 8578122941617641094*2^128 + 1001382910*2^192,12296211957072158764 + 1485315713897202989*2^64 + 10819964724359568931*2^128 + 1274202251*2^192,17785253981874124964 + 167591666407338247*2^64 + 7723549067185261299*2^128 + 1998255015*2^192,920416507615150212 + 2405177047216259952*2^64 + 4779514999928132628*2^128 + 221634492*2^192,3811834129923937260 + 16801971295062935330*2^64 + 8973733196768994907*2^128 + 1548093539*2^192,11352445951017715260 + 5904684112951272873*2^64 + 8009873667876322372*2^128 + 1532742952*2^192,15006006312896950112 + 15410916541484992442*2^64 + 15725033020100672907*2^128 + 290452834*2^192,8729071869481823936 + 12068738499071465706*2^64 + 7585722797707590904*2^128 + 1540076615*2^192;\
12215108858181905316 + 7298754750180488889*2^64 + 3002177317266781206*2^128 + 881355837*2^192,14654411008880322697 + 18034585620280908476*2^64 + 10832266164858746257*2^128 + 495442421*2^192,12523187603698051400 + 2097649590502685067*2^64 + 6298930980309074410*2^128 + 55961106*2^192,5008840613789267956 + 1389469188715693971*2^64 + 6112382948300514355*2^128 + 1597079592*2^192,13519175918661022572 + 17662897012901706160*2^64 + 2544770936750566854*2^128 + 2139502438*2^192,8595488085826491336 + 13474206161523763620*2^64 + 13926526622612397587*2^128 + 879701215*2^192,11080509857470342580 + 14100940064847185447*2^64 + 7916172655003285126*2^128 + 878748406*2^192,12773967541528567340 + 2989552741669023357*2^64 + 15265361045479959643*2^128 + 1302865600*2^192,9053454235390586672 + 13705243040138609182*2^64 + 796126792716378667*2^128 + 618165741*2^192;\
9134150427630241148 + 13609031880824126283*2^64 + 10100341034320691363*2^128 + 1581053208*2^192,11023565636203259805 + 14952977281112894826*2^64 + 17137191648528980823*2^128 + 1263429502*2^192,5668608368029167048 + 17188877321339491337*2^64 + 14901675555406648211*2^128 + 1729723996*2^192,967164043646578580 + 14549098668100448797*2^64 + 17062591801828130869*2^128 + 695881929*2^192,2134837702027258172 + 8210011622896380937*2^64 + 1708054706885010800*2^128 + 1670957774*2^192,12261332925891739720 + 6632806030823410639*2^64 + 17366375601151816886*2^128 + 886140177*2^192,17904209612031563556 + 3227723469154232826*2^64 + 3129463495576537434*2^128 + 595174947*2^192,8261852493305113252 + 5580509679340967435*2^64 + 18350448621477119002*2^128 + 613251831*2^192,15164675787143013752 + 13761601024788190046*2^64 + 112558379983523713*2^128 + 1611486790*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 4233 lists. */
