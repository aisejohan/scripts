/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * z^1               = Coefficient of   x^5 * y^1 * z^1 * w^1   = Coefficient of   x^2 * y^4 * z^2         = Coefficient of   x^1 * y^2 * z^1 * w^2   = Coefficient of   y^9                     = Coefficient of   z^4 * w^1               = Coefficient of   w^4                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^2*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^9 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^4*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^4


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
The final length of G is 102
[9, 0, 0, 0, 0]  	117	3  <--- 1
[8, 0, 1, 0, 0]  	131	2 
[0, 9, 0, 0, 0]  	144	3  <--- 2
[1, 2, 0, 4, 0]  	189	3 
[7, 0, 4, 0, 0]  	199	3 
[1, 1, 0, 5, 0]  	209	2 
[7, 8, 0, 0, 0]  	219	2 
[1, 0, 1, 5, 0]  	220	3 
[7, 0, 0, 4, 0]  	235	2 
[6, 0, 7, 0, 0]  	267	3 
[6, 8, 0, 2, 0]  	278	2 
[6, 6, 4, 0, 0]  	282	3 
[6, 8, 3, 0, 0]  	287	2 
[6, 0, 4, 3, 0]  	294	2 
[6, 0, 0, 6, 0]  	294	2 
[1, 0, 0, 8, 0]  	301	3 
[6, 0, 3, 4, 0]  	303	2 
[5, 6, 4, 1, 0]  	305	2 
[4, 4, 7, 0, 0]  	305	4 
[5, 8, 3, 1, 0]  	310	2 
[4, 6, 6, 0, 0]  	310	3 
[5, 8, 2, 2, 0]  	319	1 
[4, 6, 5, 1, 0]  	319	1 
[3, 4, 8, 0, 0]  	319	1 
[3, 4, 4, 3, 0]  	319	1 
[2, 2, 7, 2, 0]  	319	1 
[1, 0, 10, 1, 0]  	319	1 
[1, 0, 6, 4, 0]  	319	1 
[0, 7, 5, 2, 0]  	319	1 
[0, 7, 1, 5, 0]  	319	1 
[5, 0, 7, 2, 0]  	326	2 
[0, 5, 8, 1, 0]  	332	1 
[0, 5, 4, 4, 0]  	332	1 
[0, 5, 0, 7, 0]  	332	1 
[5, 0, 10, 0, 0]  	335	1 
[5, 0, 6, 3, 0]  	335	1 
[3, 2, 10, 0, 0]  	341	1 
[3, 2, 6, 3, 0]  	341	1 
[2, 0, 9, 2, 0]  	341	1 
[1, 7, 8, 0, 0]  	341	1 
[1, 7, 4, 3, 0]  	341	1 
[0, 5, 7, 2, 0]  	341	1 
[0, 5, 3, 5, 0]  	341	1 
[4, 8, 2, 3, 0]  	342	1 
[3, 6, 5, 2, 0]  	342	1 
[2, 4, 8, 1, 0]  	342	1 
[1, 2, 11, 0, 0]  	342	1 
[1, 2, 7, 3, 0]  	342	1 
[0, 0, 10, 2, 0]  	342	1 
[0, 0, 6, 5, 0]  	342	1 
[0, 0, 2, 8, 0]  	342	1 
[0, 3, 11, 0, 0]  	345	1 
[0, 3, 7, 3, 0]  	345	1 
[0, 3, 3, 6, 0]  	345	1 
[0, 0, 13, 0, 0]  	351	1  <--- 3
[0, 0, 9, 3, 0]  	351	1 
[0, 0, 5, 6, 0]  	351	1 
[0, 0, 1, 9, 0]  	351	1 
[0, 3, 10, 1, 0]  	354	1 
[0, 3, 6, 4, 0]  	354	1 
[0, 3, 2, 7, 0]  	354	1 
[0, 7, 9, 0, 0]  	355	1 
[0, 3, 0, 9, 0]  	372	1 
[0, 0, 0, 11, 0]  	396	1  <--- 4
[1, 2, 1, 1, 1]  	108	3 
[1, 1, 1, 2, 1]  	128	2 
[0, 0, 4, 1, 1]  	144	2 
[0, 0, 8, 0, 1]  	216	3 
[0, 8, 4, 0, 1]  	236	2 
[8, 0, 0, 3, 2]  	212	2 
[0, 2, 0, 9, 244]  	356	1 
[0, 0, 0, 10, 244]  	360	1 
[0, 0, 2, 7, 245]  	306	1 
[0, 7, 0, 6, 245]  	328	1 
[0, 2, 3, 6, 245]  	329	1 
[0, 0, 1, 8, 246]  	315	1 
[0, 4, 0, 7, 246]  	316	1 
[0, 2, 0, 8, 246]  	320	1 
[0, 2, 3, 5, 247]  	293	1 
[0, 4, 0, 6, 248]  	280	1 
[0, 2, 2, 6, 248]  	302	1 
[0, 6, 1, 5, 248]  	303	1 
[0, 6, 1, 4, 250]  	267	1 
[0, 0, 0, 8, 250]  	288	1 
[0, 4, 3, 4, 250]  	289	1 
[0, 8, 2, 3, 250]  	290	1 
[0, 6, 0, 4, 251]  	240	1 
[0, 4, 7, 0, 251]  	253	2 
[0, 6, 6, 0, 251]  	258	2 
[0, 0, 3, 5, 251]  	261	1 
[0, 0, 2, 6, 251]  	270	1 
[0, 0, 0, 6, 252]  	216	1 
[0, 8, 3, 1, 252]  	245	1 
[0, 8, 2, 2, 252]  	254	1 
[0, 8, 0, 2, 253]  	200	1 
[0, 0, 3, 4, 253]  	225	1 
[0, 0, 0, 4, 254]  	144	1 
[0, 0, 7, 0, 254]  	189	1 
[0, 6, 4, 0, 254]  	204	1 
[0, 8, 3, 0, 254]  	209	1 
[0, 0, 4, 0, 255]  	108	1 
[0, 8, 0, 0, 255]  	128	1 
------
The gap is between 3 and 243.
Lengths: 2 2 4 9 2 13.
For 340 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^7*z^7
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^9

For 196 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*y^4*z^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*w^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^3*z^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^5

For 52 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*w^1

Extra powers of p used 10.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[16863525236330131808 + 16675566905876847872*2^64 + 4426527382748324523*2^128 + 233463015453*2^192,10086497938772755264 + 13531780159544867673*2^64 + 2869050775929643411*2^128 + 239443035784*2^192,15724832641270757408 + 7833940970265122228*2^64 + 12429218377843018177*2^128 + 39477991313*2^192,9153897973522924800 + 2046051285663753007*2^64 + 9272674759018290185*2^128 + 27012216281*2^192,2093046386322121792 + 13310550118282489294*2^64 + 583781561261503086*2^128 + 213976204847*2^192,3356450523552317056 + 597935443416082468*2^64 + 7421821455715850438*2^128 + 211722701559*2^192,2131088777548037696 + 12961779940658335322*2^64 + 7307156586667985738*2^128 + 236920424695*2^192,2101379303364228544 + 14442797970100176191*2^64 + 9415680428302591355*2^128 + 140192871661*2^192;\
16218177579321218426 + 10145505777646348322*2^64 + 573235384427319908*2^128 + 9433009405*2^192,69360671606320204 + 8503459935036846245*2^64 + 4095653654606170755*2^128 + 248676764314*2^192,1582327525777798094 + 3225747422723433442*2^64 + 6802873108753341406*2^128 + 56838079852*2^192,14606666282063902768 + 12792783642000140278*2^64 + 5835765644779536016*2^128 + 157925773269*2^192,44281742145659036 + 349988977332249957*2^64 + 10023205982487922786*2^128 + 37024479887*2^192,9552346923450151960 + 3528650394438665863*2^64 + 3709632528507051001*2^128 + 25228042901*2^192,10623658685820755612 + 6664413396152750431*2^64 + 2979120503484578896*2^128 + 212074732587*2^192,1501668845443576804 + 16397508291251855377*2^64 + 959354994408087706*2^128 + 213849382258*2^192;\
2956631427676795264 + 17997704147365622314*2^64 + 15388184885887480617*2^128 + 118659190345*2^192,12430477403044967680 + 16473463535642883244*2^64 + 13834305387834147244*2^128 + 2546677443*2^192,14040860903706345600 + 8262930077686769384*2^64 + 3585101632954879077*2^128 + 81237720512*2^192,4097734299642461184 + 5676934085415811746*2^64 + 11728232856136966944*2^128 + 63428619338*2^192,6446011141039461632 + 11319953014337868687*2^64 + 11817059234541264900*2^128 + 92950116499*2^192,16473610888328243712 + 13831926219865530651*2^64 + 17957512225065006138*2^128 + 124769372388*2^192,10691129792025020672 + 17540638625684740313*2^64 + 4945423562551487508*2^128 + 109135304457*2^192,4828160117773757184 + 3064077095628099856*2^64 + 1785847044496310534*2^128 + 130733509074*2^192;\
16644724611045754816 + 2937483463780491612*2^64 + 1508727560438372646*2^128 + 228231748206*2^192,9011539595182257280 + 10083190475914190344*2^64 + 8789899820462757872*2^128 + 155429243831*2^192,8687730164988881088 + 13950608494084755809*2^64 + 10672959151558901976*2^128 + 15856175117*2^192,7705232657601685504 + 8259021974559504943*2^64 + 11551409073772978890*2^128 + 178185881305*2^192,8456040254910042496 + 7982860218620855753*2^64 + 7052088039006908056*2^128 + 265884419673*2^192,4153024854045827328 + 3942117205534552572*2^64 + 741952548028517328*2^128 + 247642752875*2^192,16412170805253192576 + 2934828529079885383*2^64 + 7190168834414718339*2^128 + 93716745094*2^192,2027363174221045376 + 3451511657806181054*2^64 + 13971080480471629475*2^128 + 177897707400*2^192;\
1722656620771818616 + 8009043849358273265*2^64 + 16690535544617476630*2^128 + 142410349542*2^192,6477109230547493392 + 923813032071370753*2^64 + 10168312146660944909*2^128 + 98115621568*2^192,5732784609831105000 + 15220387518233913618*2^64 + 13917798599820373526*2^128 + 204878030042*2^192,5023341932096270400 + 12311777141026920575*2^64 + 16975928702837506337*2^128 + 181526337461*2^192,4827659843860221904 + 13385678953956194563*2^64 + 17182834234469276115*2^128 + 198305116568*2^192,16159615495687585312 + 2670736043257954493*2^64 + 11350874349343282467*2^128 + 83174837965*2^192,13004032845413210064 + 13281029570376590776*2^64 + 14105575394983224124*2^128 + 73268683703*2^192,18046336942547515440 + 5050682053275305527*2^64 + 6245467985891091485*2^128 + 42110713212*2^192;\
731271233135841039 + 6948523998859423447*2^64 + 7011699910489908589*2^128 + 25692182332*2^192,15887392128925910978 + 12531804420872903301*2^64 + 15237336401224090067*2^128 + 271846738309*2^192,3982385443072620477 + 5867215551451246414*2^64 + 14966917524174241594*2^128 + 85478473930*2^192,11128471769947437960 + 16341526516599093323*2^64 + 170268971106578155*2^128 + 204026561208*2^192,2123619286218160378 + 18127504900942681032*2^64 + 10502954482803614134*2^128 + 60850622661*2^192,17611838980305251012 + 6165172677921699463*2^64 + 8144863317723256730*2^128 + 53265724672*2^192,17762567811515460346 + 9267103448776820560*2^64 + 12810876847150923861*2^128 + 660605971*2^192,9112992959469733062 + 13707311070098707057*2^64 + 6525099346676710498*2^128 + 79116507893*2^192;\
8953340542844179424 + 15739567619614642138*2^64 + 7096925022677377359*2^128 + 29894637061*2^192,7394418560677197376 + 7210537012466537607*2^64 + 8448998347073995005*2^128 + 60819574857*2^192,17548863568278408864 + 6850591150277122955*2^64 + 11209141322355786244*2^128 + 15604626213*2^192,386509401234062592 + 15906433291600905011*2^64 + 9731099246812222826*2^128 + 32829280922*2^192,10401830881569957184 + 17454178262340441343*2^64 + 4702799551577301310*2^128 + 19832267149*2^192,16569827526892041344 + 903844259424078989*2^64 + 980812615239141364*2^128 + 30843251126*2^192,12678344464076533568 + 16968234196087066622*2^64 + 6799533042391367634*2^128 + 51534602187*2^192,8898650183223338176 + 89803443747897469*2^64 + 7698387166898192043*2^128 + 37814247997*2^192;\
16838493458065862528 + 8662040382401448669*2^64 + 1361445368143140041*2^128 + 258263620941*2^192,11754947148553926912 + 6198609973917650533*2^64 + 7244522142403151372*2^128 + 190765512288*2^192,14009140376998076032 + 5101940127633563260*2^64 + 2283459752850397086*2^128 + 31440006240*2^192,10202554771823199232 + 2276508699158383079*2^64 + 1638661727118755238*2^128 + 152417399095*2^192,14217615002739883264 + 10312436396743482715*2^64 + 332576764034584637*2^128 + 66334256093*2^192,3200333129890812416 + 2126765474821574975*2^64 + 13945504432078834165*2^128 + 53254668572*2^192,10541602547593155840 + 12444135431341140977*2^64 + 10743074995141289646*2^128 + 145707445928*2^192,8061591052010524416 + 11632638811849715425*2^64 + 11645235634397096370*2^128 + 262135900857*2^192]
/* 
This matrix times 2^(-8) should be the matrix of frobenius.
*/ 
B = 2^(-8) * A; 
/* Freed 2195 lists. */
The sign is: 1
The characteristic polynomial is: x^8 + x^7 + 2*x^6 - 4*x^5 - 12*x^4 - 16*x^3 + 32*x^2 + 64*x + 256
Its Newton polygon is: [2, 4/3, 4/3, 4/3, 2/3, 2/3, 2/3, 0]
Its factorization is: Mat([x^8 + x^7 + 2*x^6 - 4*x^5 - 12*x^4 - 16*x^3 + 32*x^2 + 64*x + 256, 1])
The valuation of f-g is: 22
The valuation of subst(g,x,A) is: 14
