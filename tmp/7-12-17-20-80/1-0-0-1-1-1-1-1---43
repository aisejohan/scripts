/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^9 * z^1               = Coefficient of   x^8 * y^2               = Coefficient of   x^4 * y^1 * w^2         = Coefficient of   x^2 * y^1 * z^2 * w^1   = Coefficient of   x^1 * y^3 * z^1 * w^1   = Coefficient of   y^5 * w^1               = Coefficient of   y^1 * z^4               = Coefficient of   w^4                     = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^9*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^2*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^3*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*w^4


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
The final length of G is 111
[2, 1, 2, 0, 0]  	60	4 
[9, 0, 0, 0, 0]  	63	4  <--- 1
[2, 0, 2, 1, 0]  	68	4 
[8, 0, 1, 0, 0]  	73	3 
[1, 3, 1, 1, 0]  	80	3 
[0, 1, 4, 0, 0]  	80	2 
[7, 3, 1, 0, 0]  	102	5 
[1, 0, 1, 4, 0]  	104	3 
[7, 5, 0, 0, 0]  	109	4 
[7, 2, 1, 1, 0]  	110	5 
[7, 4, 0, 1, 0]  	117	4 
[6, 5, 0, 1, 0]  	122	8 
[6, 0, 5, 0, 0]  	127	6 
[7, 0, 0, 4, 0]  	129	3 
[4, 7, 1, 0, 0]  	129	6 
[5, 7, 0, 1, 0]  	139	6 
[0, 10, 0, 1, 0]  	140	3 
[6, 2, 0, 4, 0]  	146	3 
[3, 9, 1, 0, 0]  	146	4 
[2, 11, 0, 0, 0]  	146	5 
[5, 6, 0, 2, 0]  	147	5 
[3, 4, 0, 4, 0]  	149	5 
[1, 9, 2, 0, 0]  	149	5 
[6, 9, 0, 0, 0]  	150	5 
[1, 0, 5, 3, 0]  	152	3 
[6, 1, 0, 5, 0]  	154	6 
[5, 10, 0, 0, 0]  	155	4 
[1, 11, 1, 0, 0]  	156	4 
[0, 13, 0, 0, 0]  	156	4  <--- 2
[1, 6, 0, 4, 0]  	159	4 
[0, 9, 3, 0, 0]  	159	3 
[0, 12, 1, 0, 0]  	161	3 
[1, 3, 0, 6, 0]  	163	4 
[4, 3, 0, 5, 0]  	164	4 
[2, 1, 0, 7, 0]  	166	2 
[1, 0, 7, 2, 0]  	166	2 
[0, 11, 2, 0, 0]  	166	2 
[0, 6, 2, 3, 0]  	166	2 
[0, 6, 1, 4, 0]  	169	2 
[0, 8, 2, 2, 0]  	170	3 
[0, 5, 3, 3, 0]  	171	2 
[0, 8, 1, 3, 0]  	173	2 
[0, 3, 1, 6, 0]  	173	2 
[5, 0, 0, 7, 0]  	175	3 
[0, 8, 0, 4, 0]  	176	2 
[0, 2, 2, 6, 0]  	178	1 
[1, 0, 9, 1, 0]  	180	2 
[0, 5, 0, 6, 0]  	180	2 
[4, 0, 9, 0, 0]  	181	3 
[0, 1, 3, 6, 0]  	183	1 
[0, 0, 5, 5, 0]  	185	1 
[0, 1, 2, 7, 0]  	186	1 
[1, 0, 0, 9, 0]  	187	2 
[0, 3, 3, 5, 0]  	187	2 
[0, 0, 10, 1, 0]  	190	1 
[0, 1, 0, 9, 0]  	192	1 
[0, 0, 9, 2, 0]  	193	1 
[0, 0, 1, 9, 0]  	197	1 
[0, 0, 7, 4, 0]  	199	1 
[0, 0, 0, 10, 0]  	200	1  <--- 4
[0, 0, 12, 0, 0]  	204	1  <--- 3
[0, 0, 3, 8, 0]  	211	1 
[2, 0, 0, 4, 1]  	94	4 
[1, 7, 0, 1, 1]  	111	4 
[0, 9, 0, 1, 1]  	128	3 
[1, 2, 0, 5, 1]  	131	3 
[1, 4, 0, 4, 1]  	135	4 
[2, 9, 1, 0, 1]  	139	6 
[1, 7, 3, 0, 1]  	142	5 
[1, 0, 6, 2, 1]  	149	4 
[5, 0, 7, 0, 1]  	154	5 
[1, 1, 0, 7, 1]  	159	3 
[1, 0, 8, 1, 1]  	163	3 
[4, 0, 8, 0, 1]  	164	3 
[1, 0, 0, 8, 1]  	167	3 
[3, 0, 9, 0, 1]  	174	4 
[1, 0, 10, 0, 1]  	177	3 
[0, 4, 3, 4, 1]  	179	2 
[0, 4, 0, 7, 1]  	188	2 
[0, 5, 2, 5, 1]  	194	2 
[6, 0, 1, 3, 2]  	119	5 
[0, 7, 3, 2, 2]  	175	2 
[0, 3, 0, 7, 2]  	176	2 
[0, 4, 2, 5, 2]  	182	2 
[1, 2, 3, 3, 253]  	142	4 
[0, 10, 2, 0, 253]  	154	3 
[0, 0, 6, 3, 253]  	162	1 
[0, 2, 3, 5, 253]  	175	1 
[0, 0, 8, 2, 253]  	176	1 
[5, 7, 0, 0, 254]  	119	2 
[1, 0, 4, 3, 254]  	135	2 
[1, 11, 0, 0, 254]  	139	2 
[0, 0, 5, 3, 254]  	145	1 
[0, 11, 1, 0, 254]  	149	1 
[0, 2, 3, 4, 254]  	155	1 
[0, 4, 3, 3, 254]  	159	2 
[0, 0, 3, 6, 254]  	171	1 
[0, 0, 2, 7, 254]  	174	1 
[1, 3, 3, 0, 255]  	94	2 
[0, 7, 1, 0, 255]  	101	1 
[0, 5, 3, 0, 255]  	111	1 
[0, 5, 2, 1, 255]  	114	2 
[0, 4, 0, 4, 255]  	128	1 
[0, 0, 4, 3, 255]  	128	1 
[0, 0, 3, 4, 255]  	131	1 
[0, 11, 0, 0, 255]  	132	1 
[0, 2, 2, 4, 255]  	138	1 
[1, 0, 0, 7, 255]  	147	2 
[0, 1, 0, 7, 255]  	152	1 
[0, 3, 0, 6, 255]  	156	2 
[0, 0, 1, 7, 255]  	157	1 
------
The gap is between 3 and 252.
Lengths: 2 2 5 5 2 4.
For 184 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^7*w^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^8

For 104 = 2*d-d1-d2-d3-d4 you get 5 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^5*y^1*z^1*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^3*w^2
1 + 0*2^64 + 0*2^128 + 0*2^192*y^7*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*w^4

For 24 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2

Extra powers of p used 2.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 
*/
A = \
[12466636711248084528 + 10699692557727345172*2^64 + 11065673328048280439*2^128 + 1849715186*2^192,13474410649703473200 + 350198059270466372*2^64 + 11167516957385564693*2^128 + 854097032*2^192,9119444167136581136 + 8609124247366888940*2^64 + 13355388221187523243*2^128 + 1875363023*2^192,17316041887677977068 + 5449500081050559480*2^64 + 9928624843001735738*2^128 + 680060860*2^192,6753752611224508316 + 5672553503671980030*2^64 + 18265686803830417739*2^128 + 513793219*2^192,747858628315713032 + 18242541638663304760*2^64 + 4909443694344940034*2^128 + 814750034*2^192,7969855788087422252 + 6566500173715132668*2^64 + 14383425287285178483*2^128 + 1353657867*2^192,17899583927772286576 + 8452026631995152646*2^64 + 3162245107445603448*2^128 + 1813940575*2^192,5642767945308669080 + 7381762659911694932*2^64 + 8530639774995759786*2^128 + 1053443667*2^192;\
12574298543360436458 + 4609076485464989613*2^64 + 4104259347733503658*2^128 + 1816101319*2^192,694077776775212252 + 1227926190847961585*2^64 + 10534730415206137289*2^128 + 1240155231*2^192,12793756508092810228 + 6910758745586133075*2^64 + 3391746365419135071*2^128 + 1578631570*2^192,2892551305685348956 + 12542573935560107746*2^64 + 15277466573450660379*2^128 + 724563469*2^192,13585033499492095880 + 10814661684982905585*2^64 + 8450658724708088107*2^128 + 1391930569*2^192,1889494129758770140 + 8240390892631847823*2^64 + 12734936982816897335*2^128 + 2009696066*2^192,5137880237662873720 + 6620520749906779066*2^64 + 13299601545272912478*2^128 + 496829453*2^192,17393888032936176776 + 3804650838391654505*2^64 + 13908367721232198778*2^128 + 1567767956*2^192,16923812488847557512 + 16509920801372709977*2^64 + 6357858147423388723*2^128 + 710024750*2^192;\
0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,5125350569292070916 + 2618780968794039214*2^64 + 7534723506265889463*2^128 + 845060719*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192;\
16570335470128484503 + 16338353983024123836*2^64 + 13864718696023587769*2^128 + 352860134*2^192,12090839666878882816 + 8421793794800588292*2^64 + 5243519717838877379*2^128 + 1645788263*2^192,14828764793473782390 + 2310158330929291734*2^64 + 10656063878196385006*2^128 + 100614749*2^192,12527048421067304182 + 2375426818174787367*2^64 + 6203145208786436734*2^128 + 1401970012*2^192,11739559954844432272 + 15198822611821281633*2^64 + 14100361964786911797*2^128 + 1454502772*2^192,4456531875081036146 + 6112271033623767720*2^64 + 17059704934716453495*2^128 + 1044824220*2^192,9346469686700821812 + 4224817587697177812*2^64 + 17539832789983566740*2^128 + 330167318*2^192,7549029305949453644 + 837022598940568985*2^64 + 5278964472592184831*2^128 + 1207225440*2^192,15807731097428996580 + 1420158935679662763*2^64 + 8836330291729339376*2^128 + 174030599*2^192;\
1949442502636294056 + 17827551257022687553*2^64 + 7032632457822582604*2^128 + 599511475*2^192,15560840719975836190 + 18197166837666586673*2^64 + 9473620561173318186*2^128 + 344360248*2^192,10339540098928025684 + 1548489541934331176*2^64 + 14528721132041692883*2^128 + 2139720856*2^192,11696723839558603910 + 15554190916346286639*2^64 + 15414381916650742909*2^128 + 1879408088*2^192,14475776845924233774 + 241080718704640509*2^64 + 3494015058622085368*2^128 + 1881659260*2^192,6342927016665449120 + 9421847650352851078*2^64 + 7697731655573059034*2^128 + 7726937*2^192,4909542102577954122 + 3536288891822039990*2^64 + 16502100409285470495*2^128 + 1852974376*2^192,7044663693949260280 + 10403237406484399887*2^64 + 4414874543425585725*2^128 + 1859919381*2^192,8427997417803216172 + 4456380190072230492*2^64 + 7157079529457806393*2^128 + 43352636*2^192;\
2177369351111570984 + 13626344877345995909*2^64 + 15608130691535774205*2^128 + 2043103976*2^192,10972924038166377450 + 4594296009254650189*2^64 + 2139129734953687466*2^128 + 1151243378*2^192,493273057130158456 + 2552973595647781095*2^64 + 18194470200979852261*2^128 + 1620278851*2^192,6728196336996290174 + 18403305227161153725*2^64 + 7993038537273567834*2^128 + 1865544494*2^192,1070769277397904122 + 5114121906027038151*2^64 + 6148190418035237818*2^128 + 2056379279*2^192,5673442387848731976 + 15626102623933266387*2^64 + 9372646557957192963*2^128 + 344485532*2^192,12825100760604059614 + 10795974519083103431*2^64 + 15900119804941350726*2^128 + 545818582*2^192,17280481724959207672 + 7233538765523346596*2^64 + 8693987403711685275*2^128 + 1649642453*2^192,18416478310580572524 + 6237016895778369833*2^64 + 2445471849607418458*2^128 + 1525877657*2^192;\
3613645598746949684 + 12347944836426384365*2^64 + 2337044040845853794*2^128 + 2103908057*2^192,12087834663992706778 + 3776788296191978372*2^64 + 797450061508427785*2^128 + 1728707510*2^192,13001344048937805792 + 15737399253644396791*2^64 + 7950981667400199887*2^128 + 259421265*2^192,12848978164116589716 + 14066234161144557535*2^64 + 11848436500607211794*2^128 + 1171711257*2^192,17212131102417495328 + 10951789276954766243*2^64 + 14051923745428690975*2^128 + 513894613*2^192,1238245408355004216 + 10707004604584586113*2^64 + 16674065228178343753*2^128 + 1542380015*2^192,7820933995746851288 + 16521986469363207595*2^64 + 4476235516688439215*2^128 + 1441637766*2^192,2522553404484536936 + 1339851929047428458*2^64 + 4312998217807711135*2^128 + 954190239*2^192,15933062883018430864 + 14829185903437085485*2^64 + 6039559582290427474*2^128 + 2003909230*2^192;\
15059973072043076574 + 9638968345190356550*2^64 + 1641403014929460191*2^128 + 2004527196*2^192,15223727999337648184 + 9183638038450003815*2^64 + 12642941318014119546*2^128 + 1403197241*2^192,8388564725466471116 + 14225475392038364229*2^64 + 17104548047861248525*2^128 + 1683699010*2^192,7726381110176398636 + 5434203801751885913*2^64 + 9678078664724710775*2^128 + 49594523*2^192,10076396853881100192 + 14297230058766794061*2^64 + 10591144991197275823*2^128 + 620054784*2^192,5437074499024992388 + 16906760426099344650*2^64 + 14031999637829311031*2^128 + 1548028761*2^192,2281259661769356680 + 14910372742718005889*2^64 + 12641851478192426029*2^128 + 1184336199*2^192,8337302579371198592 + 9530809049515211082*2^64 + 8167068634083355447*2^128 + 1932551284*2^192,11727269226917439144 + 15269710558023591424*2^64 + 4339476163779860391*2^128 + 1984651962*2^192;\
10080117338791484988 + 10958383728125270669*2^64 + 18068751099324999818*2^128 + 227794630*2^192,1725047285085087156 + 1230179488745832345*2^64 + 16908615513694759336*2^128 + 671167441*2^192,15433141774623457144 + 15381462267215637335*2^64 + 1341884221132400831*2^128 + 1959462007*2^192,2842314100044293548 + 4880811368508185121*2^64 + 1992188700812063902*2^128 + 1889738948*2^192,7517975853930457900 + 5258447306870601863*2^64 + 1776507830816938851*2^128 + 1168979086*2^192,15930302176498892648 + 10084928125325932425*2^64 + 17626841828712717034*2^128 + 1871091006*2^192,946093723764124500 + 190971371747744124*2^64 + 14194167153438284008*2^128 + 1458721981*2^192,12912784319899020712 + 16576594546572876161*2^64 + 14052565828446004276*2^128 + 1310611108*2^192,12709967350578730544 + 2502479143271157086*2^64 + 5493820538556257043*2^128 + 1691057769*2^192]
/* 
This matrix times 2^(-1) should be the matrix of frobenius.
*/ 
B = 2^(-1) * A; 
/* Freed 2372 lists. */
