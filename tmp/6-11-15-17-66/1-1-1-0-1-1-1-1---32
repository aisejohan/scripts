/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^11                     = Coefficient of   x^6 * z^2               = Coefficient of   x^3 * y^3 * z^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^1 * w^2   = Coefficient of   x^1 * z^4               = Coefficient of   y^6                     = Coefficient of   z^1 * w^3               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^11 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*z^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^3*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 138
[3, 2, 1, 0, 0]  	55	3 
[10, 0, 0, 0, 0]  	60	5  <--- 1
[6, 0, 2, 0, 0]  	66	3 
[2, 1, 1, 2, 0]  	72	2 
[1, 0, 1, 3, 0]  	72	2 
[7, 3, 0, 0, 0]  	75	7 
[5, 0, 1, 2, 0]  	79	5 
[4, 5, 0, 0, 0]  	79	7 
[3, 6, 0, 0, 0]  	84	5 
[4, 0, 2, 2, 0]  	88	4 
[3, 5, 0, 1, 0]  	90	4 
[8, 1, 0, 2, 0]  	93	6 
[3, 4, 0, 2, 0]  	96	6 
[2, 3, 0, 3, 0]  	96	6 
[6, 4, 0, 1, 0]  	97	8 
[5, 3, 0, 2, 0]  	97	8 
[2, 8, 0, 0, 0]  	100	3 
[2, 2, 0, 4, 0]  	102	6 
[9, 0, 0, 3, 0]  	105	5 
[0, 8, 0, 1, 0]  	105	2 
[0, 2, 1, 4, 0]  	105	2 
[1, 0, 7, 0, 0]  	111	3 
[0, 7, 0, 2, 0]  	111	2 
[0, 1, 1, 5, 0]  	111	2 
[2, 6, 0, 2, 0]  	112	3 
[1, 5, 0, 3, 0]  	112	3 
[2, 1, 6, 0, 0]  	113	7 
[7, 2, 0, 3, 0]  	115	6 
[8, 0, 0, 4, 0]  	116	7 
[0, 6, 0, 3, 0]  	117	2 
[2, 4, 3, 1, 0]  	118	5 
[1, 4, 0, 4, 0]  	118	3 
[1, 3, 3, 2, 0]  	118	5 
[1, 2, 6, 0, 0]  	118	4 
[2, 7, 2, 0, 0]  	119	5 
[2, 3, 5, 0, 0]  	120	3 
[1, 9, 1, 0, 0]  	120	3 
[2, 6, 3, 0, 0]  	123	3 
[0, 5, 0, 4, 0]  	123	2 
[1, 8, 2, 0, 0]  	124	5 
[1, 3, 0, 5, 0]  	124	3 
[1, 1, 6, 1, 0]  	124	4 
[2, 6, 2, 1, 0]  	125	5 
[1, 4, 5, 0, 0]  	125	5 
[7, 0, 0, 5, 0]  	127	6 
[0, 9, 2, 0, 0]  	129	2 
[0, 4, 0, 5, 0]  	129	2 
[0, 3, 3, 3, 0]  	129	2 
[0, 5, 5, 0, 0]  	130	3 
[6, 1, 0, 5, 0]  	132	6 
[0, 3, 0, 6, 0]  	135	1 
[0, 1, 6, 2, 0]  	135	1 
[0, 0, 9, 0, 0]  	135	1  <--- 3
[2, 0, 6, 2, 0]  	136	3 
[1, 6, 2, 2, 0]  	136	3 
[1, 1, 0, 7, 0]  	136	3 
[0, 11, 1, 0, 0]  	136	3 
[0, 5, 2, 3, 0]  	136	3 
[3, 0, 0, 7, 0]  	137	3 
[1, 2, 5, 2, 0]  	137	2 
[0, 1, 5, 3, 0]  	137	2 
[6, 0, 0, 6, 0]  	138	4 
[1, 12, 0, 0, 0]  	138	3 
[0, 1, 4, 4, 0]  	139	2 
[0, 2, 0, 7, 0]  	141	1 
[0, 0, 6, 3, 0]  	141	1 
[0, 3, 5, 2, 0]  	142	2 
[0, 1, 0, 8, 0]  	147	1 
[0, 0, 3, 6, 0]  	147	1 
[0, 8, 4, 0, 0]  	148	2 
[0, 3, 8, 0, 0]  	153	1 
[0, 0, 0, 9, 0]  	153	1  <--- 4
[0, 14, 0, 0, 0]  	154	2  <--- 2
[0, 2, 8, 1, 0]  	159	1 
[1, 1, 1, 1, 1]  	49	2 
[6, 0, 1, 0, 1]  	51	5 
[4, 0, 1, 2, 1]  	73	5 
[4, 4, 0, 1, 1]  	85	5 
[2, 2, 4, 0, 1]  	94	5 
[1, 3, 4, 0, 1]  	99	3 
[1, 7, 0, 1, 1]  	100	2 
[2, 5, 0, 2, 1]  	101	4 
[5, 2, 0, 3, 1]  	103	8 
[1, 6, 0, 2, 1]  	106	2 
[1, 3, 0, 4, 1]  	107	5 
[3, 0, 6, 0, 1]  	108	6 
[3, 1, 0, 5, 1]  	114	7 
[2, 0, 6, 1, 1]  	119	4 
[7, 1, 0, 4, 1]  	121	7 
[1, 2, 0, 6, 1]  	130	4 
[1, 0, 6, 2, 1]  	130	4 
[2, 0, 0, 7, 1]  	131	3 
[1, 6, 0, 1, 2]  	89	2 
[1, 2, 0, 5, 2]  	113	5 
[0, 7, 2, 1, 2]  	124	4 
[2, 1, 0, 6, 2]  	125	5 
[1, 0, 0, 7, 2]  	125	4 
[0, 2, 0, 6, 3]  	124	3 
[0, 6, 0, 1, 4]  	83	2 
[5, 0, 4, 0, 4]  	90	7 
[3, 0, 4, 2, 4]  	112	5 
[0, 8, 2, 0, 5]  	118	4 
[0, 5, 3, 1, 8]  	117	2 
[0, 4, 6, 1, 10]  	151	2 
[0, 0, 1, 8, 246]  	151	1 
[0, 0, 1, 7, 247]  	134	1 
[0, 0, 1, 6, 248]  	117	1 
[0, 1, 4, 3, 250]  	122	2 
[1, 11, 0, 0, 250]  	127	3 
[0, 0, 1, 5, 251]  	100	1 
[1, 9, 0, 0, 251]  	105	3 
[2, 5, 3, 0, 251]  	112	4 
[0, 0, 1, 4, 252]  	83	1 
[2, 4, 0, 2, 252]  	90	6 
[2, 4, 3, 0, 252]  	101	5 
[1, 1, 6, 0, 252]  	107	5 
[0, 3, 0, 5, 252]  	118	3 
[0, 3, 2, 3, 253]  	114	2 
[0, 0, 5, 3, 253]  	126	1 
[0, 0, 1, 3, 254]  	66	1 
[3, 5, 0, 0, 254]  	73	3 
[3, 3, 0, 2, 254]  	85	3 
[0, 5, 0, 3, 254]  	106	1 
[1, 8, 1, 0, 254]  	109	2 
[0, 9, 1, 0, 254]  	114	1 
[0, 1, 5, 2, 254]  	120	1 
[0, 1, 0, 7, 254]  	130	1 
[0, 0, 7, 2, 254]  	139	1 
[0, 2, 8, 0, 254]  	142	1 
[0, 0, 1, 2, 255]  	49	1 
[3, 3, 0, 0, 255]  	51	3 
[0, 8, 0, 0, 255]  	88	1 
[0, 5, 0, 2, 255]  	89	1 
[2, 5, 2, 0, 255]  	97	2 
[1, 2, 5, 0, 255]  	103	1 
[1, 0, 6, 1, 255]  	113	2 
[0, 0, 8, 0, 255]  	120	1 
[6, 0, 0, 5, 255]  	121	4 
------
The gap is between 11 and 245.
Lengths: 2 2 4 5 2 4.
For 149 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^4*z^7
1 + 0*2^64 + 0*2^128 + 0*2^192*z^2*w^7

For 83 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^7
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^4

For 17 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^1

Extra powers of p used 9.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[8558766788966688256 + 7261902782819439987*2^64 + 10155921306435276033*2^128 + 182809792011*2^192,8697710372875370496 + 289120179268759898*2^64 + 2130495233122860502*2^128 + 62658892382*2^192,11794963774592163840 + 1159872064610402584*2^64 + 7609989734001572790*2^128 + 326853505637*2^192,3017355980958179328 + 10071152629514295528*2^64 + 10126881050660852785*2^128 + 503648293460*2^192,11613633776025907200 + 17166448755779032692*2^64 + 3882342731142408812*2^128 + 146631839112*2^192,14057677615640739840 + 7737860595164598160*2^64 + 9004465597686684117*2^128 + 497880384922*2^192,5308933953699684352 + 16166734196507604775*2^64 + 4846135474551009660*2^128 + 393316554314*2^192,10085902578184806400 + 17066336243454169675*2^64 + 4416958859420171193*2^128 + 98383456849*2^192;\
18354372484065882773 + 6531058528760283540*2^64 + 9770772125374297167*2^128 + 275519261610*2^192,10546820746383700944 + 9372114194569364204*2^64 + 11560913534814783391*2^128 + 92340349547*2^192,401918058134300080 + 10002653500819593922*2^64 + 9051669345224438027*2^128 + 531559943352*2^192,3445012850470725664 + 5124728063862241128*2^64 + 14415386262822709310*2^128 + 65388575507*2^192,5413606402295171208 + 16740076763943883468*2^64 + 13907526777811337523*2^128 + 273004976976*2^192,7840219184830517600 + 12647279673481663653*2^64 + 18249403795804780903*2^128 + 339031321328*2^192,10158576780270453680 + 15896396228740471979*2^64 + 671154556556485062*2^128 + 312038530362*2^192,6210751027940362848 + 8380174329818923572*2^64 + 8605992097075850574*2^128 + 513584907178*2^192;\
17885325078799844352 + 14170011221873393827*2^64 + 13953047287952515772*2^128 + 397357529884*2^192,17539908580085694464 + 15014173296945728756*2^64 + 3869623349091635446*2^128 + 182975607639*2^192,13020079947648525312 + 16883801817690431895*2^64 + 11770935435038471803*2^128 + 200148001907*2^192,16829164000349601792 + 17328267726670865892*2^64 + 2447006567545750134*2^128 + 91981087690*2^192,12167723824822084608 + 12116618079985886595*2^64 + 9259645130704596325*2^128 + 116540272950*2^192,9924169332813201408 + 11887882206572620008*2^64 + 9326184848909735500*2^128 + 161684114428*2^192,17395214066048393216 + 7115496839562533722*2^64 + 16720794722362095275*2^128 + 4635854230*2^192,8824936180363501568 + 14903232858271031567*2^64 + 16554601155537329087*2^128 + 451302256725*2^192;\
17593705866398859760 + 16302808635808745131*2^64 + 6356503030449706201*2^128 + 42561310460*2^192,13130151039373649664 + 17963552328568753839*2^64 + 14892747942958508593*2^128 + 482807597988*2^192,432521400989570304 + 3812300666914763594*2^64 + 9588635015850594850*2^128 + 341958059436*2^192,15556871561740327424 + 4667377717496184401*2^64 + 7715837512259253561*2^128 + 459872885612*2^192,18209785445811395968 + 5308142961819989631*2^64 + 10977302161263130604*2^128 + 59302721516*2^192,14404321164725363200 + 14274576673206093328*2^64 + 15744824780358156029*2^128 + 81136152635*2^192,3982497844484256000 + 4948238764837150860*2^64 + 10390127453614938458*2^128 + 99904034050*2^192,8010610156857401856 + 16748773956915801047*2^64 + 16357341484824532925*2^128 + 484697011548*2^192;\
10945989255589889024 + 17194575467483625478*2^64 + 7971774116437769067*2^128 + 191534272704*2^192,9850560713306505216 + 6357067409395542373*2^64 + 8494839470709099220*2^128 + 158566124065*2^192,17986589751799020544 + 1501807525810207267*2^64 + 3340181717632653383*2^128 + 113510477686*2^192,10169845159831887872 + 5226801393650483651*2^64 + 17164601904590663498*2^128 + 237607227112*2^192,4771621875723720704 + 15005196554743492790*2^64 + 15917456111296142971*2^128 + 153565982227*2^192,8806806306349252608 + 2736640927191006950*2^64 + 11927029415253009466*2^128 + 368973738802*2^192,245659249267982336 + 8890646820266385881*2^64 + 3181822823841068403*2^128 + 205144351171*2^192,3955122719117295616 + 2184432596595358119*2^64 + 9176148876375719420*2^128 + 543845403338*2^192;\
14870772998982351493 + 7074356796912330970*2^64 + 8364022652371982590*2^128 + 230573997550*2^192,9323137050746632144 + 15859382588446715131*2^64 + 8948385011363081434*2^128 + 358290527137*2^192,4651703276720848880 + 10660661958990323096*2^64 + 5918929121006782540*2^128 + 449180791673*2^192,17076853270920890976 + 12774739592831110096*2^64 + 13953466619965276835*2^128 + 524003644849*2^192,5019348406554337416 + 5213675313733175439*2^64 + 9354443841543113623*2^128 + 157185619258*2^192,13082739651512521056 + 11340959317400751332*2^64 + 17395919044505618492*2^128 + 129546983279*2^192,6479538921006958768 + 18333100435983393037*2^64 + 14869791197554618907*2^128 + 73658934726*2^192,4056967992008660320 + 6252030684240449940*2^64 + 8524913781059321765*2^128 + 447054584785*2^192;\
18264130381490764881 + 13963740318182725969*2^64 + 11029300067002537366*2^128 + 100633028002*2^192,6545974118528946064 + 3882648469727212658*2^64 + 11117857510201842990*2^128 + 109705750301*2^192,14048635652361692784 + 1960679174117034757*2^64 + 3221287094775869656*2^128 + 103136804729*2^192,7485610296505161760 + 14876734188615729231*2^64 + 7994618484111558069*2^128 + 264780417282*2^192,15060490014389642728 + 7966251015353845397*2^64 + 7343399856947556402*2^128 + 47749470358*2^192,17632747412863448544 + 6775572125589714888*2^64 + 5209649454682606060*2^128 + 85857322328*2^192,16078623988826244080 + 12964587810546937985*2^64 + 1130903160674629697*2^128 + 380024230275*2^192,1795958686019653856 + 9549093393099308672*2^64 + 3966848725247883022*2^128 + 184541222282*2^192;\
14235076786114573713 + 9950590687013692416*2^64 + 1906117926745796372*2^128 + 380906944030*2^192,14344139838906524560 + 2904272837751144994*2^64 + 4628103506949787937*2^128 + 388203335977*2^192,9258663404480913520 + 4599991571592685051*2^64 + 16652958221266747169*2^128 + 408421811789*2^192,1286050722448086560 + 11801884677790360361*2^64 + 222199660221331674*2^128 + 43902357914*2^192,14015466054886722536 + 6887083709444492222*2^64 + 14326592268631642022*2^128 + 263143347974*2^192,10768441868940316128 + 13093540623578725514*2^64 + 8731790564450039217*2^128 + 373857927576*2^192,2321184080813383664 + 8278774615954953151*2^64 + 601028618395135710*2^128 + 49118871884*2^192,6983851538900744416 + 5231487303847309528*2^64 + 11575143946395916323*2^128 + 459655956242*2^192]
/* 
This matrix times 2^(-9) should be the matrix of frobenius.
*/ 
B = 2^(-9) * A; 
/* Freed 3327 lists. */
