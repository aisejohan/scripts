/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^11                     = Coefficient of   x^6 * z^2               = Coefficient of   x^3 * y^3 * z^1         = Coefficient of   x^2 * y^2 * z^1 * w^1   = Coefficient of   x^1 * y^1 * z^1 * w^2   = Coefficient of   x^1 * z^4               = Coefficient of   y^6                     = Coefficient of   z^1 * w^3               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^11 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^6*z^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^2*z^1*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^6 + 1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^3


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
Allocate G_len 320 elements and old = 160.
Allocate M_len = 25600 elements.
The final length of G is 136
[2, 2, 1, 0, 0]  	49	3 
[10, 0, 0, 0, 0]  	60	5  <--- 1
[6, 0, 2, 0, 0]  	66	3 
[1, 1, 1, 2, 0]  	66	3 
[6, 2, 0, 1, 0]  	75	7 
[5, 0, 1, 2, 0]  	79	6 
[3, 0, 1, 3, 0]  	84	5 
[4, 4, 0, 1, 0]  	85	5 
[2, 0, 2, 3, 0]  	93	3 
[1, 8, 0, 0, 0]  	94	5 
[2, 6, 0, 1, 0]  	95	4 
[2, 0, 1, 4, 0]  	95	4 
[5, 6, 0, 0, 0]  	96	3 
[3, 4, 0, 2, 0]  	96	6 
[2, 3, 0, 3, 0]  	96	6 
[9, 1, 0, 2, 0]  	99	6 
[0, 6, 0, 2, 0]  	100	3 
[2, 5, 0, 2, 0]  	101	5 
[2, 2, 0, 4, 0]  	102	6 
[5, 2, 0, 3, 0]  	103	7 
[9, 0, 0, 3, 0]  	105	6 
[7, 0, 0, 4, 0]  	110	6 
[1, 0, 7, 0, 0]  	111	3 
[1, 5, 0, 3, 0]  	112	4 
[1, 2, 0, 5, 0]  	113	5 
[1, 4, 0, 4, 0]  	118	5 
[1, 2, 6, 0, 0]  	118	4 
[2, 0, 6, 1, 0]  	119	6 
[0, 8, 1, 1, 0]  	120	3 
[0, 2, 2, 4, 0]  	120	3 
[1, 0, 2, 5, 0]  	121	3 
[1, 0, 1, 6, 0]  	123	3 
[0, 5, 0, 4, 0]  	123	3 
[1, 1, 6, 1, 0]  	124	4 
[0, 9, 2, 0, 0]  	129	2 
[0, 4, 0, 5, 0]  	129	2 
[0, 3, 3, 3, 0]  	129	2 
[1, 0, 6, 2, 0]  	130	3 
[0, 5, 5, 0, 0]  	130	3 
[6, 1, 0, 5, 0]  	132	5 
[1, 0, 5, 3, 0]  	132	4 
[0, 3, 1, 5, 0]  	133	3 
[1, 0, 4, 4, 0]  	134	3 
[0, 3, 0, 6, 0]  	135	1 
[0, 1, 6, 2, 0]  	135	1 
[0, 0, 9, 0, 0]  	135	1  <--- 3
[0, 11, 1, 0, 0]  	136	3 
[0, 5, 2, 3, 0]  	136	3 
[6, 0, 0, 6, 0]  	138	4 
[0, 11, 0, 1, 0]  	138	3 
[0, 2, 1, 6, 0]  	139	2 
[0, 1, 4, 4, 0]  	139	2 
[0, 2, 0, 7, 0]  	141	1 
[0, 1, 3, 5, 0]  	141	1 
[0, 0, 6, 3, 0]  	141	1 
[1, 4, 5, 1, 0]  	142	3 
[4, 0, 0, 7, 0]  	143	4 
[0, 13, 0, 0, 0]  	143	3  <--- 2
[0, 1, 1, 7, 0]  	145	2 
[0, 1, 0, 8, 0]  	147	1 
[0, 0, 3, 6, 0]  	147	1 
[2, 0, 0, 8, 0]  	148	2 
[0, 8, 4, 0, 0]  	148	2 
[0, 2, 5, 3, 0]  	148	2 
[0, 4, 5, 2, 0]  	153	1 
[0, 3, 8, 0, 0]  	153	1 
[0, 0, 0, 9, 0]  	153	1  <--- 4
[0, 2, 8, 1, 0]  	159	1 
[6, 0, 1, 0, 1]  	51	5 
[2, 1, 1, 1, 1]  	55	3 
[1, 7, 0, 0, 1]  	83	2 
[4, 0, 2, 2, 1]  	88	4 
[7, 5, 0, 0, 1]  	97	8 
[5, 3, 0, 2, 1]  	97	8 
[1, 3, 4, 0, 1]  	99	3 
[1, 2, 4, 1, 1]  	105	4 
[3, 0, 6, 0, 1]  	108	6 
[2, 1, 6, 0, 1]  	113	5 
[3, 1, 0, 5, 1]  	114	5 
[1, 0, 4, 3, 1]  	117	3 
[1, 6, 2, 1, 1]  	119	6 
[1, 5, 3, 1, 1]  	123	3 
[2, 1, 0, 6, 1]  	125	5 
[1, 0, 0, 7, 1]  	125	4 
[0, 3, 5, 2, 1]  	142	2 
[1, 6, 0, 0, 2]  	72	3 
[4, 0, 1, 2, 2]  	73	6 
[4, 5, 0, 0, 2]  	79	7 
[0, 8, 0, 1, 2]  	105	3 
[1, 3, 0, 4, 2]  	107	5 
[1, 1, 0, 6, 2]  	119	5 
[0, 7, 2, 1, 2]  	124	4 
[0, 2, 0, 6, 2]  	124	3 
[0, 12, 0, 0, 2]  	132	3 
[0, 5, 3, 2, 2]  	134	3 
[0, 7, 4, 0, 2]  	137	3 
[1, 1, 4, 1, 3]  	94	4 
[5, 0, 4, 0, 4]  	90	5 
[3, 5, 0, 1, 4]  	90	6 
[1, 5, 3, 0, 4]  	106	3 
[0, 6, 3, 0, 4]  	111	3 
[0, 8, 2, 0, 4]  	118	4 
[3, 0, 4, 2, 5]  	112	5 
[0, 4, 6, 1, 5]  	151	2 
[2, 4, 0, 2, 246]  	90	6 
[0, 4, 1, 4, 248]  	127	3 
[0, 2, 1, 4, 250]  	105	3 
[0, 3, 0, 5, 250]  	118	3 
[0, 2, 4, 3, 250]  	133	2 
[1, 1, 6, 0, 251]  	107	5 
[1, 4, 3, 1, 251]  	112	4 
[0, 0, 1, 8, 251]  	151	1 
[1, 4, 0, 3, 252]  	101	5 
[1, 0, 1, 5, 252]  	106	2 
[0, 1, 1, 5, 252]  	111	2 
[0, 1, 1, 4, 253]  	94	2 
[0, 0, 1, 6, 253]  	117	1 
[0, 2, 8, 0, 253]  	142	1 
[1, 0, 1, 3, 254]  	72	2 
[2, 4, 0, 1, 254]  	73	3 
[2, 2, 0, 3, 254]  	85	3 
[0, 8, 1, 0, 254]  	103	1 
[0, 1, 5, 2, 254]  	120	2 
[0, 1, 4, 3, 254]  	122	2 
[0, 0, 7, 2, 254]  	139	1 
[2, 2, 0, 1, 255]  	51	3 
[1, 0, 1, 2, 255]  	55	1 
[3, 5, 0, 0, 255]  	73	5 
[0, 0, 1, 4, 255]  	83	1 
[1, 2, 4, 0, 255]  	88	2 
[0, 8, 0, 0, 255]  	88	1 
[0, 3, 2, 2, 255]  	97	2 
[0, 1, 4, 2, 255]  	105	2 
[0, 0, 5, 2, 255]  	109	1 
[0, 0, 8, 0, 255]  	120	1 
[0, 0, 0, 8, 255]  	136	1 
------
The gap is between 6 and 245.
Lengths: 2 2 4 5 2 4.
For 149 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^4*z^7
1 + 0*2^64 + 0*2^128 + 0*2^192*z^2*w^7

For 83 = 2*d-d1-d2-d3-d4 you get 4 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^1*z^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^4*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^6*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*z^1*w^4

For 17 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1
1 + 0*2^64 + 0*2^128 + 0*2^192*w^1

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 
*/
A = \
[11559063630744316112 + 15187430202168001654*2^64 + 5839595594617032289*2^128 + 1140184725*2^192,10737310683974483712 + 16043783735814747456*2^64 + 16620051167942538696*2^128 + 10507395765*2^192,1888224998758130304 + 9735813490609992534*2^64 + 9649437155993166774*2^128 + 3438956205*2^192,12796713780866611968 + 14644730324504511906*2^64 + 9503336359424913362*2^128 + 11275655622*2^192,10876016066193529856 + 14760857827725309421*2^64 + 15741374509154572468*2^128 + 14248727498*2^192,608612546455983104 + 3316241538492515231*2^64 + 8449404688408742676*2^128 + 3751372420*2^192,8173004781169228544 + 18150378589921473457*2^64 + 2736392197104359805*2^128 + 2992210857*2^192,3546248628367837696 + 5245624944785950969*2^64 + 16257799991773181115*2^128 + 2948637555*2^192;\
17480490732847381482 + 3037588067915257254*2^64 + 2303289664020625930*2^128 + 4547808254*2^192,5203783532930574608 + 9406743736929031872*2^64 + 11064944263487162397*2^128 + 7552338570*2^192,4808267621414822752 + 5040770153290441285*2^64 + 13605466145938932539*2^128 + 13509993554*2^192,15468871550673157776 + 3036272860304536745*2^64 + 7087658465900964444*2^128 + 13748724495*2^192,1866409328530214208 + 1700781504925826129*2^64 + 15670620726871683136*2^128 + 964273219*2^192,826297850752512768 + 10725717731070850560*2^64 + 16172816696955859042*2^128 + 13598398615*2^192,7167654263744612832 + 5280178553617136345*2^64 + 5236653461285092289*2^128 + 11290016184*2^192,17348682350645737760 + 14477437906903492050*2^64 + 10905616778644219280*2^128 + 7879447953*2^192;\
3159407106712197696 + 2197299587896229558*2^64 + 9294694433543647969*2^128 + 1484608388*2^192,2295459808913787136 + 6952301891557706761*2^64 + 11427533109192332032*2^128 + 11878780168*2^192,4734905132561968992 + 12665347493590300855*2^64 + 10053279246226923058*2^128 + 6201811203*2^192,14100071630691843136 + 14425898826446254645*2^64 + 16314928954360452543*2^128 + 2668931503*2^192,15011764916804737920 + 6681525446781809758*2^64 + 15705062419062216343*2^128 + 6693413745*2^192,3487134344672336384 + 14439109550876831385*2^64 + 12135954117415526085*2^128 + 3474202458*2^192,6054422757415558400 + 7577240114420168182*2^64 + 13199357901842078738*2^128 + 9252500718*2^192,14016431543801456896 + 1775759154358336153*2^64 + 8366577640463019187*2^128 + 15290086424*2^192;\
17518251477897595360 + 4810212651297585679*2^64 + 7181946766877965346*2^128 + 4925509813*2^192,6506002419321909504 + 15945712708508426396*2^64 + 13806513919538547511*2^128 + 7040205346*2^192,9433436490658364256 + 14543260754458351184*2^64 + 12777613100963826662*2^128 + 16781337146*2^192,9232618765753103392 + 9300426456647711046*2^64 + 8209013512597854070*2^128 + 13192412465*2^192,13882475852394780928 + 16680292992803920178*2^64 + 8253481283073930265*2^128 + 17041723501*2^192,4338688581108678144 + 458732569731487501*2^64 + 11957276498141019650*2^128 + 11740347872*2^192,5799679084179389696 + 6379169343873284292*2^64 + 13318176855006084372*2^128 + 1115660202*2^192,16899780877852146944 + 12979871817476939582*2^64 + 1383392198920026680*2^128 + 11690785649*2^192;\
15003935485862338138 + 3084512155390450485*2^64 + 12461298024665713186*2^128 + 591419901*2^192,5330661840860875280 + 1121937297340521003*2^64 + 18413693352594027698*2^128 + 12204896001*2^192,7283789979032838464 + 18233851666109712663*2^64 + 4077067598075941512*2^128 + 13261158584*2^192,1387726623849817776 + 14658355979338233409*2^64 + 8733249941535700744*2^128 + 11222567433*2^192,15588946987135681888 + 5883052561472345734*2^64 + 8608151403369843048*2^128 + 14692023552*2^192,16540208372630024640 + 10694184298692317693*2^64 + 9839980962438622612*2^128 + 8865735468*2^192,5700399940591999968 + 2868979731927216369*2^64 + 16651507441431080867*2^128 + 2489026611*2^192,18060797117491397280 + 12380807764159197658*2^64 + 3709067835244120072*2^128 + 1252931282*2^192;\
17146609278307599097 + 10277397906680874099*2^64 + 13033454718922149696*2^128 + 12961679802*2^192,12635810108652935576 + 3412543060501839577*2^64 + 11233777768270886532*2^128 + 16593853734*2^192,15418510621698239776 + 853826503972541178*2^64 + 3321215035611825698*2^128 + 4469536462*2^192,11839125230314795272 + 10559433518542005996*2^64 + 451790782260956475*2^128 + 9536434272*2^192,14313182454919078976 + 965109249394737311*2^64 + 12931962630583611820*2^128 + 13558862325*2^192,3421923082926981216 + 9401960475097482056*2^64 + 8502384062019598700*2^128 + 10514267098*2^192,10948820866961183856 + 17069560566905437379*2^64 + 12719462338742619619*2^128 + 6330876264*2^192,9079512605326065232 + 13442576295017555203*2^64 + 10674109191250951857*2^128 + 238969862*2^192;\
6584426340080136136 + 953573466663642207*2^64 + 4518437352429281966*2^128 + 14231879391*2^192,16213284358067728640 + 15609999043556351983*2^64 + 12915310844200658256*2^128 + 14392753766*2^192,666555283341331840 + 13561287559321050744*2^64 + 7259948823433309159*2^128 + 13012914583*2^192,12456380272928755328 + 7168498067930053527*2^64 + 11996038145787236586*2^128 + 3125323194*2^192,5648674655053765696 + 3713337032323856238*2^64 + 1334340545570407927*2^128 + 238180811*2^192,13432696878002629376 + 16904425408560483342*2^64 + 11344390402009645509*2^128 + 5473069342*2^192,9101910035978439872 + 16472704810675409231*2^64 + 9305003472053994693*2^128 + 2188528334*2^192,10095677350879712512 + 3991635802185185109*2^64 + 1061145696251866839*2^128 + 5810098815*2^192;\
4942681772892512830 + 4289453599340454701*2^64 + 17894853035807362086*2^128 + 6092676723*2^192,18018328817308714896 + 4652213997986851296*2^64 + 2263865574330909068*2^128 + 12562283235*2^192,3771303182006704256 + 12757875854506312199*2^64 + 953982097480580325*2^128 + 8393793714*2^192,11217944306009415408 + 4921069488457006424*2^64 + 13287380953900538227*2^128 + 13413772859*2^192,6997881592264316416 + 9398297897814465583*2^64 + 769345822100577720*2^128 + 1202224323*2^192,12717378820793693504 + 11562873793899219865*2^64 + 6759387365153962137*2^128 + 13148429130*2^192,9496122035673705568 + 7432825766136257769*2^64 + 17737533131774479951*2^128 + 3855154200*2^192,18049739938540648480 + 12884452084764161439*2^64 + 14763126704499382291*2^128 + 12926178519*2^192]
/* 
This matrix times 2^(-4) should be the matrix of frobenius.
*/ 
B = 2^(-4) * A; 
/* Freed 3248 lists. */
