/* Comments begin... 
No set up needed.

Please input coefficients below.
Coefficient of   x^8 * z^1               = Coefficient of   x^7 * y^2               = Coefficient of   x^4 * y^1 * w^2         = Coefficient of   x^2 * y^1 * z^2 * w^1   = Coefficient of   x^1 * y^3 * z^1 * w^1   = Coefficient of   x^1 * w^4               = Coefficient of   y^5 * w^1               = Coefficient of   y^1 * z^4               = 
Here is the polynomial we're using this time:

1 + 0*2^64 + 0*2^128 + 0*2^192*x^8*z^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^4*y^1*w^2 + 1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*w^4 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^5*w^1 + 1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^4


Allocate G_len 20 elements and old = 0.
Allocate M_len = 400 elements.
Allocate G_len 40 elements and old = 20.
Allocate M_len = 800 elements.
Allocate G_len 80 elements and old = 40.
Allocate M_len = 1600 elements.
Allocate M_len = 3200 elements.
Allocate G_len 160 elements and old = 80.
Allocate M_len = 6400 elements.
Allocate M_len = 12800 elements.
The final length of G is 113
[8, 0, 0, 0, 0]  	56	2  <--- 1
[4, 0, 0, 2, 0]  	60	3 
[1, 0, 0, 4, 0]  	71	2 
[0, 5, 0, 1, 0]  	71	2 
[4, 5, 0, 0, 0]  	83	4 
[4, 4, 0, 1, 0]  	88	3 
[4, 1, 4, 0, 0]  	99	2 
[1, 4, 0, 3, 0]  	99	4 
[4, 0, 4, 1, 0]  	104	3 
[1, 1, 4, 2, 0]  	110	2 
[0, 10, 0, 0, 0]  	110	2  <--- 2
[1, 0, 4, 3, 0]  	115	2 
[0, 5, 4, 0, 0]  	115	2 
[3, 9, 0, 0, 0]  	120	4 
[0, 4, 4, 2, 0]  	136	2 
[1, 1, 8, 0, 0]  	138	2 
[0, 4, 1, 5, 0]  	139	3 
[0, 4, 0, 6, 0]  	140	3 
[3, 0, 8, 0, 0]  	141	2 
[1, 0, 8, 1, 0]  	143	2 
[0, 3, 1, 6, 0]  	144	3 
[0, 4, 3, 4, 0]  	153	2 
[0, 3, 8, 0, 0]  	153	2 
[0, 1, 0, 9, 0]  	155	2 
[0, 3, 4, 4, 0]  	157	2 
[0, 2, 9, 0, 0]  	157	2 
[2, 9, 3, 0, 0]  	158	3 
[0, 2, 4, 5, 0]  	162	1 
[0, 1, 9, 1, 0]  	162	1 
[0, 2, 1, 8, 0]  	165	2 
[0, 1, 6, 4, 0]  	165	2 
[0, 1, 5, 5, 0]  	166	1 
[0, 0, 10, 1, 0]  	166	1 
[0, 1, 4, 6, 0]  	167	1 
[0, 0, 9, 2, 0]  	167	1 
[0, 1, 2, 8, 0]  	169	1 
[0, 0, 7, 4, 0]  	169	1 
[0, 0, 3, 8, 0]  	173	1 
[0, 2, 8, 2, 0]  	174	1 
[0, 0, 2, 9, 0]  	174	1 
[0, 1, 11, 0, 0]  	176	1 
[0, 0, 0, 11, 0]  	176	1  <--- 4
[0, 0, 12, 0, 0]  	180	1  <--- 3
[0, 0, 5, 7, 0]  	187	1 
[4, 1, 0, 1, 1]  	55	3 
[4, 0, 4, 0, 1]  	88	4 
[2, 0, 8, 0, 1]  	134	4 
[0, 3, 6, 2, 1]  	155	2 
[3, 5, 1, 0, 2]  	91	5 
[3, 1, 4, 0, 2]  	92	3 
[1, 0, 4, 2, 2]  	99	3 
[3, 8, 0, 0, 2]  	109	4 
[3, 2, 3, 2, 2]  	120	2 
[3, 1, 3, 3, 2]  	125	3 
[0, 2, 3, 4, 2]  	131	2 
[0, 1, 3, 5, 2]  	136	2 
[0, 2, 0, 8, 2]  	150	2 
[7, 0, 1, 0, 3]  	64	3 
[3, 4, 1, 1, 3]  	96	4 
[0, 4, 4, 1, 3]  	120	3 
[3, 0, 7, 1, 3]  	142	4 
[2, 3, 4, 0, 4]  	107	4 
[2, 2, 7, 0, 4]  	141	3 
[1, 9, 3, 0, 4]  	151	3 
[1, 0, 11, 0, 5]  	172	2 
[2, 3, 3, 2, 6]  	124	3 
[0, 9, 3, 0, 6]  	144	3 
[2, 2, 3, 3, 7]  	129	3 
[2, 1, 7, 1, 7]  	146	2 
[1, 4, 3, 2, 8]  	128	2 
[1, 4, 7, 0, 8]  	156	3 
[1, 1, 7, 1, 9]  	139	2 
[1, 3, 7, 0, 9]  	145	3 
[0, 2, 7, 1, 13]  	143	2 
[0, 2, 6, 3, 13]  	160	2 
[0, 0, 2, 8, 239]  	158	1 
[0, 0, 1, 9, 241]  	159	1 
[0, 0, 0, 10, 241]  	160	1 
[0, 0, 1, 8, 243]  	143	1 
[0, 1, 10, 0, 243]  	161	1 
[0, 1, 5, 4, 245]  	150	1 
[0, 1, 0, 8, 247]  	139	1 
[0, 3, 0, 7, 247]  	145	2 
[0, 1, 9, 0, 247]  	146	1 
[0, 0, 0, 8, 248]  	128	1 
[0, 0, 9, 1, 248]  	151	1 
[0, 0, 4, 7, 248]  	172	1 
[0, 3, 0, 6, 249]  	129	2 
[0, 3, 5, 3, 249]  	156	2 
[0, 4, 0, 5, 250]  	124	2 
[0, 1, 4, 4, 250]  	135	1 
[0, 0, 8, 2, 250]  	152	1 
[0, 3, 5, 2, 251]  	140	2 
[0, 2, 0, 6, 252]  	118	2 
[0, 1, 0, 7, 252]  	123	2 
[0, 1, 8, 0, 252]  	131	1 
[0, 0, 8, 1, 252]  	136	1 
[0, 0, 3, 7, 252]  	157	1 
[0, 0, 0, 6, 253]  	96	1 
[0, 4, 1, 3, 253]  	107	3 
[0, 4, 0, 4, 253]  	108	1 
[2, 9, 0, 0, 253]  	113	2 
[0, 0, 8, 0, 253]  	120	1 
[0, 0, 4, 4, 253]  	124	1 
[0, 3, 4, 3, 253]  	141	2 
[0, 0, 0, 4, 254]  	64	1 
[0, 4, 0, 3, 254]  	92	2 
[0, 9, 0, 0, 254]  	99	1 
[0, 1, 4, 2, 254]  	103	1 
[0, 0, 4, 3, 254]  	108	1 
[0, 5, 0, 0, 255]  	55	1 
[3, 1, 0, 2, 255]  	64	2 
[3, 0, 5, 1, 255]  	112	3 
------
The gap is between 14 and 238.
Lengths: 2 2 6 6 2 5.
For 164 = 3*d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2*z^2*w^7
1 + 0*2^64 + 0*2^128 + 0*2^192*y^1*z^7*w^3

For 93 = 2*d-d1-d2-d3-d4 you get 6 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^7*y^4
1 + 0*2^64 + 0*2^128 + 0*2^192*x^3*y^1*z^3*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^2*y^3*z^2*w^1
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*y^1*z^5
1 + 0*2^64 + 0*2^128 + 0*2^192*y^3*z^4
1 + 0*2^64 + 0*2^128 + 0*2^192*z^3*w^3

For 22 = d-d1-d2-d3-d4 you get 2 in char 0.
1 + 0*2^64 + 0*2^128 + 0*2^192*x^1*z^1
1 + 0*2^64 + 0*2^128 + 0*2^192*y^2

Extra powers of p used 4.
The invariant extra is equal to 33.
Start computing 2^4 Delta^1 (x1x2x3x4)^1... Done.
Start computing 2^5 Delta^2 (x1x2x3x4)^1... Done.
Start computing 2^6 Delta^3 (x1x2x3x4)^1... Done.
Start computing 2^7 Delta^4 (x1x2x3x4)^1... Done.
Start computing 2^8 Delta^5 (x1x2x3x4)^1... Done.
Start computing 2^9 Delta^6 (x1x2x3x4)^1... Done.
Start computing 2^10 Delta^7 (x1x2x3x4)^1... Done.
Start computing 2^11 Delta^8 (x1x2x3x4)^1... Done.
Start computing 2^12 Delta^9 (x1x2x3x4)^1... Done.
Start computing 2^13 Delta^10 (x1x2x3x4)^1... Done.
Start computing 2^14 Delta^11 (x1x2x3x4)^1... Done.
Start computing 2^15 Delta^12 (x1x2x3x4)^1... Done.
Start computing 2^16 Delta^13 (x1x2x3x4)^1... Done.
Start computing 2^17 Delta^14 (x1x2x3x4)^1... Done.
Start computing 2^18 Delta^15 (x1x2x3x4)^1... Done.
Start computing 2^19 Delta^16 (x1x2x3x4)^1... Done.
Start computing 2^20 Delta^17 (x1x2x3x4)^1... Done.
Start computing 2^21 Delta^18 (x1x2x3x4)^1... Done.
Start computing 2^22 Delta^19 (x1x2x3x4)^1... Done.
Start computing 2^23 Delta^20 (x1x2x3x4)^1... Done.
Start computing 2^24 Delta^21 (x1x2x3x4)^1... Done.
Start computing 2^25 Delta^22 (x1x2x3x4)^1... Done.
Start computing 2^26 Delta^23 (x1x2x3x4)^1... Done.
Start computing 2^27 Delta^24 (x1x2x3x4)^1... Done.
Start computing 2^28 Delta^25 (x1x2x3x4)^1... Done.
Start computing 2^29 Delta^26 (x1x2x3x4)^1... Done.
Start computing 2^30 Delta^27 (x1x2x3x4)^1... Done.
Start computing 2^31 Delta^28 (x1x2x3x4)^1... Done.
Start computing 2^32 Delta^29 (x1x2x3x4)^1... Done.
Start computing 2^33 Delta^30 (x1x2x3x4)^1... Done.
Start computing 2^34 Delta^31 (x1x2x3x4)^1... Done.
Start computing 2^35 Delta^32 (x1x2x3x4)^1... Done.
Start computing 2^36 Delta^33 (x1x2x3x4)^1... Done.
Start computing 2^37 Delta^34 (x1x2x3x4)^1... Done.
Start computing 2^38 Delta^35 (x1x2x3x4)^1... Done.
Start computing aa.
1 2 3 4 5 6 7 8 9 10 
*/
A = \
[2267398571971075002 + 10989156342197445293*2^64 + 16199605609246656942*2^128 + 477271370*2^192,7952163619583886221 + 12356321055226882669*2^64 + 3780233236077804636*2^128 + 1339011314*2^192,3346085810835166632 + 15961223059171020713*2^64 + 11315122301546658296*2^128 + 2724859129*2^192,10507642370636896349 + 216293067217520405*2^64 + 241934135479610871*2^128 + 1505604320*2^192,1559802642677902992 + 10529791380410112717*2^64 + 16094952539963466240*2^128 + 3689719117*2^192,1118129000375336297 + 8531486275297826403*2^64 + 11115532198569531267*2^128 + 945400787*2^192,8088450009416205632 + 12104167308977343706*2^64 + 6870688404762390305*2^128 + 80418468*2^192,12730963226978219308 + 5786323186562130290*2^64 + 7516112084320271399*2^128 + 1995808750*2^192,10969018438728756770 + 11021762260654133011*2^64 + 10301680723469255296*2^128 + 2590550256*2^192,4041757871059955232 + 7881342290229791403*2^64 + 288480193866169842*2^128 + 1762234652*2^192;\
867587776910908364 + 3536425959754238656*2^64 + 13970919756962765157*2^128 + 1489775934*2^192,5178784471249737734 + 503547496867902115*2^64 + 10094108499755618953*2^128 + 2381942662*2^192,876732577396457488 + 4311718279240277298*2^64 + 935217677931587374*2^128 + 3770926422*2^192,5541790865012412434 + 13263924109449003974*2^64 + 4408025949620487365*2^128 + 2440849582*2^192,10337075315448187040 + 679718745514258053*2^64 + 17838538476743354107*2^128 + 1186765864*2^192,1102367535522718318 + 3581614019753154339*2^64 + 17026842229695561339*2^128 + 3834635357*2^192,7261488851026090240 + 14976172720847438411*2^64 + 12701848705940622276*2^128 + 2040381493*2^192,3020391567923003384 + 4054679871744055330*2^64 + 12755731435108258334*2^128 + 761681049*2^192,8979444580252963700 + 108094299674025272*2^64 + 7230053600411317537*2^128 + 3929859184*2^192,2137422445065315520 + 6593770825926463077*2^64 + 6228441102673269074*2^128 + 3004643926*2^192;\
0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,10250701138584141832 + 5237561937588078428*2^64 + 15069447012531778926*2^128 + 1958556894*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192,0 + 0*2^64 + 0*2^128 + 0*2^192;\
15781745466677895400 + 16690394723090980201*2^64 + 1790154041077372807*2^128 + 1948537597*2^192,4063413676947108676 + 10991776658691716414*2^64 + 18028805100364956505*2^128 + 1470622765*2^192,13084769918796859296 + 9106704813239455223*2^64 + 3865412278007452321*2^128 + 1002663354*2^192,13279486291051665564 + 11642270241417666918*2^64 + 965710916073852753*2^128 + 1592511183*2^192,10086701175288683328 + 32808472913893977*2^64 + 5107444873866325346*2^128 + 1444244276*2^192,16686849561712748580 + 17847303556316508323*2^64 + 12203184833298021615*2^128 + 2045500811*2^192,4354940573376507648 + 17689258868332708928*2^64 + 13322390506407269116*2^128 + 264935284*2^192,9947180364775734320 + 18133319301761637624*2^64 + 1685491865992099879*2^128 + 1757212944*2^192,5870435484280356008 + 8586447827892754951*2^64 + 15665234926204093151*2^128 + 1056167257*2^192,2415113192365755008 + 7671895160336742776*2^64 + 12057300964040019237*2^128 + 458858390*2^192;\
5279453412361218940 + 8242884441559553232*2^64 + 14328478485978995190*2^128 + 9696181*2^192,15792428191870262622 + 7684420558280702766*2^64 + 12354998263803826813*2^128 + 105459864*2^192,2417938492638382000 + 1585365384246011377*2^64 + 8990803311856786649*2^128 + 1749346985*2^192,5767491666592321702 + 4419068349249156424*2^64 + 9272073096133640505*2^128 + 1631778598*2^192,153688788034543200 + 14041646325100596982*2^64 + 4772411179410343985*2^128 + 413555690*2^192,14559938796195105038 + 16643525987088344073*2^64 + 4531715517250719667*2^128 + 2039305765*2^192,5037194606022156928 + 10877131848302780828*2^64 + 8882751062121122639*2^128 + 245899321*2^192,15169189909006507048 + 17427481976056502934*2^64 + 10717707997457754947*2^128 + 1690122666*2^192,4073622753943565484 + 9343063709977562734*2^64 + 18009028653230105641*2^128 + 1285030999*2^192,16149437325705926336 + 17929883018340015790*2^64 + 4646832141988058386*2^128 + 114442142*2^192;\
15975521628809105744 + 1559535349101164376*2^64 + 15854395424514900230*2^128 + 1411279618*2^192,6101662579845784384 + 16285666549562138388*2^64 + 16876899695998280508*2^128 + 698079340*2^192,4609896050124637056 + 4734951740135447586*2^64 + 3722940944564661868*2^128 + 3235053398*2^192,13143905164577258480 + 11473758753902935076*2^64 + 1613728084747306543*2^128 + 103620312*2^192,6330751940125550792 + 5543850086697884399*2^64 + 4277164540015051787*2^128 + 2427109049*2^192,13062406618533688512 + 5003507221023318190*2^64 + 5477314927464368538*2^128 + 2503600769*2^192,3125652737239551072 + 6507724945435826986*2^64 + 6695070390649707088*2^128 + 1164780612*2^192,14664682131841359424 + 18190616041481703319*2^64 + 8382763010379121726*2^128 + 4273597756*2^192,15797054290791500512 + 4887527735991340126*2^64 + 12483468992149977821*2^128 + 2241842989*2^192,12554827732594686896 + 14896719153495838818*2^64 + 332124674991798405*2^128 + 3413796278*2^192;\
6448868318825973200 + 16183391779020291411*2^64 + 10995097245227970050*2^128 + 2110890724*2^192,15150545686260534512 + 9630153103377339152*2^64 + 15127271970091424014*2^128 + 559036830*2^192,3780934173587217152 + 11036189486761618097*2^64 + 4962467257272738706*2^128 + 2695102350*2^192,9423567632562830944 + 10148926066093823884*2^64 + 11165828259963348706*2^128 + 2734139832*2^192,2241587212479672040 + 4428397405783863577*2^64 + 1518625245868383121*2^128 + 2427075758*2^192,11014153909877621360 + 12514184656939554567*2^64 + 2598993358933946120*2^128 + 4009505428*2^192,6232277416116418936 + 12210920831809151104*2^64 + 11194814251719966438*2^128 + 332269037*2^192,14487953898328388224 + 16557965360538046468*2^64 + 10409893628231968969*2^128 + 1965368190*2^192,11032947994895051328 + 6688325763656469984*2^64 + 6536383742458759761*2^128 + 795502564*2^192,5966238986622254832 + 2112370946710744779*2^64 + 764503369680380599*2^128 + 553458595*2^192;\
18012950185254097434 + 7455159056977656479*2^64 + 11461284195228169037*2^128 + 429517152*2^192,17427476226622936065 + 11233321845757706118*2^64 + 15531521296797287700*2^128 + 27240687*2^192,18008377785011322872 + 16290884934089412966*2^64 + 17979135234743757928*2^128 + 798891348*2^192,15675848641203345399 + 2591409982130273820*2^64 + 16242731098899307933*2^128 + 1816251304*2^192,4054834379130682288 + 8883512664097646781*2^64 + 9527474835337874562*2^128 + 329363947*2^192,8672188269093416649 + 7432565026978198638*2^64 + 709950922006995138*2^128 + 1580731857*2^192,5592627611341730688 + 10958657713285832410*2^64 + 2872447683884464669*2^128 + 1613832165*2^192,8740505354622640140 + 3210222001716050763*2^64 + 17914953331832425567*2^128 + 1376389777*2^192,13957021783583069766 + 9169324887017763171*2^64 + 14831717273503892847*2^128 + 627150279*2^192,8154660814322118048 + 15149858660746320077*2^64 + 15332523522372917078*2^128 + 259285716*2^192;\
14889710836514291968 + 4864675410313606122*2^64 + 16768767604301940991*2^128 + 107121151*2^192,8377029941565788320 + 6043972866240742951*2^64 + 1099147354057130309*2^128 + 2982815807*2^192,1219636828115642368 + 10555440608084613124*2^64 + 11947151516885567455*2^128 + 1885445919*2^192,12416481438225616128 + 9791568721426502034*2^64 + 8844306120302554086*2^128 + 3013192947*2^192,17245746687405517408 + 4307434900793661383*2^64 + 3226055187837680530*2^128 + 2553672321*2^192,8175509708254298336 + 13900366781113454783*2^64 + 14472782621420393992*2^128 + 1976462416*2^192,11410804839595760608 + 3907184800343349430*2^64 + 16780778141892065823*2^128 + 1972614172*2^192,17043809267831237632 + 14929317840108406226*2^64 + 2619591963579860183*2^128 + 650099373*2^192,11250513523911483616 + 15566538342595869612*2^64 + 3719436900296577647*2^128 + 3348963496*2^192,10758232270241788784 + 8406389075493959920*2^64 + 18164299864851829125*2^128 + 3124127287*2^192;\
17440807917479879664 + 11008827450638187398*2^64 + 1681727664214434914*2^128 + 2649128775*2^192,4221860369066194880 + 17046100994952310713*2^64 + 1253275169521249003*2^128 + 3119503189*2^192,5739643059560331392 + 16948426418238715678*2^64 + 8647484315298227510*2^128 + 1410448287*2^192,4989002844124569488 + 6672469092563127687*2^64 + 2177151176115656701*2^128 + 2662985765*2^192,15674649661972319928 + 11941016770461885903*2^64 + 12908063221007426381*2^128 + 498238733*2^192,11008208601071817392 + 5723917247427227532*2^64 + 4508446503356385475*2^128 + 3734766169*2^192,12726790828375782760 + 18149892416398433645*2^64 + 15935132569343397694*2^128 + 3583070688*2^192,3695268099368379328 + 9564600302797033104*2^64 + 15530012764711721706*2^128 + 1002842002*2^192,14210819274120682784 + 4826773412524652916*2^64 + 6038416376142571514*2^128 + 278328388*2^192,13310519375788844576 + 3459550339277064635*2^64 + 11699378331050120312*2^128 + 1044549397*2^192]
/* 
This matrix times 2^(-2) should be the matrix of frobenius.
*/ 
B = 2^(-2) * A; 
/* Freed 2895 lists. */
